{"instruction":"Check if the date variable is valid.","input":"Variables: date, customer_name, address, city, state, zip","output":"IsDate(date)"}
{"instruction":"Find the index of the first occurrence of the character 'a' in the input string.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"IndexOf(input_string, \"a\")"}
{"instruction":"Trim any extra spaces in the input string.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"Trim(input_string)"}
{"instruction":"Subtract 5 years from the input date.","input":"Variables: date, customer_name, address, city, state, zip","output":"AddYears(date, -5)"}
{"instruction":"Convert the input string to uppercase.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"ToUpper(input_string)"}
{"instruction":"Check if the name contains the word \"hello\".","input":"Variables: customer_name, address, city, state, zip","output":"Contains(customer_name, \"hello\")"}
{"instruction":"Replace any spaces in the input string with the underscore character.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"ReplaceAll(input_string, \" \", \"_\")"}
{"instruction":"Check if the input string is numeric.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"IsNumeric(input_string)"}
{"instruction":"Convert the input string to a DateTime type using the format 'yyyy-MM-dd HH:mm:ss'.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"ToDate(input_string, \"yyyy-MM-dd HH:mm:ss\")"}
{"instruction":"Get the year from the date variable.","input":"Variables: date, order_id, order_total","output":"Year(date)"}
{"instruction":"Replace all occurrences of the word \"world\" with \"universe\" in the input string.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"ReplaceAll(input_string, \"world\", \"universe\")"}
{"instruction":"Check if the input string starts with the word \"hello\".","input":"Variables: input_string, customer_name, address, city, state, zip","output":"StartsWith(input_string, \"hello\")"}
{"instruction":"Get the day of the week from the input date.","input":"Variables: date, customer_name, address, city, state, zip","output":"DayOfWeek(date)"}
{"instruction":"Convert the input string to a Decimal type.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"ToDecimal(input_string)"}
{"instruction":"Check if the input string is null or empty.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"IsNullOrEmpty(input_string)"}
{"instruction":"Convert the input string to a Real number.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"ToReal(input_string)"}
{"instruction":"Check if the input string ends with the word \"world\".","input":"Variables: input_string, customer_name, address, city, state, zip","output":"EndsWith(input_string, \"world\")"}
{"instruction":"Find the first occurrence of the word \"hello\" in the input string starting from the 5th character.","input":"Variables: input_string, customer_name, address, city, state, zip","output":"Find(\"hello\", input_string, 5)"}
{"instruction":"Check if the name variable is not null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNotNull(name)"}
{"instruction":"Convert the date variable to a string type with format \"MM/dd/yyyy\".","input":"Variables: order_date, order_id, order_total","output":"ToString(order_date, \"MM/dd/yyyy\")"}
{"instruction":"Get the second word from the input string.","input":"Variables: sentence","output":"SubString(sentence, IndexOf(sentence, \" \")+1, IndexOf(sentence, \" \", IndexOf(sentence, \" \")+1)-IndexOf(sentence, \" \")-1)"}
{"instruction":"Check if the input string contains the word \"hello\".","input":"Variables: sentence","output":"Contains(sentence, \"hello\")"}
{"instruction":"Get the last 5 characters of the input string.","input":"Variables: text","output":"Right(text, 5)"}
{"instruction":"Replace all occurrences of \"world\" with \"universe\" in the input string.","input":"Variables: sentence","output":"ReplaceAll(sentence, \"world\", \"universe\")"}
{"instruction":"Convert the input date string to a Date type using format \"dd-MMM-yyyy\".","input":"Variables: date_str","output":"ToDate(date_str, \"dd-MMM-yyyy\")"}
{"instruction":"Check if the input string is numeric.","input":"Variables: text","output":"IsNumeric(text)"}
{"instruction":"Get the first and last words from the input string separated by a space.","input":"Variables: sentence","output":"Concatenate(Left(sentence, IndexOf(sentence, \" \")), Right(sentence, Length(sentence)-IndexOf(sentence, \" \")-1))"}
{"instruction":"Check if the input string starts with \"https://\".","input":"Variables: url","output":"StartsWith(url, \"https://\")"}
{"instruction":"Convert the input string to title case.","input":"Variables: text","output":"Proper(text)"}
{"instruction":"Remove all spaces from the input string.","input":"Variables: text","output":"ReplaceAll(text, \" \", \"\")"}
{"instruction":"Add 3 days to the input date variable.","input":"Variables: date","output":"AddDays(date, 3)"}
{"instruction":"Get the difference in days between two input date variables.","input":"Variables: start_date, end_date","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Check if the input string contains only alphabetical characters.","input":"Variables: text","output":"IsAlpha(text)"}
{"instruction":"Convert the input string to uppercase.","input":"Variables: text","output":"ToUpper(text)"}
{"instruction":"Get the current month as a number.","input":"","output":"Month(Now())"}
{"instruction":"Check if the input date variable is a valid SQL date.","input":"Variables: date","output":"IsValidSqlDate(date)"}
{"instruction":"Check if the address variable is not null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNotNull(address)"}
{"instruction":"Return the current year.","input":"","output":"Year(Now())"}
{"instruction":"Combine the first and last name and convert it to proper case.","input":"Variables: fname, lname, address, city, state, zip","output":"ToProper(Concatenate(fname, lname))"}
{"instruction":"Check if the payment method is 'credit card' and return true if it is.","input":"Variables: payment_method, order_id, order_total","output":"Equals(payment_method, \"credit card\")"}
{"instruction":"Calculate the total age in years from the date of birth variable.","input":"Variables: dob, name, address, city, state, zip","output":"DateDifferenceYears(dob, Now())"}
{"instruction":"Get the month and day components of the date variable and concatenate them with a hyphen.","input":"Variables: date, order_id, order_total","output":"Concatenate(ToString(Month(date), \"00\"), \"-\", ToString(Day(date), \"00\"))"}
{"instruction":"Check if the total price is greater than or equal to 100.","input":"Variables: price, order_id, order_total","output":"GreaterThanOrEqual(order_total, 100)"}
{"instruction":"Return the current time in 24-hour format.","input":"","output":"TimeToIntegerHHMMSS(Now())"}
{"instruction":"Replace all occurrences of the word 'red' with 'blue' in the input variable.","input":"Variables: input, order_id, order_total","output":"ReplaceAll(input, \"red\", \"blue\")"}
{"instruction":"Get the first 5 characters of the name variable.","input":"Variables: name, address, city, state, zip","output":"Left(name, 5)"}
{"instruction":"Remove the first 3 characters of the input variable.","input":"Variables: input, order_id, order_total","output":"SubString(input, 3)"}
{"instruction":"Check if the input variable contains the word 'hello'.","input":"Variables: input, order_id, order_total","output":"Contains(input, \"hello\")"}
{"instruction":"Get the number of days between the two date variables.","input":"Variables: date1, date2, order_total","output":"DateDifferenceDays(date1, date2)"}
{"instruction":"Convert the string variable to an integer type.","input":"Variables: str, order_id, order_total","output":"ToInteger(str)"}
{"instruction":"Check if the zip code variable is a valid US zip code.","input":"Variables: name, address, city, state, zip","output":"IsUSZipCode(zip)"}
{"instruction":"Get the hour component of the time variable in 24-hour format.","input":"Variables: time, order_id, order_total","output":"Hour(time)"}
{"instruction":"Get the length of the input variable.","input":"Variables: input, order_id, order_total","output":"Length(input)"}
{"instruction":"Check if the string variable only contains alphabetic characters.","input":"Variables: str, order_id, order_total","output":"IsAlpha(str)"}
{"instruction":"Check if the address variable is null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNullOrEmpty(address)"}
{"instruction":"Get the difference in days between two date variables.","input":"Variables: start_date, end_date, item_name","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Convert string to a DateTime type using a specific format.","input":"Variables: date_string, format_string, item_name","output":"ToDate(ParseDate(format_string, date_string))"}
{"instruction":"Check if a variable is a valid SQL date format.","input":"Variables: date, order_id, order_total","output":"IsValidSqlDate(date)"}
{"instruction":"Convert a string to an integer using hexadecimal format.","input":"Variables: hex_string, order_id, order_total","output":"HexToInteger(hex_string)"}
{"instruction":"Get the day of the week from a date variable as a string.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeekStr(order_date)"}
{"instruction":"Return the minimum value between two integer variables.","input":"Variables: num1, num2, item_name","output":"If(num1 < num2, num1, num2)"}
{"instruction":"Get the year from a date variable as an integer.","input":"Variables: order_date, order_id, order_total","output":"Year(order_date)"}
{"instruction":"Check if a variable is a real number.","input":"Variables: num, order_id, order_total","output":"IsRealNumber(num)"}
{"instruction":"Get the first 5 characters of name variable.","input":"Variables: name, address, city, state, zip","output":"Left(name, 5)"}
{"instruction":"Get the age in months between two date variables.","input":"Variables: birth_date, current_date, item_name","output":"DateDifferenceMonths(birth_date, current_date)"}
{"instruction":"Remove any extra whitespace in text variable.","input":"Variables: text, order_id, order_total","output":"TrimExtraMiddleSpace(text)"}
{"instruction":"Pad num variable with leading zeros to a specific length.","input":"Variables: num, length, item_name","output":"PadLeft(ToString(num), \"0\", length)"}
{"instruction":"Return text string variable in title case format.","input":"Variables: text, order_id, order_total","output":"Proper(text)"}
{"instruction":"Replace a specific character in text variable with another character.","input":"Variables: text, char_to_replace, replacement_char","output":"ReplaceAll(text, char_to_replace, replacement_char)"}
{"instruction":"Check if var1 variable is null.","input":"Variables: var1, var2, item_name","output":"IsNull(var1)"}
{"instruction":"Get the number of tokens in text variable variable separated by a specific delimiter.","input":"Variables: text, delimiter","output":"LSplit(text, 0, 0, delimiter, -1)"}
{"instruction":"Return the year, month and day of a date variable as an integer.","input":"Variables: order_date, order_id, order_total","output":"ToInteger(ToString(order_date, \"yyyyMMdd\"))"}
{"instruction":"Check if the variable is a numeric value.","input":"Variables: quantity, item_id, item_name","output":"IsNumeric(quantity)"}
{"instruction":"Add 3 days to the order date.","input":"Variables: order_date, order_id, order_total","output":"AddDays(ToDate(order_date), 3)"}
{"instruction":"Find the position of the \"at\" substring in the email address.","input":"Variables: email, phone, address, city, state, zip","output":"Find(\"at\", email)"}
{"instruction":"Remove all commas from the address variable.","input":"Variables: address, city, state, zip","output":"ReplaceAll(address, \",\", \"\")"}
{"instruction":"Check if the variable is not null or empty.","input":"Variables: description, price, quantity","output":"IsNotNull(description)"}
{"instruction":"Convert the variable to a string type.","input":"Variables: age, name, address, city, state, zip","output":"ToString(age)"}
{"instruction":"Find the last occurrence of the \"s\" character in the variable.","input":"Variables: item_name, item_description, item_category","output":"FindLast(\"s\", item_name)"}
{"instruction":"Check if the variable is a valid SQL date.","input":"Variables: date, order_id, order_total","output":"IsValidSqlDate(date)"}
{"instruction":"Remove the first 3 characters from the variable.","input":"Variables: code, name, description","output":"Substring(code, 3)"}
{"instruction":"Get the month of the order date.","input":"Variables: order_date, order_id, order_total","output":"Month(ToDate(order_date))"}
{"instruction":"Trim the whitespace from the variable.","input":"Variables: name, email, address, city, state, zip","output":"Trim(name)"}
{"instruction":"Convert the variable to a decimal type.","input":"Variables: price, quantity, total","output":"ToDecimal(price)"}
{"instruction":"Reverse the order of the characters in the variable.","input":"Variables: message, password, username","output":"Reverse(message)"}
{"instruction":"Check if the variable is a valid date with the format \"MM/dd/yyyy\".","input":"Variables: date, order_id, order_total","output":"IsDate(date, \"MM/dd/yyyy\")"}
{"instruction":"Replace all occurrences of \"Mr.\" with \"Ms.\" in the variable.","input":"Variables: salutation, name, address, city, state, zip","output":"ReplaceAll(salutation, \"Mr.\", \"Ms.\")"}
{"instruction":"Split the variable using \", \" as the delimiter and return the second element.","input":"Variables: address, city, state, zip","output":"GetToken(address, \", \", 1)"}
{"instruction":"Return the age in months between the start and end date.","input":"Variables: start_date, end_date, order_total","output":"DateDifferenceMonths(ToDate(start_date), ToDate(end_date))"}
{"instruction":"Check if the variable is a real number.","input":"Variables: price, discount, tax","output":"IsRealNumber(price)"}
{"instruction":"Check if the variable \"address\" is not null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNotNull(address) or IsNotEmpty(address)"}
{"instruction":"Get the month of the order date.","input":"Variables: order_date, order_id, order_total","output":"Month(order_date)"}
{"instruction":"Replace all occurrences of the word \"John\" in the variable \"name\" with \"Jane\".","input":"Variables: name, address, city, state, zip","output":"ReplaceAll(name, \"John\", \"Jane\")"}
{"instruction":"Remove the first 5 characters from the variable \"name\".","input":"Variables: name, address, city, state, zip","output":"Substring(name, 5)"}
{"instruction":"Check if the variable \"order_total\" is greater than 100.","input":"Variables: order_date, order_id, order_total","output":"IsRealNumber(order_total) && ToReal(order_total) > 100"}
{"instruction":"Get the last 4 characters from the variable \"zip\".","input":"Variables: name, address, city, state, zip","output":"Right(zip, 4)"}
{"instruction":"Convert the variable \"order_date\" to a string in the format \"MM/dd/yyyy\".","input":"Variables: order_date, order_id, order_total","output":"ToString(order_date, \"MM/dd/yyyy\")"}
{"instruction":"Check if the variable \"address\" contains the word \"Street\".","input":"Variables: name, address, city, state, zip","output":"Contains(address, \"Street\")"}
{"instruction":"Get the difference in years between the variable \"order_date\" and the current date.","input":"Variables: order_date, order_id, order_total","output":"DateDifferenceYears(order_date, Now())"}
{"instruction":"Get the number of tokens in the variable \"name\" separated by spaces.","input":"Variables: name, address, city, state, zip","output":"GetTokenCount(name, \" \")"}
{"instruction":"Check if the variable \"order_total\" is a numeric value.","input":"Variables: order_date, order_id, order_total","output":"IsNumeric(order_total)"}
{"instruction":"Get the day of the week of the variable \"order_date\".","input":"Variables: order_date, order_id, order_total","output":"DayOfWeekStr(order_date)"}
{"instruction":"Convert the variable \"order_total\" to a decimal type.","input":"Variables: order_date, order_id, order_total","output":"ToDecimal(order_total)"}
{"instruction":"Check if the variable \"zip\" is a valid US zip code.","input":"Variables: name, address, city, state, zip","output":"IsUSZipCode(zip)"}
{"instruction":"Add 3 days to the variable \"order_date\".","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 3)"}
{"instruction":"Get the substring of the variable \"name\" starting from the 3rd character and including the next 4 characters.","input":"Variables: name, address, city, state, zip","output":"Substring(name, 3, 4)"}
{"instruction":"Check if the variable \"order_date\" is after the variable \"ship_date\".","input":"Variables: order_date, order_id, order_total, ship_date","output":"order_date > ship_date"}
{"instruction":"Convert the variable \"order_total\" to a string with 2 decimal places.","input":"Variables: order_date, order_id, order_total","output":"ToString(order_total, \"f2\")"}
{"instruction":"Check if the address variable is not null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNotNull(address)"}
{"instruction":"Combine the city, state and zip variables with a comma separator.","input":"Variables: name, address, city, state, zip","output":"Concatenate(city, \", \", state, \" \", zip)"}
{"instruction":"Return the current month as an integer.","input":"","output":"Month(Today())"}
{"instruction":"Check if the order total is greater than 1000.","input":"Variables: order_date, order_id, order_total","output":"order_total > 1000"}
{"instruction":"Return the length of the name variable.","input":"Variables: name, address, city, state, zip","output":"Length(name)"}
{"instruction":"Convert the order date to a string format.","input":"Variables: order_date, order_id, order_total","output":"ToString(order_date, \"MM/dd/yyyy\")"}
{"instruction":"Check if the order date is a valid SQL date.","input":"Variables: order_date, order_id, order_total","output":"IsValidSqlDate(order_date)"}
{"instruction":"Return the date components of the order date.","input":"Variables: order_date, order_id, order_total","output":"GetDateComponents(order_date)"}
{"instruction":"Return the current time in UTC format.","input":"","output":"UtcNow()"}
{"instruction":"Return the difference in days between two dates.","input":"Variables: start_date, end_date, order_total","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Convert the order total to a decimal type.","input":"Variables: order_date, order_id, order_total","output":"ToDecimal(order_total)"}
{"instruction":"Check if the name variable contains the word \"John\".","input":"Variables: name, address, city, state, zip","output":"Contains(name, \"John\")"}
{"instruction":"Remove extra spaces from the name variable.","input":"Variables: name, address, city, state, zip","output":"TrimExtraMiddleSpace(name)"}
{"instruction":"Return the substring of the name variable starting from the 3rd character and up to 5 characters.","input":"Variables: name, address, city, state, zip","output":"SubString(name, 2, 5)"}
{"instruction":"Add 3 days to the order date.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 3)"}
{"instruction":"Return the age in years between two dates.","input":"Variables: birth_date, current_date, order_total","output":"Age(birth_date, current_date, 1)"}
{"instruction":"Convert the name variable to uppercase.","input":"Variables: name, address, city, state, zip","output":"ToUpper(name)"}
{"instruction":"Replace all instances of \"St.\" with \"Street\" in the address variable.","input":"Variables: name, address, city, state, zip","output":"ReplaceAll(address, \"St.\", \"Street\")"}
{"instruction":"Check if the input string is numeric.","input":"Check if the input string is numeric. Variable: input_string","output":"IsNumeric(input_string)"}
{"instruction":"Get the age of the person in years, given their birthdate.","input":"Get the age of the person in years, given their birthdate. Variable: birthdate","output":"Age(birthdate, Now(), 1)"}
{"instruction":"Convert the input string to title case.","input":"Convert the input string to proper case. Variable: input_string","output":"ToProper(input_string)"}
{"instruction":"Check if the input string is null or empty.","input":"Check if the input string is null or empty. Variable: input_string","output":"IsNullOrEmpty(input_string)"}
{"instruction":"Remove all HTML tags from the input string.","input":"Remove all HTML tags from the input string. Variable: html_string","output":"StripHtml(html_string)"}
{"instruction":"Get the day of the week of a given date.","input":"Get the day of the week of a given date. Variable: date","output":"DayOfWeekStr(date)"}
{"instruction":"Add a certain number of days to a given date.","input":"Add a certain number of days to a given date. Variables: date, days_to_add","output":"AddDays(date, days_to_add)"}
{"instruction":"Get the last 4 characters.","input":"Variable: string_to_check","output":"Right(string_to_check, 4)"}
{"instruction":"Check if string_to_check ends with a specified value.","input":"Variables: string_to_check, value","output":"EndsWith(string_to_check, value)"}
{"instruction":"Split a string into separate parts using a specified delimiter.","input":"Variables: string_to_split, delimiter","output":"SplitString(string_to_split, delimiter)"}
{"instruction":"Find the position of a specified value within a given string.","input":"Variables: string_to_search, value_to_find","output":"Find(string_to_search, value_to_find)"}
{"instruction":"Replace a specified value within a given string with another specified value.","input":"Variables: string_to_replace, value_to_replace, new_value","output":"ReplaceAll(string_to_replace, value_to_replace, new_value)"}
{"instruction":"Check if a given string is a valid US zip code.","input":"Variable: zip_code","output":"IsUSZipCode(zip_code)"}
{"instruction":"Convert a given date string to a DateTime type using a specified format.","input":"Variables: date_string, format","output":"ToDate(date_string, format)"}
{"instruction":"Calculate the age of a person in months, given their birthdate.","input":"Variable: name, phone, birthdate","output":"Age(birthdate, Now(), 2)"}
{"instruction":"Split a string into separate parts using multiple specified delimiters.","input":"Variables: string_to_split, delimiter_1, delimiter_2","output":"SplitString(string_to_split, delimiter_1, delimiter_2)"}
{"instruction":"Check if variable is greater than 10.","input":"Variable: ite_name, amount","output":"If(amount > 10, 1, 0)"}
{"instruction":"Remove the last 5 characters from item name","input":"Variables: po_num, item_name","output":"Left(item_name, Length(item_name) - 5)"}
{"instruction":"Check if the address variable is not null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNotNull(address)"}
{"instruction":"Get the last 4 characters of the order ID.","input":"Variables: order_id, order_total, shipping_address","output":"Right(order_id, 4)"}
{"instruction":"Replace all occurrences of \"Street\" with \"St.\" in the address variable.","input":"Variables: name, address, city, state, zip","output":"ReplaceAll(address, \"Street\", \"St.\")"}
{"instruction":"Return the length of the address variable.","input":"Variables: name, address, city, state, zip","output":"Length(address)"}
{"instruction":"Convert the order total variable to a decimal type.","input":"Variables: order_date, order_id, order_total","output":"ToDecimal(order_total)"}
{"instruction":"Check if the address variable starts with \"PO Box\".","input":"Variables: name, address, city, state, zip","output":"StartsWith(address, \"PO Box\")"}
{"instruction":"Get the year of the order date.","input":"Variables: order_date, order_id, order_total","output":"Year(order_date)"}
{"instruction":"Check if the zip code variable is a valid US zip code.","input":"Variables: name, address, city, state, zip","output":"IsUSZipCode(zip)"}
{"instruction":"Check if the order total variable is greater than or equal to 100.","input":"Variables: order_date, order_id, order_total","output":"order_total >= 100"}
{"instruction":"Convert the order date variable to a string in \"MM/dd/yyyy\" format.","input":"Variables: order_date, order_id, order_total","output":"ToString(order_date, \"MM/dd/yyyy\")"}
{"instruction":"Get the hour of the order date.","input":"Variables: order_date, order_id, order_total","output":"Hour(order_date)"}
{"instruction":"Return the city and state concatenated with a comma between them.","input":"Variables: name, address, city, state, zip","output":"Concatenate(city, \", \", state)"}
{"instruction":"Check if the name variable contains the word \"Dr.\".","input":"Variables: name, address, city, state, zip","output":"Contains(name, \"Dr.\")"}
{"instruction":"Convert the order date variable to a DateTimeOffset type with an offset of -7 hours.","input":"Variables: order_date, order_id, order_total","output":"ToDateTimeOffsetFromDateTime(order_date, \"-07:00\")"}
{"instruction":"Check if the order date variable is not null and is a valid SQL date.","input":"Variables: order_date, order_id, order_total","output":"IsNotNull(order_date) && IsValidSqlDate(order_date)"}
{"instruction":"Subtract 1 day from the order date.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, -1)"}
{"instruction":"Return the number of days between the order date and the current date.","input":"Variables: order_date, order_id, order_total","output":"DateDifferenceDays(order_date, Today())"}
{"instruction":"Convert the order date variable to a Julian date with a length of 7 digits.","input":"Variables: order_date, order_id, order_total","output":"ToJulianDate(order_date, 7)"}
{"instruction":"Check if the order has a discount and return \"yes\" if true, else return \"no\".","input":"Variables: order_discount, order_total, customer_name","output":"If(IsNotNull(order_discount), \"yes\", \"no\")"}
{"instruction":"Calculate the age of the customer in years.","input":"Variables: dob, customer_name, customer_email","output":"Age(dob, Today(), 3)"}
{"instruction":"Check if the address is in California.","input":"Variables: address, city, state, zip","output":"If(state = \"CA\", \"yes\", \"no\")"}
{"instruction":"Find the index of the first occurrence of the word \"blue\" in the text.","input":"Variables: text","output":"Find(\"blue\", text)"}
{"instruction":"Remove the first 5 characters from the string and return the result.","input":"Variables: text, name, address, city, state, zip","output":"Substring(text, 5)"}
{"instruction":"Replace all occurrences of \"red\" with \"blue\" in the color variable.","input":"Variables: item_code, amount, color","output":"ReplaceAll(text, \"red\", \"blue\")"}
{"instruction":"Return the length of the name.","input":"Variables: name, address, city, state, zip","output":"Length(name)"}
{"instruction":"Get the day of the week for the given date.","input":"Variables: date","output":"DayOfWeek(date)"}
{"instruction":"Convert the state to uppercase.","input":"Variables: name, address, city, state, zip","output":"ToUpper(state)"}
{"instruction":"Add 10 days to the given date.","input":"Variables: date","output":"AddDays(date, 10)"}
{"instruction":"Convert the name text to title case.","input":"Variables: name, address, city, state, zip","output":"Proper(name)"}
{"instruction":"Remove all HTML tags from the given string.","input":"Variables: data","output":"StripHtml(data)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: date1, date2","output":"DateDifferenceDays(date1, date2)"}
{"instruction":"Return the first 3 characters from city","input":"Variables: name, address, city, state, zip","output":"Left(city, 3)"}
{"instruction":"Convert address to lowercase.","input":"Variables: name, address, city, state, zip","output":"ToLower(address)"}
{"instruction":"Return the month for the given date.","input":"Variables: date","output":"Month(date)"}
{"instruction":"Find the last occurrence of the word \"blue\" in the text.","input":"Variables: text","output":"FindLast(\"blue\", text)"}
{"instruction":"Check if the address variable ends with the word \"world\".","input":"Variables: text, name, address, city, state, zip","output":"EndsWith(address, \"world\")"}
{"instruction":"Check if the birthdate variable is a valid date.","input":"Variables: birthdate, name, address, city, state, zip","output":"IsDate(birthdate)"}
{"instruction":"Replace all hyphens with spaces in the address variable.","input":"Variables: address, city, state, zip","output":"ReplaceAll(address, \"-\", \" \")"}
{"instruction":"Calculate the age in years between the birthdate and today's date.","input":"Variables: birthdate, name, address, city, state, zip","output":"DateDifferenceYears(birthdate, Today())"}
{"instruction":"Check if the order_total variable is greater than or equal to 100.","input":"Variables: order_total, order_date, order_id","output":"order_total >= 100"}
{"instruction":"Extract the digits from the phone number variable.","input":"Variables: phone, email, address, city, state, zip","output":"GetDigits(phone)"}
{"instruction":"Remove all spaces from the name variable.","input":"Variables: name, address, city, state, zip","output":"ReplaceAll(name, \" \", \"\")"}
{"instruction":"Add 5 days to the order_date variable.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 5)"}
{"instruction":"Check if the zip code variable is a valid US zip code.","input":"Variables: zip, name, address, city, state","output":"IsUSZipCode(zip)"}
{"instruction":"Get the hour component of the order_date variable.","input":"Variables: order_date, order_id, order_total","output":"Hour(order_date)"}
{"instruction":"Replace all instances of \"Street\" with \"St.\" in the address variable.","input":"Variables: address, city, state, zip","output":"ReplaceAll(address, \"Street\", \"St.\")"}
{"instruction":"Get the last 4 digits of the SSN variable.","input":"Variables: ssn, name, address, city, state, zip","output":"Substring(ssn, Length(ssn)-4)"}
{"instruction":"Convert the order_date variable to a string in \"MM/DD/YYYY\" format.","input":"Variables: order_date, order_id, order_total","output":"ToString(order_date, \"MM/dd/yyyy\")"}
{"instruction":"Check if the name variable contains the word \"Dr.\".","input":"Variables: name, address, city, state, zip","output":"Contains(name, \"Dr.\")"}
{"instruction":"Get the difference in hours between order_date and today's date.","input":"Variables: order_date, order_id, order_total","output":"DateDifferenceHours(order_date, Today())"}
{"instruction":"Remove the first 3 characters from the email variable.","input":"Variables: phone, email, address, city, state, zip","output":"Substring(email, 3)"}
{"instruction":"Check if the order_id variable is null or empty.","input":"Variables: order_id, order_total, order_date","output":"IsNullOrEmpty(order_id)"}
{"instruction":"Get the day of the week as a string from the order_date variable.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeekStr(order_date)"}
{"instruction":"Convert the order_total variable to a decimal type.","input":"Variables: order_total, order_date, order_id","output":"ToDecimal(order_total)"}
{"instruction":"Check if the order_total variable is numeric.","input":"Variables: order_total, order_id, order_date","output":"IsNumeric(order_total)"}
{"instruction":"Insert \"Apt \" before the apartment number in the address variable.","input":"Variables: address, city, state, zip","output":"Insert(address, \"Apt \", IndexOf(address, \"#\")+1)"}
{"instruction":"Get the day of the week for the specified date.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeekStr(order_date)"}
{"instruction":"Remove the last 4 characters from the zip code variable.","input":"Variables: address, city, state, zip","output":"Left(zip, Length(zip)-4)"}
{"instruction":"Format the date variable in the format \"MM-dd-yyyy\".","input":"Variables: order_date, order_id, order_total","output":"ToString(order_date, \"MM-dd-yyyy\")"}
{"instruction":"Convert the price variable to a decimal data type.","input":"Variables: price, order_id, order_total","output":"ToDecimal(price)"}
{"instruction":"Get the last 4 characters from the order_id variable.","input":"Variables: order_id, order_date, order_total","output":"Right(order_id, 4)"}
{"instruction":"Check if the address variable is null or empty.","input":"Variables: address, city, state, zip","output":"IsNullOrEmpty(address)"}
{"instruction":"Get the first 3 characters of the state variable and convert them to uppercase.","input":"Variables: address, city, state, zip","output":"ToUpper(Left(state, 3))"}
{"instruction":"Remove any whitespace from the beginning and end of the city variable.","input":"Variables: address, city, state, zip","output":"Trim(city)"}
{"instruction":"Add 7 days to the order_date variable.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 7)"}
{"instruction":"Check if the email variable is null or whitespace.","input":"Variables: phone, email, address, city, state, zip","output":"IsNullOrWhitespace(email)"}
{"instruction":"Remove the first occurrence of the word \"Street\" from the address variable.","input":"Variables: address, city, state, zip","output":"ReplaceFirst(address, \"Street\", \"\", true)"}
{"instruction":"Get the number of characters in the address variable.","input":"Variables: address, city, state, zip","output":"Length(address)"}
{"instruction":"Check if the order_date variable is a valid SQL date.","input":"Variables: order_date, order_id, order_total","output":"IsValidSqlDate(order_date)"}
{"instruction":"Trim any leading or trailing zeros from the order_total variable.","input":"Variables: order_date, order_id, order_total","output":"ToDecimal(order_total)"}
{"instruction":"Get the integer value of the hexadecimal variable.","input":"Variables: hex_val, order_id, order_date, order_total","output":"HexToInteger(hex_val)"}
{"instruction":"Get the number of times the word \"home\" appears in the address variable.","input":"Variables: address, city, state, zip","output":"GetFindCount(address, \"home\")"}
{"instruction":"Check if name is null or empty.","input":"Constants: str = \"\" Variables: name, address, city, state, zip","output":"IsNullOrEmpty(name)"}
{"instruction":"Return the date part from the given datetime variable.","input":"Variables: datetime, order_id, order_total","output":"DatePart(datetime)"}
{"instruction":"Return the difference in days between two dates.","input":"Variables: start_date, end_date, order_id, order_total","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Convert the given string to a proper case.","input":"Constants: str = \"HeLlO wORLd\" Variables: name, address, city, state, zip","output":"Proper(str)"}
{"instruction":"Check if the given value is a real number.","input":"Variables: value, order_id, order_total","output":"IsRealNumber(value)"}
{"instruction":"Get the last word in the given sentence.","input":"Constants: sentence = \"This is a sample sentence\" Variables: name, address, city, state, zip","output":"RightOf(sentence, \" \")"}
{"instruction":"Remove the first 5 characters from the constant string.","input":"Constants: str = \"12345ABCDE\" Variables: name, address, city, state, zip","output":"Substring(str, 5)"}
{"instruction":"Replace all occurrences of \"cat\" with \"dog\" in the constant string","input":"Constants: test_str = \"The cat in the hat\" Variables: name, address, city, state, zip","output":"ReplaceAll(test_str, \"cat\", \"dog\")"}
{"instruction":"Get the day of the week for the given date.","input":"Variables: date, order_id, order_total","output":"DayOfWeek(date)"}
{"instruction":"Check if the given string is a valid name.","input":"Variables: name, address, city, state, zip","output":"IsValidName(name)"}
{"instruction":"Return the age in years between two dates.","input":"Variables: birthdate, current_date, order_id, order_total","output":"Age(birthdate, current_date, 1)"}
{"instruction":"Convert the given string to an integer timestamp.","input":"Constants: str = \"2022-01-01 00:00:00\" Variables: name, address, city, state, zip","output":"ToInteger(UnixTimeStampToDateTime(ToUnixEpoc(ToDate(str, \"yyyy-MM-dd HH:mm:ss\"))))"}
{"instruction":"Return the difference in hours between two dates.","input":"Variables: start_date, end_date, order_id, order_total","output":"DateDifferenceHours(start_date, end_date)"}
{"instruction":"Check if the given string constant contains any numeric characters.","input":"Constants: str = \"abc123\" Variables: name, address, city, state, zip","output":"IsNumeric(str)"}
{"instruction":"Get the month from the given date.","input":"Variables: date, order_id, order_total","output":"Month(date)"}
{"instruction":"Return the given string in all uppercase letters.","input":"Constants: str = \"hello world\" Variables: name, address, city, state, zip","output":"ToUpper(str)"}
{"instruction":"Add 3 days to the given date.","input":"Variables: date, order_id, order_total","output":"AddDays(date, 3)"}
{"instruction":"Get the difference in years between two dates.","input":"Variables: start_date, end_date, order_id, order_total","output":"DateDifferenceYears(start_date, end_date)"}
{"instruction":"Check if the age is greater than or equal to 18.","input":"Variables: age, first_name, last_name","output":"If(IsInteger(age) and ToInteger(age) >= 18, \"The person is an adult\", \"The person is a minor\")"}
{"instruction":"Check if the email address is valid.","input":"Variables: email, first_name, last_name","output":"IsMatchRegEx(@\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\", email)"}
{"instruction":"Convert the input string to title case.","input":"Variables: input_string","output":"ToProper(input_string)"}
{"instruction":"Get the difference between two dates in years.","input":"Variables: start_date, end_date","output":"DateDifferenceYears(start_date, end_date)"}
{"instruction":"Get the current date in yyyy-MM-dd format.","input":"","output":"ToString(Today(), \"yyyy-MM-dd\")"}
{"instruction":"Check if the input string is null or empty.","input":"Variables: input_string","output":"IsNullOrEmpty(input_string)"}
{"instruction":"Check if the input string is a real number.","input":"Variables: input_string","output":"IsRealNumber(input_string)"}
{"instruction":"Get the day of the week for the input date.","input":"Variables: date","output":"DayOfWeekStr(date)"}
{"instruction":"Get the current time in HH:mm:ss format.","input":"","output":"TimeToIntegerHHMMSS(Now())"}
{"instruction":"Replace all occurrences of a specific character in the input string.","input":"Variables: input_string, char_to_replace, replace_with","output":"ReplaceAll(input_string, char_to_replace, replace_with)"}
{"instruction":"Get the first 3 characters of the input string.","input":"Variables: input_string","output":"Left(input_string, 3)"}
{"instruction":"Get the age in months.","input":"Variables: birth_date, current_date","output":"DateDifferenceMonths(birth_date, current_date)"}
{"instruction":"Check if the input string contains the word \"apple\".","input":"Variables: input_string","output":"Contains(input_string, \"apple\")"}
{"instruction":"Convert the input string to uppercase.","input":"Variables: input_string","output":"ToUpper(input_string)"}
{"instruction":"Add 5 days to the input date.","input":"Variables: input_date","output":"AddDays(input_date, 5)"}
{"instruction":"Get the last 4 characters of the input string.","input":"Variables: input_string","output":"Right(input_string, 4)"}
{"instruction":"Check if the input string is a valid SQL date.","input":"Variables: input_string","output":"IsValidSqlDate(input_string)"}
{"instruction":"Get the month of the input date.","input":"Variables: input_date","output":"Month(input_date)"}
{"instruction":"Check if the customer_address variable is not null or empty.","input":"Variables: customer_address, customer_name, order_total","output":"IsNotNull(customer_address)"}
{"instruction":"Check if the order_total is greater than or equal to 100.","input":"Variables: order_total, customer_name, customer_address","output":"If(order_total >= 100, \"Order is eligible for free shipping\", \"Order does not qualify for free shipping\")"}
{"instruction":"Concatenate the address, city, state, and zip variables with a comma separator.","input":"Variables: address, city, state, zip, customer_name, order_total","output":"Concatenate(address, \", \", city, \", \", state, \", \", zip)"}
{"instruction":"Convert the string variable to an int64 type.","input":"Variables: string_val, customer_name, customer_address","output":"ToInteger(string_val)"}
{"instruction":"Check if the date variable is a valid SQL date.","input":"Variables: date_val, customer_name, customer_address","output":"IsValidSqlDate(date_val)"}
{"instruction":"Convert the decimal variable to a string type with format \"0.00\".","input":"Variables: decimal_val, customer_name, customer_address","output":"ToString(decimal_val, \"0.00\")"}
{"instruction":"Get the month from the date variable.","input":"Variables: date_val, customer_name, customer_address","output":"Month(date_val)"}
{"instruction":"Check if the string variable starts with \"http\".","input":"Variables: string_val, customer_name, customer_address","output":"StartsWith(string_val, \"http\")"}
{"instruction":"Replace all occurrences of \"old_string\" with \"new_string\" in the input string variable.","input":"Variables: input_string, old_string, new_string","output":"ReplaceAll(input_string, old_string, new_string)"}
{"instruction":"Get the first token delimited by the comma separator in the input string variable.","input":"Variables: input_string, customer_name, customer_address","output":"GetToken(input_string, \",\", 0)"}
{"instruction":"Get the last character of the input string variable.","input":"Variables: input_string, customer_name, customer_address","output":"Right(input_string, 1)"}
{"instruction":"Split the input string variable by the comma separator and return the second token.","input":"Variables: input_string, customer_name, customer_address","output":"GetToken(SplitString(input_string, \",\"), 1)"}
{"instruction":"Convert the input string variable to proper case.","input":"Variables: input_string, customer_name, customer_address","output":"Proper(input_string)"}
{"instruction":"Check if the input string variable contains the substring \"hello\".","input":"Variables: input_string, customer_name, customer_address","output":"Contains(input_string, \"hello\")"}
{"instruction":"Trim any leading or trailing whitespace from the input string variable.","input":"Variables: input_string, customer_name, customer_address","output":"Trim(input_string)"}
{"instruction":"Get the day of the week of the input date variable as a string.","input":"Variables: date_val, customer_name, customer_address","output":"DayOfWeekStr(date_val)"}
{"instruction":"Get the age of the customer in years based on the input birthdate variable.","input":"Variables: birthdate, customer_name, customer_address","output":"Age(birthdate, Today(), 3)"}
{"instruction":"Convert the input string variable to all uppercase letters.","input":"Variables: input_string, customer_name, customer_address","output":"ToUpper(input_string)"}
{"instruction":"Check if the name variable is null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNullOrEmpty(name)"}
{"instruction":"Return the current year.","input":"","output":"Year(Now())"}
{"instruction":"Replace all instances of \"the\" with \"a\" in the input string.","input":"\"The quick brown fox jumped over the lazy dog.\"","output":"ReplaceAll(\"the\", \"a\", \"The quick brown fox jumped over the lazy dog.\")"}
{"instruction":"Return the day of the month from the input date.","input":"Variables: order_date, order_id, order_total","output":"Day(order_date)"}
{"instruction":"Check if the input value is a valid SQL date.","input":"Variables: date_value","output":"IsValidSqlDate(date_value)"}
{"instruction":"Return the last 4 digits of the input phone number.","input":"Variables: phone_number","output":"Right(phone_number, 4)"}
{"instruction":"Return the integer representation of the input decimal value.","input":"Variables: decimal_value","output":"ToInteger(decimal_value)"}
{"instruction":"Convert the input string value to upper case.","input":"Variables: string_value","output":"ToUpper(string_value)"}
{"instruction":"Return a substring of the input string starting from the 5th character to the end.","input":"Variables: string_value","output":"SubString(string_value, 4)"}
{"instruction":"Add 3 days to the input date.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 3)"}
{"instruction":"Convert the input string to proper case.","input":"Variables: string_value","output":"Proper(string_value)"}
{"instruction":"Check if the input value is a valid integer.","input":"Variables: value","output":"IsInteger(value)"}
{"instruction":"Return the age in years between two input dates.","input":"Variables: birthdate, today_date","output":"Age(birthdate, today_date, 1)"}
{"instruction":"Return the last word of the input string.","input":"Variables: string_value","output":"RightOf(string_value, \" \")"}
{"instruction":"Check if the input string contains the word \"apple\".","input":"Variables: string_value","output":"Contains(string_value, \"apple\")"}
{"instruction":"Return the month of the year from the input date.","input":"Variables: order_date, order_id, order_total","output":"Month(order_date)"}
{"instruction":"Return the input string with all HTML tags removed.","input":"Variables: html_string","output":"StripHtml(html_string)"}
{"instruction":"Return the number of words in the input string.","input":"Variables: string_value","output":"Length(SplitString(string_value, \" \"))"}
{"instruction":"Check if the address variable is not null or empty.","input":"Variables: address, city, state, zip","output":"IsNotNull(address)"}
{"instruction":"Convert the string variable to a decimal.","input":"Variables: amount, order_id, order_total","output":"ToDecimal(amount)"}
{"instruction":"Check if the date variable is a valid SQL date.","input":"Variables: hire_date, employee_id, salary","output":"IsValidSqlDate(hire_date)"}
{"instruction":"Concatenate the city, state and zip variables with a comma separator.","input":"Variables: address, city, state, zip","output":"Concatenate(city, \", \", state, \", \", zip)"}
{"instruction":"Check if the email variable is null or whitespace.","input":"Variables: email, address, city, state, zip","output":"IsNullOrWhitespace(email)"}
{"instruction":"Convert the string variable to an integer and add 5 to it.","input":"Variables: qty, order_id, order_total","output":"ToInteger(qty) + 5"}
{"instruction":"Convert the string variable to a date format using the \"yyyy/MM/dd\" format.","input":"Variables: date_str, order_id, order_total","output":"ToDate(date_str, \"yyyy/MM/dd\")"}
{"instruction":"Replace all occurrences of \"red\" with \"blue\" in the color variable.","input":"Variables: color, size, weight","output":"ReplaceAll(color, \"red\", \"blue\")"}
{"instruction":"Check if the name variable contains the word \"John\" ignoring the case.","input":"Variables: name, age, gender","output":"Contains(name, \"John\", false)"}
{"instruction":"Find the index of the first occurrence of \"world\" in the text variable.","input":"Variables: text, author, rating","output":"Find(\"world\", text)"}
{"instruction":"Remove the first two characters from the string variable.","input":"Variables: str, id, total","output":"Substring(str, 2)"}
{"instruction":"Convert the date and time variables to a string format using the \"MM/dd/yyyy HH:mm:ss\" format.","input":"Variables: date, time, order_total","output":"ToString(date, \"MM/dd/yyyy\") + \" \" + ToString(time, \"HH:mm:ss\")"}
{"instruction":"Add 7 days to the date variable.","input":"Variables: date, order_id, order_total","output":"AddDays(date, 7)"}
{"instruction":"Find the difference in years between two date variables.","input":"Variables: hire_date, birth_date, salary","output":"DateDifferenceYears(birth_date, hire_date)"}
{"instruction":"Check if the phone variable matches the US phone number pattern.","input":"Variables: phone, email, address, city, state, zip","output":"IsUSPhone(phone)"}
{"instruction":"Get the month value from the date variable.","input":"Variables: date, order_id, order_total","output":"Month(date)"}
{"instruction":"Convert the integer variable to a string and pad it with leading zeros to 5 characters.","input":"Variables: num, order_id, order_total","output":"ToString(num, \"00000\")"}
{"instruction":"Check if the string variable matches the pattern \"^[A-Za-z0-9]+$\".","input":"Variables: str, id, total","output":"IsMatchRegEx(\"^[A-Za-z0-9]+$\", str)"}
{"instruction":"Check if the date variable is a valid SQL date.","input":"Variables: order_date, order_id, order_total","output":"IsValidSqlDate(order_date)"}
{"instruction":"Get the year from the date variable.","input":"Variables: order_date, order_id, order_total","output":"Year(order_date)"}
{"instruction":"Convert a string representation of a date to a DateTime type.","input":"Variables: string_date, order_id, order_total","output":"ToDate(string_date)"}
{"instruction":"Check if the email variable is not null or empty.","input":"Variables: email, order_id, order_total","output":"IsNotNull(email) or IsNotEmpty(email)"}
{"instruction":"Concatenate address, city, state, and zip with a comma separator.","input":"Variables: address, city, state, zip","output":"Concatenate(address, \", \", city, \", \", state, \", \", zip)"}
{"instruction":"Check if the order_total variable is a real number.","input":"Variables: order_total, order_id","output":"IsRealNumber(order_total)"}
{"instruction":"Replace all occurrences of \"abc\" with \"def\" in the string variable.","input":"Variables: string_var, order_id, order_total","output":"ReplaceAll(string_var, \"abc\", \"def\")"}
{"instruction":"Remove the first 5 characters from the string variable.","input":"Variables: string_var, order_id, order_total","output":"RemoveChars(string_var, 0, 5)"}
{"instruction":"Get the day of the week from the date variable and return it as a string.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeekStr(order_date)"}
{"instruction":"Check if the order_total variable is greater than or equal to 100.","input":"Variables: order_total, order_id","output":"If(order_total >= 100, \"True\", \"False\")"}
{"instruction":"Get the month from the date variable and add 5.","input":"Variables: order_date, order_id, order_total","output":"AddMonths(order_date, 5)"}
{"instruction":"Concatenate first name and last name with a space separator and then right-align the result to 20 characters.","input":"Variables: fname, lname, order_id, order_total","output":"RightAlign(Concatenate(fname, \" \", lname), 20)"}
{"instruction":"Remove the last 3 characters from the string variable.","input":"Variables: string_var, order_id, order_total","output":"RemoveChars(string_var, Length(string_var) - 3, 3)"}
{"instruction":"Get the day of the week from the date variable and return it as an integer.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeek(order_date)"}
{"instruction":"Check if the order_total variable is less than or equal to 50.","input":"Variables: order_total, order_id","output":"If(order_total <= 50, \"True\", \"False\")"}
{"instruction":"Get the minute from the current date and time.","input":"","output":"Minute(Now())"}
{"instruction":"Check if the order_total variable is an integer.","input":"Variables: order_total, order_id","output":"IsInteger(order_total)"}
{"instruction":"Check if the order_date variable is a valid date in the format \"MM/dd/yyyy\".","input":"Variables: order_date, order_id, order_total","output":"IsDate(order_date, \"MM/dd/yyyy\")"}
{"instruction":"Return true if the zip code variable is not null or empty.","input":"Variables: zip, address, city, state","output":"IsNotNull(zip) || IsNullOrEmpty(zip)"}
{"instruction":"Convert the string variable to a datetime type using the provided format.","input":"Variables: dob, address, city, state, zip. Format: \"MM/dd/yyyy\"","output":"ToDate(dob, \"MM/dd/yyyy\")"}
{"instruction":"Remove all white spaces from the string variable.","input":"Variables: str, address, city, state, zip","output":"ReplaceAll(str, \" \", \"\")"}
{"instruction":"Return true if the variable is a real number.","input":"Variables: num, address, city, state, zip","output":"IsRealNumber(num)"}
{"instruction":"Split the string variable using \", \" as the delimiter and return the second token.","input":"Variables: address, city, state, zip","output":"GetToken(address, \", \", 1)"}
{"instruction":"Replace all occurrences of \"e\" with \"i\" in the string variable.","input":"Variables: str, address, city, state, zip","output":"ReplaceAll(str, \"e\", \"i\")"}
{"instruction":"Add 5 days to the date variable.","input":"Variables: date, order_id, order_total","output":"AddDays(date, 5)"}
{"instruction":"Return true if the variable is a valid SQL date.","input":"Variables: date, order_id, order_total","output":"IsValidSqlDate(date)"}
{"instruction":"Return the last 4 characters of the string variable.","input":"Variables: str, address, city, state, zip","output":"Right(str, 4)"}
{"instruction":"Return the first Sunday on or after the date variable.","input":"Variables: date, order_id, order_total","output":"AddDays(ToDate(Year(date) + \"-\" + Month(date) + \"-01\"), 6 - DayOfWeek(ToDate(Year(date) + \"-\" + Month(date) + \"-01\")))"}
{"instruction":"Calculate the age of a person given their birthdate and the current date in years.","input":"Variables: dob, current_date, address, city, state, zip","output":"Age(dob, current_date, 1)"}
{"instruction":"Convert the time string to seconds.","input":"Variables: time_str, address, city, state, zip. Time format: \"hh:mm:ss\"","output":"CharToSeconds(time_str)"}
{"instruction":"Return true if the variable is a positive integer.","input":"Variables: num, address, city, state, zip","output":"IsInteger(num) && num > 0"}
{"instruction":"Replace all special characters in the string variable with spaces.","input":"Variables: str, address, city, state, zip","output":"ReplaceAllSpecialCharactersWithSpace(str)"}
{"instruction":"Return the difference between two dates in days.","input":"Variables: date1, date2, address, city, state, zip","output":"DateDifferenceDays(date1, date2)"}
{"instruction":"Return the first letter capitalized in the string variable.","input":"Variables: str, address, city, state, zip","output":"Proper(Left(str, 1))"}
{"instruction":"Return true if the string variable matches the provided regular expression pattern.","input":"Variables: str, address, city, state, zip. Pattern: \"^[A-Za-z0-9]+$\"","output":"IsMatchRegEx(\"^[A-Za-z0-9]+$\", str)"}
{"instruction":"Return the number of characters in the string variable.","input":"Variables: str, address, city, state, zip","output":"Length(str)"}
{"instruction":"Determine if the address string is null or empty.","input":"Variables: address, city, state, zip","output":"IsNullOrEmpty(address)"}
{"instruction":"Convert a string date in format \"mm/dd/yyyy\" to a DateTime type.","input":"Variables: date_str, order_id, order_total","output":"ToDate(ParseDate(\"MM/dd/yyyy\", date_str))"}
{"instruction":"Remove any extra spaces in the string.","input":"Variables: address, city, state, zip","output":"TrimExtraMiddleSpace(address)"}
{"instruction":"Get the length of the last name.","input":"Variables: fname, lname, address, city, state, zip","output":"Length(lname)"}
{"instruction":"Determine if a string contains a specific character.","input":"Variables: input_str, character","output":"Contains(input_str, character)"}
{"instruction":"Extract the state abbreviation from a full state name.","input":"Variables: state_name","output":"Extract(state_name, -2)"}
{"instruction":"Determine if a string is a valid US phone number.","input":"Variables: phone_num","output":"IsUSPhone(phone_num)"}
{"instruction":"Determine if a string is a valid US zip code.","input":"Variables: zip_code","output":"IsUSZipCode(zip_code)"}
{"instruction":"Get the current date and time.","input":"","output":"Now()"}
{"instruction":"Add 30 days to the order date.","input":"Variables: order_date","output":"AddDays(order_date, 30)"}
{"instruction":"Replace a specific word in a string with another word.","input":"Variables: input_str, word_to_replace, replacement_word","output":"ReplaceAll(input_str, word_to_replace, replacement_word)"}
{"instruction":"Determine if a string matches a specific regular expression pattern.","input":"Variables: input_str, pattern","output":"IsMatchRegEx(pattern, input_str)"}
{"instruction":"Remove the first letter of a string.","input":"Variables: input_str","output":"Substring(input_str, 1)"}
{"instruction":"Convert a string to title case.","input":"Variables: input_str","output":"Proper(input_str)"}
{"instruction":"Get the day of the week for a specific date.","input":"Variables: date","output":"DayOfWeekStr(date)"}
{"instruction":"Add 1 hour to the current time.","input":"","output":"AddHours(Now(), 1)"}
{"instruction":"Get the difference in days between two specific dates.","input":"Variables: start_date, end_date","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Convert a string to an integer if possible, otherwise return 0.","input":"Variables: input_str","output":"If(IsInteger(input_str), ToInteger(input_str), 0)"}
{"instruction":"Check if the email variable is null or empty.","input":"Variables: email, address, city, state, zip","output":"IsNullOrEmpty(email)"}
{"instruction":"Get the year from the date variable.","input":"Variables: dob, name, address, city, state, zip","output":"Year(dob)"}
{"instruction":"Check if the age variable is greater than or equal to 18.","input":"Variables: dob, age, name, address, city, state, zip","output":"If(age >= 18, \"Adult\", \"Minor\")"}
{"instruction":"Convert the zip variable to an integer type.","input":"Variables: dob, zip, name, address, city, state","output":"ToInteger(zip)"}
{"instruction":"Get the month from the date variable.","input":"Variables: dob, name, address, city, state, zip","output":"Month(dob)"}
{"instruction":"Check if the state variable is not null or empty.","input":"Variables: state, dob, name, address, city, zip","output":"IsNotNull(state)"}
{"instruction":"Convert the time variable to a string type.","input":"Variables: time, date, name, address, city, state, zip","output":"ToString(time)"}
{"instruction":"Check if the name variable is a valid name.","input":"Variables: name, date, address, city, state, zip","output":"IsValidName(name)"}
{"instruction":"Add 3 days to the date variable.","input":"Variables: date, name, address, city, state, zip","output":"AddDays(date, 3)"}
{"instruction":"Remove the whitespaces from the address variable.","input":"Variables: address, name, date, city, state, zip","output":"Trim(address)"}
{"instruction":"Replace all occurrences of \"Mr.\" with \"Mrs.\" in the name variable.","input":"Variables: name, date, address, city, state, zip","output":"ReplaceAll(name, \"Mr.\", \"Mrs.\")"}
{"instruction":"Check if the zip variable is a valid US zip code.","input":"Variables: zip, name, address, city, state, date","output":"IsUSZipCode(zip)"}
{"instruction":"Get the day from the date variable.","input":"Variables: date, name, address, city, state, zip","output":"Day(date)"}
{"instruction":"Check if the phone variable is a valid US phone number.","input":"Variables: phone, name, address, city, state, zip","output":"IsUSPhone(phone)"}
{"instruction":"Get the last 3 digits of the zip variable.","input":"Variables: zip, name, address, city, state, date","output":"Right(zip, 3)"}
{"instruction":"Convert the time variable to a TimeSpan type.","input":"Variables: time, date, name, address, city, state, zip","output":"DateTimeToTimeSpan(time)"}
{"instruction":"Remove the spaces and special characters from the phone number variable.","input":"Variables: phone, name, address, city, state, zip","output":"ReplaceRegEx(\"[^0-9]\", phone, \"\")"}
{"instruction":"Check if the address variable contains \"Apt.\" or \"Suite\".","input":"Variables: address, name, city, state, zip, date","output":"ContainsAnyChar(address, \"Apt. Suite\")"}
{"instruction":"Use IsNull function to check if the address variable is null.","input":"Variables: fname, lname, address, city, state, zip","output":"IsNull(address)"}
{"instruction":"Use IsNumeric function to check if the order total is a number.","input":"Variables: order_id, order_total, order_date","output":"IsNumeric(order_total)"}
{"instruction":"Use ToUpper function to convert the city variable to uppercase.","input":"Variables: fname, lname, address, city, state, zip","output":"ToUpper(city)"}
{"instruction":"Use Trim function to remove extra spaces from the address variable.","input":"Variables: fname, lname, address, city, state, zip","output":"Trim(address)"}
{"instruction":"Use GetDateComponents function to extract the day of the week from the order date.","input":"Variables: order_id, order_total, order_date","output":"DayOfWeek(order_date)"}
{"instruction":"Use Left function to extract the first 5 characters of the order ID.","input":"Variables: order_id, order_total, order_date","output":"Left(order_id, 5)"}
{"instruction":"Use ToDecimal function to convert the order total to a decimal type.","input":"Variables: order_id, order_total, order_date","output":"ToDecimal(order_total)"}
{"instruction":"Use AddDays function to add 5 days to the order date.","input":"Variables: order_id, order_total, order_date","output":"AddDays(order_date, 5)"}
{"instruction":"Use ToProper function to convert the fname variable to proper case.","input":"Variables: fname, lname, address, city, state, zip","output":"ToProper(fname)"}
{"instruction":"Use ReplaceAll function to replace all occurrences of \"Street\" in the address variable with \"St.\"","input":"Variables: fname, lname, address, city, state, zip","output":"ReplaceAll(address, \"Street\", \"St.\")"}
{"instruction":"Use DateDifferenceDays function to calculate the number of days between two date variables.","input":"Variables: start_date, end_date, order_id","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Use SplitString function to split the address variable by commas.","input":"Variables: fname, lname, address, city, state, zip","output":"SplitString(address, \",\")"}
{"instruction":"Use AddHours function to add 2 hours to the order date.","input":"Variables: order_id, order_total, order_date","output":"AddHours(order_date, 2)"}
{"instruction":"Use DayOfWeekStr function to return the day of the week as a string from the order date.","input":"Variables: order_id, order_total, order_date","output":"DayOfWeekStr(order_date)"}
{"instruction":"Use IsUSZipCode function to check if the zip code variable is a valid US zip code.","input":"Variables: fname, lname, address, city, state, zip","output":"IsUSZipCode(zip)"}
{"instruction":"Use IsValidName function to check if the fname variable is a valid name.","input":"Variables: fname, lname, address, city, state, zip","output":"IsValidName(fname)"}
{"instruction":"Use TextLine function to return the second line of the address variable.","input":"Variables: fname, lname, address, city, state, zip","output":"TextLine(address, 1)"}
{"instruction":"Use ReplaceRegEx function to replace all occurrences of \"A\" or \"a\" in the fname variable with \"B\".","input":"Variables: fname, lname, address, city, state, zip","output":"ReplaceRegEx(\"[Aa]\", fname, \"B\")"}
{"instruction":"Return true if the input string address is not null or empty.","input":"Variables: address, city, state, zip","output":"IsNotNull(address)"}
{"instruction":"Trim leading and trailing whitespace from the address.","input":"Variables: text, address, city, state, zip","output":"Trim(address)"}
{"instruction":"Replace all occurrences of the substring \"John\" with \"Jane\".","input":"Variables: name, address, city, state, zip","output":"ReplaceAll(name, \"John\", \"Jane\")"}
{"instruction":"Convert the city string to title case.","input":"Variables: text, address, city, state, zip","output":"ToProper(city)"}
{"instruction":"Add 7 days to the date variable.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 7)"}
{"instruction":"Return true if the input string contains the substring \"Astera\".","input":"Variables: text, address, city, state, zip","output":"Contains(text, \"Astera\")"}
{"instruction":"Extract the first 5 characters from the input string.","input":"Variables: text, order_id, order_total","output":"Substring(text, 0, 5)"}
{"instruction":"Get the day of the week for the input date variable.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeek(order_date)"}
{"instruction":"Return true if the input value is numeric.","input":"Variables: value, order_id, order_total","output":"IsNumeric(value)"}
{"instruction":"Convert the input string to all uppercase.","input":"Variables: text, address, city, state, zip","output":"ToUpper(text)"}
{"instruction":"Return true if the input string starts with the substring \"https://\".","input":"Variables: url, address, city, state, zip","output":"StartsWith(url, \"https://\")"}
{"instruction":"Return the last 4 characters of the input string.","input":"Variables: text, order_id, order_total","output":"Right(text, 4)"}
{"instruction":"Replace all occurrences of the substring \"cat\" with \"dog\", ignoring case sensitivity.","input":"Variables: text, order_id, order_total","output":"ReplaceAll(text, \"cat\", \"dog\", false)"}
{"instruction":"Get the month of the input date variable.","input":"Variables: order_date, order_id, order_total","output":"Month(order_date)"}
{"instruction":"Return true if the input value is not null.","input":"Variables: value, order_id, order_total","output":"IsNotNull(value)"}
{"instruction":"Convert the input string to all lowercase.","input":"Variables: text, order_id, order_total","output":"ToLower(text)"}
{"instruction":"Return the number of days between two date variables.","input":"Variables: start_date, end_date, order_total","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Return true if the input string is a valid US zip code.","input":"Variables: zip, address, city, state","output":"IsUSZipCode(zip)"}
{"instruction":"Check if the given string contains a specific substring.","input":"Check if the address contains the substring \"Street\".","output":"Contains(address, \"Street\")"}
{"instruction":"Replace all occurrences of \"Mr.\" with \"Ms.\" in the given string.","input":"Replace all occurrences of \"Mr.\" with \"Ms.\" in the string variable.","output":"ReplaceAll(string, \"Mr.\", \"Ms.\")"}
{"instruction":"Check if the given variable is null or empty.","input":"Check if the variable \"address\" is null or empty.","output":"IsNullOrEmpty(address)"}
{"instruction":"Remove all whitespace from the given string.","input":"Remove all whitespace from the string variable.","output":"ReplaceAll(string, \" \", \"\")"}
{"instruction":"Get the current date and time in the format \"yyyy-MM-dd HH:mm:ss\".","input":"","output":"ToString(Now(), \"yyyy-MM-dd HH:mm:ss\")"}
{"instruction":"Convert the given string to uppercase.","input":"Convert the string variable to uppercase.","output":"ToUpper(string)"}
{"instruction":"Add the given number of days to the date variable.","input":"Add 7 days to the variable \"order_date\".","output":"AddDays(order_date, 7)"}
{"instruction":"Get the current hour.","input":"","output":"Hour(Now())"}
{"instruction":"Check if the given string is a valid integer.","input":"Check if the variable \"age\" is a valid integer.","output":"IsInteger(age)"}
{"instruction":"Remove the first 3 characters from the given string.","input":"Remove the first 3 characters from the string variable.","output":"Substring(string, 3)"}
{"instruction":"Get the number of days between two dates.","input":"Get the number of days between the variables \"start_date\" and \"end_date\".","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Check if the given variable is not null.","input":"Check if the variable \"address\" is not null.","output":"IsNotNull(address)"}
{"instruction":"Convert the given string to proper case.","input":"Convert the string variable to proper case.","output":"Proper(string)"}
{"instruction":"Extract a substring between two specific characters.","input":"Extract the substring between \"(\" and \")\" from the string variable.","output":"Extract(string, \"(\", \")\")"}
{"instruction":"Check if the given string ends with a specific value.","input":"Check if the string variable ends with the value \"com\".","output":"EndsWith(string, \"com\")"}
{"instruction":"Pad the given string with zeros on the left side to make it 10 characters long.","input":"Pad the string variable with zeros on the left side to make it 10 characters long.","output":"PadLeft(string, \"0\", 10)"}
{"instruction":"Convert the given string to title case with spaces.","input":"Convert the string variable to title case with spaces.","output":"PascalCaseWithSpace(string)"}
{"instruction":"Get the day of the week for the given date.","input":"Get the day of the week for the variable \"order_date\".","output":"DayOfWeekStr(order_date)"}
{"instruction":"Return the current date in the format YYYY-MM-DD.","input":"","output":"ToString(Now(), \"yyyy-MM-dd\")"}
{"instruction":"Check if the address variable is null or empty.","input":"Variables: address, city, state, zip","output":"IsNullOrEmpty(address)"}
{"instruction":"Format the birthdate variable to display as \"Month Day, Year\".","input":"Variables: birthdate, name, address","output":"ToString(birthdate, \"MMMM dd, yyyy\")"}
{"instruction":"Return the number of characters in the company name variable.","input":"Variables: company_name, address, city, state, zip","output":"Length(company_name)"}
{"instruction":"Check if the order date is greater than or equal to today's date.","input":"Variables: order_date, order_id, order_total","output":"If(order_date >= Today(), True, False)"}
{"instruction":"Find the index of the first space in the address variable.","input":"Variables: address, city, state, zip","output":"IndexOf(address, \" \")"}
{"instruction":"Remove the first 3 characters from the phone number variable.","input":"Variables: phone, email, address, city, state, zip","output":"Substring(phone, 3)"}
{"instruction":"Check if the email variable is a valid email address.","input":"Variables: phone, email, address, city, state, zip","output":"IsMatchRegEx(\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\", email)"}
{"instruction":"Convert the order total variable to a decimal type.","input":"Variables: order_date, order_id, order_total","output":"ToDecimal(order_total)"}
{"instruction":"Return the day of the week for the order date variable.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeekStr(order_date)"}
{"instruction":"Replace all occurrences of the word \"Street\" in the address variable with \"St.\"","input":"Variables: address, city, state, zip","output":"ReplaceAll(address, \"Street\", \"St.\")"}
{"instruction":"Return the integer value of the year from the order date variable.","input":"Variables: order_date, order_id, order_total","output":"Year(order_date)"}
{"instruction":"Check if the order total is greater than or equal to $100.","input":"Variables: order_date, order_id, order_total","output":"If(order_total >= 100, True, False)"}
{"instruction":"Add 7 days to the order date variable.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 7)"}
{"instruction":"Convert the order date variable to a Julian date with a length of 7 digits.","input":"Variables: order_date, order_id, order_total","output":"DateToJulian(order_date, 7)"}
{"instruction":"Return the last 4 characters of the zip code variable.","input":"Variables: name, address, city, state, zip","output":"Right(zip, 4)"}
{"instruction":"Count the number of records in the orders table.","input":"","output":"Length(SplitStringMultipleRecords(orders, \"\\n\"))"}
{"instruction":"Return the age of the customer based on their birthdate, using the \"Year\" interval.","input":"Variables: birthdate, name, address, city, state, zip","output":"Age(birthdate, Now(), Year)"}
{"instruction":"Check if the given string is a valid email address.","input":"Variables: email, name, address, city, state, zip","output":"IsMatchRegEx(\"^([a-zA-Z0-9_\\\\-\\\\.]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.(com|org|net)$\", email)"}
{"instruction":"Convert the given string to uppercase.","input":"Variables: text, name, address, city, state, zip","output":"ToUpper(text)"}
{"instruction":"Get the year from the given date.","input":"Variables: hire_date, emp_id, salary","output":"Year(hire_date)"}
{"instruction":"Check if the given value is a numeric value.","input":"Variables: value, name, address, city, state, zip","output":"IsNumeric(value)"}
{"instruction":"Extract the first 10 characters from the given string.","input":"Variables: text, name, address, city, state, zip","output":"Left(text, 10)"}
{"instruction":"Convert the given string to proper case.","input":"Variables: text, name, address, city, state, zip","output":"ToProper(text)"}
{"instruction":"Check if the given value is null or empty.","input":"Variables: value, name, address, city, state, zip","output":"IsNullOrEmpty(value)"}
{"instruction":"Replace all occurrences of \"John\" with \"Peter\" in the given string.","input":"Variables: text, name, address, city, state, zip","output":"ReplaceAll(text, \"John\", \"Peter\")"}
{"instruction":"Check if the given value is a valid SQL date.","input":"Variables: value, name, address, city, state, zip","output":"IsValidSqlDate(value)"}
{"instruction":"Add 5 minutes to the given date.","input":"Variables: date, name, address, city, state, zip","output":"AddMinutes(date, 5)"}
{"instruction":"Check if the given value is a valid integer.","input":"Variables: value, name, address, city, state, zip","output":"IsInteger(value)"}
{"instruction":"Reverse the given string.","input":"Variables: text, name, address, city, state, zip","output":"Reverse(text)"}
{"instruction":"Check if the given value is a valid date.","input":"Variables: value, name, address, city, state, zip","output":"IsDate(value)"}
{"instruction":"Find the index of \"world\" in the given string.","input":"Variables: text, name, address, city, state, zip","output":"Find(\"world\", text)"}
{"instruction":"Get the last 5 characters from the given string.","input":"Variables: text, name, address, city, state, zip","output":"Right(text, 5)"}
{"instruction":"Get the month from the given date.","input":"Variables: date, name, address, city, state, zip","output":"Month(date)"}
{"instruction":"Add 3 years to the given date.","input":"Variables: date, name, address, city, state, zip","output":"AddYears(date, 3)"}
{"instruction":"Check if the given value is null or whitespace.","input":"Variables: value, name, address, city, state, zip","output":"IsNullOrWhitespace(value)"}
{"instruction":"Find the index of the first occurrence of the word \"apple\" in the string.","input":"Variables: fruit_string","output":"Find(\"apple\", fruit_string)"}
{"instruction":"Add 5 days to the current date.","input":"","output":"AddDays(Now(), 5)"}
{"instruction":"Check if the order total is greater than 1000.","input":"Variables: order_total, order_id","output":"IsRealNumber(order_total) && ToReal(order_total) > 1000"}
{"instruction":"Convert the order date to year month day format.","input":"Variables: order_date, order_id, order_total","output":"DateToIntegerYYYYMMDD(ToDate(order_date))"}
{"instruction":"Get the second word in the string.","input":"Variables: sentence","output":"Substring(sentence, IndexOf(sentence, \" \") + 1, IndexOf(sentence, \" \", IndexOf(sentence, \" \") + 1))"}
{"instruction":"Check if the address field is not null or empty.","input":"Variables: address, city, state, zip","output":"IsNotNull(address) && !IsNullOrEmpty(address)"}
{"instruction":"Replace all occurrences of the word \"red\" in the string with the word \"green\".","input":"Variables: color_string","output":"ReplaceAll(color_string, \"red\", \"green\")"}
{"instruction":"Get the day of the week for a given date.","input":"Variables: order_date","output":"DayOfWeekStr(ToDate(order_date))"}
{"instruction":"Convert the order date to Unix timestamp.","input":"Variables: order_date, order_id, order_total","output":"ToUnixEpoc(ToDate(order_date))"}
{"instruction":"Check if the email address is valid.","input":"Variables: email","output":"IsMatchRegEx(\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\", email)"}
{"instruction":"Get the last word in the string.","input":"Variables: sentence","output":"Substring(sentence, FindLast(\" \", sentence) + 1)"}
{"instruction":"Convert the order total to decimal type.","input":"Variables: order_total, order_id","output":"ToDecimal(order_total)"}
{"instruction":"Check if the value is a valid SQL date.","input":"Variables: date","output":"IsValidSqlDate(ToDate(date))"}
{"instruction":"Get the month for a given date.","input":"Variables: order_date","output":"Month(ToDate(order_date))"}
{"instruction":"Remove the last 3 characters from the string.","input":"Variables: string_value","output":"Left(string_value, Length(string_value) - 3)"}
{"instruction":"Convert the decimal value to integer type.","input":"Variables: decimal_value, order_id","output":"ToInteger(decimal_value)"}
{"instruction":"Check if the value is a real number.","input":"Variables: value","output":"IsRealNumber(value)"}
{"instruction":"Get the year for a given date.","input":"Variables: order_date","output":"Year(ToDate(order_date))"}
{"instruction":"Check if the given input is null or empty.","input":"Check if the input variable is null or empty. Variable: input","output":"IsNullOrEmpty(input)"}
{"instruction":"Split the given string by comma and return the third element.","input":"Split the string by comma. Example string: \"John, Doe, New York, NY\"","output":"GetToken(\"John, Doe, New York, NY\", ',', 2)"}
{"instruction":"Check if the given value is a real number.","input":"Check if the value is a real number. Variable: value","output":"IsRealNumber(value)"}
{"instruction":"Replace all occurrences of 'apple' with 'orange' in the given string.","input":"Replace 'apple' with 'orange'. Example string: \"I have an apple, he has an apple too\"","output":"ReplaceAll(\"I have an apple, he has an apple too\", \"apple\", \"orange\")"}
{"instruction":"Check if the given value is not null.","input":"Check if the value is not null. Variable: value","output":"IsNotNull(value)"}
{"instruction":"Add 10 days to the given date.","input":"Add 10 days to the date. Variable: my_date","output":"AddDays(my_date, 10)"}
{"instruction":"Check if the given string ends with 'world'.","input":"Check if the string ends with 'world'. Variable: my_string","output":"EndsWith(my_string, \"world\")"}
{"instruction":"Convert the given string to upper case.","input":"Convert the string to upper case. Variable: my_string","output":"ToUpper(my_string)"}
{"instruction":"Check if the given value is a valid SQL date.","input":"Check if the value is a valid SQL date. Variable: value","output":"IsValidSqlDate(value)"}
{"instruction":"Remove the first 3 characters from the given string.","input":"Remove the first 3 characters from the string. Variable: my_string","output":"SubString(my_string, 3)"}
{"instruction":"Get the age in years between two dates.","input":"Get the age in years. Variables: birthdate, current_date","output":"Age(birthdate, current_date, 1)"}
{"instruction":"Replace all special characters in the given string with space.","input":"Replace special characters with space. Variable: my_string","output":"ReplaceAllSpecialCharactersWithSpace(my_string)"}
{"instruction":"Check if the given string contains 'hello' or 'world'.","input":"Check if the string contains 'hello' or 'world'. Variable: my_string","output":"ContainsAnyChar(my_string, \"hello, world\")"}
{"instruction":"Get the day of the week for the given date.","input":"Get the day of the week for the date. Variable: my_date","output":"DayOfWeekStr(my_date)"}
{"instruction":"Get the number of tokens in the given string.","input":"Get the number of tokens in the string. Example string: \"John, Doe, New York, NY\"","output":"GetFindCount(\",\", \"John, Doe, New York, NY\") + 1"}
{"instruction":"Get the leftmost 5 characters from the given string.","input":"Get the leftmost 5 characters from the string. Variable: my_string","output":"Left(my_string, 5)"}
{"instruction":"Check if the given date is a weekday.","input":"Check if the date is a weekday. Variable: my_date","output":"InStr(\"Monday,Tuesday,Wednesday,Thursday,Friday\", DayOfWeekStr(my_date)) > 0"}
{"instruction":"Convert the given integer into a string.","input":"Convert the integer into a string. Variable: my_int","output":"ToString(my_int)"}
{"instruction":"Check if a string is numeric.","input":"Variables: input_string, address, city, state, zip","output":"IsNumeric(input_string)"}
{"instruction":"Return the length of the input address.","input":"Variables: address, city, state, zip","output":"Length(address)"}
{"instruction":"Replace all occurrences of \"USA\" with \"United States\".","input":"Variables: text, address, city, state, zip","output":"ReplaceAll(text, \"USA\", \"United States\")"}
{"instruction":"Check if the input variable is null or empty.","input":"Variables: input, address, city, state, zip","output":"IsNullOrEmpty(input)"}
{"instruction":"Return the day of the week for a given date.","input":"Variables: date, order_id, order_total","output":"DayOfWeek(date)"}
{"instruction":"Check if the input variable is a valid SQL date.","input":"Variables: input_date, order_id, order_total","output":"IsValidSqlDate(input_date)"}
{"instruction":"Replace the first occurrence of \"the\" in the input string with \"a\".","input":"Variables: input_string, address, city, state, zip","output":"ReplaceFirst(input_string, \"the\", \"a\", true)"}
{"instruction":"Convert the input string to uppercase.","input":"Variables: input_string, address, city, state, zip","output":"ToUpper(input_string)"}
{"instruction":"Get the age in years between two given dates.","input":"Variables: dob, curr_date, order_total","output":"Age(dob, curr_date, 1)"}
{"instruction":"Check if the input value is an integer.","input":"Variables: input_value, order_id, order_total","output":"IsInteger(input_value)"}
{"instruction":"Add 5 days to the input date variable.","input":"Variables: input_date, order_id, order_total","output":"AddDays(input_date, 5)"}
{"instruction":"Remove all special characters and replace with spaces in the input string.","input":"Variables: input_string, address, city, state, zip","output":"ReplaceAllSpecialCharactersWithSpace(input_string)"}
{"instruction":"Get the substring of the input string starting at index 2 with a length of 5.","input":"Variables: input_string, address, city, state, zip","output":"Substring(input_string, 2, 5)"}
{"instruction":"Check if the input variable is null.","input":"Variables: input, order_id, order_total","output":"IsNull(input)"}
{"instruction":"Get the weekday name for a given date.","input":"Variables: date, order_id, order_total","output":"DayOfWeekStr(date)"}
{"instruction":"Convert the input variable to a real number.","input":"Variables: input_value, order_id, order_total","output":"ToReal(input_value)"}
{"instruction":"Check if the input variable is not null.","input":"Variables: input, order_id, order_total","output":"IsNotNull(input)"}
{"instruction":"Convert the input string to camel case with spaces.","input":"Variables: input_string, address, city, state, zip","output":"PascalCaseWithSpace(input_string)"}
{"instruction":"Check if the shipping date is a valid SQL date.","input":"Variables: shipping_date, order_id, order_total","output":"IsValidSqlDate(shipping_date)"}
{"instruction":"Convert the quantity variable to a real number.","input":"Variables: quantity, product_id, product_name","output":"ToReal(quantity)"}
{"instruction":"Check if the email address is not null or empty.","input":"Variables: email, order_id, order_total","output":"IsNotNull(email) && !IsNullOrEmpty(email)"}
{"instruction":"Remove all whitespace from the input string.","input":"Variables: input_string, order_id, order_total","output":"ReplaceAll(input_string, \" \", \"\")"}
{"instruction":"Get the month from the order date.","input":"Variables: order_date, order_id, order_total","output":"Month(order_date)"}
{"instruction":"Check if the input string is a substring of the address variable.","input":"Variables: input_string, address, city, state, zip","output":"IsSubstringOf(input_string, address)"}
{"instruction":"Get the second element from the input string when split by comma.","input":"Variables: input_string, order_id, order_total","output":"GetToken(SplitString(input_string, \",\"), \",\", 1)"}
{"instruction":"Convert the input string to all uppercase letters.","input":"Variables: input_string, order_id, order_total","output":"ToUpper(input_string)"}
{"instruction":"Get the day of the week as a string from the input date.","input":"Variables: input_date, order_id, order_total","output":"DayOfWeekStr(input_date)"}
{"instruction":"Replace all occurrences of \"hello\" with \"hi\" in the input string.","input":"Variables: input_string, order_id, order_total","output":"ReplaceAll(input_string, \"hello\", \"hi\")"}
{"instruction":"Check if the input string contains any numeric characters.","input":"Variables: input_string, order_id, order_total","output":"IsNumeric(input_string)"}
{"instruction":"Check if the input string is a valid email address.","input":"Variables: input_string, order_id, order_total","output":"IsMatchRegEx(\"^[\\\\w._%+-]+@[\\\\w.-]+\\\\.[a-zA-Z]{2,}$\", input_string)"}
{"instruction":"Add 5 years to the order date.","input":"Variables: order_date, order_id, order_total","output":"AddYears(order_date, 5)"}
{"instruction":"Replace the first occurrence of \"world\" with \"universe\" in the input string.","input":"Variables: input_string, order_id, order_total","output":"ReplaceFirst(input_string, \"world\", \"universe\", true)"}
{"instruction":"Check if the input string starts with the word \"hello\".","input":"Variables: input_string, order_id, order_total","output":"StartsWith(input_string, \"hello\")"}
{"instruction":"Get the first 5 characters from the input string.","input":"Variables: input_string, order_id, order_total","output":"Left(input_string, 5)"}
{"instruction":"Remove the first 3 characters from the input string.","input":"Variables: input_string, order_id, order_total","output":"RemoveChars(input_string, 0, 3)"}
{"instruction":"Get the age between the birth date and current date in months.","input":"Variables: birth_date, order_id, order_total","output":"Age(birth_date, Now(), 2)"}
{"instruction":"Check if the address field is not null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNotNull(address)"}
{"instruction":"Find the position of \"street\" in the address string.","input":"Variables: name, address, city, state, zip","output":"Find(\"street\", address)"}
{"instruction":"Remove the last 4 characters from the zip code.","input":"Variables: name, address, city, state, zip","output":"Left(zip, Length(zip)-4)"}
{"instruction":"Convert the order total variable to a decimal type.","input":"Variables: price, order_id, order_total","output":"ToDecimal(order_total)"}
{"instruction":"Check if the email address is valid.","input":"Variables: phone, email, address, city, state, zip","output":"IsMatchRegEx(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\", email)"}
{"instruction":"Extract the state abbreviation from the state variable.","input":"Variables: name, address, city, state, zip","output":"Substring(state, Length(state)-1)"}
{"instruction":"Check if the input string contains the word \"hello\".","input":"Variables: input_string","output":"Contains(input_string, \"hello\")"}
{"instruction":"Get the current month as a number.","input":"","output":"Month(Now())"}
{"instruction":"Combine the first name and last name with a space in between and capitalize the first letter of each word.","input":"Variables: fname, lname, address, city, state, zip","output":"Proper(Concatenate(fname, \" \", lname))"}
{"instruction":"Add 2 days to the order date.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 2)"}
{"instruction":"Check if the input string is a valid integer.","input":"Variables: input_string","output":"IsInteger(input_string)"}
{"instruction":"Check if the input string starts with the word \"hello\".","input":"Variables: input_string","output":"StartsWith(input_string, \"hello\")"}
{"instruction":"Replace all occurrences of \"green\" with \"blue\" in the color variable.","input":"Variables: color","output":"ReplaceAll(color, \"green\", \"blue\")"}
{"instruction":"Get the number of characters in the name variable.","input":"Variables: name, address, city, state, zip","output":"Length(name)"}
{"instruction":"Convert the input date in \"yyyy-MM-dd\" format to a DateTime type.","input":"Variables: input_date","output":"ToDate(input_date, \"yyyy-MM-dd\")"}
{"instruction":"Add 1 year to the order date.","input":"Variables: order_date, order_id, order_total","output":"AddYears(order_date, 1)"}
{"instruction":"Check if the input string contains any numeric characters.","input":"Variables: input_string","output":"IsNumeric(input_string)"}
{"instruction":"Remove all spaces from the input string.","input":"Variables: input_string","output":"ReplaceAll(input_string, \" \", \"\")"}
{"instruction":"Check if the address variable is not null or empty.","input":"Variables: address, city, state, zip","output":"IsNotNull(address)"}
{"instruction":"Check if the order_total variable is a real number.","input":"Variables: order_date, order_id, order_total","output":"IsRealNumber(order_total)"}
{"instruction":"Convert the date variable to a string format using the provided format.","input":"Variables: date, order_id, order_total. Format: MM/dd/yyyy","output":"ToString(date, \"MM/dd/yyyy\")"}
{"instruction":"Check if the zip code variable is a numeric value.","input":"Variables: address, city, state, zip","output":"IsNumeric(zip)"}
{"instruction":"Check if the email variable is null or empty.","input":"Variables: phone, email, address, city, state, zip","output":"IsNullOrEmpty(email)"}
{"instruction":"Get the year from the date variable.","input":"Variables: date, order_id, order_total","output":"Year(date)"}
{"instruction":"Get the index of the @ symbol in the email variable.","input":"Variables: phone, email, address, city, state, zip","output":"IndexOf(email, \"@\")"}
{"instruction":"Add 5 days to the order date.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 5)"}
{"instruction":"Check if the order_id variable is null.","input":"Variables: order_date, order_id, order_total","output":"IsNull(order_id)"}
{"instruction":"Get the first 5 characters of the address variable.","input":"Variables: address, city, state, zip","output":"Left(address, 5)"}
{"instruction":"Get the last 4 characters of the zip code variable.","input":"Variables: address, city, state, zip","output":"Right(zip, 4)"}
{"instruction":"Replace all occurrences of \"Street\" with \"St.\" in the address variable.","input":"Variables: address, city, state, zip","output":"ReplaceAll(address, \"Street\", \"St.\")"}
{"instruction":"Check if the order_total variable is null or empty.","input":"Variables: order_date, order_id, order_total","output":"IsNullOrEmpty(order_total)"}
{"instruction":"Get the age in weeks between two dates.","input":"Variables: start_date, end_date. Interval: 2 (weeks)","output":"Age(start_date, end_date, 2)"}
{"instruction":"Get the difference in days between two dates.","input":"Variables: start_date, end_date","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Convert the date variable to a string format using the provided format including the time.","input":"Variables: date, order_id, order_total. Format: MM/dd/yyyy hh:mm:ss tt","output":"ToString(date, \"MM/dd/yyyy hh:mm:ss tt\")"}
{"instruction":"Get the index of the second occurrence of the letter \"e\" in the address variable.","input":"Variables: address, city, state, zip","output":"Find(address, \"e\", Find(address, \"e\") + 1)"}
{"instruction":"Check if the order_date variable is a valid SQL date.","input":"Variables: order_date, order_id, order_total","output":"IsValidSqlDate(order_date)"}
{"instruction":"Get the year from the date.","input":"Variables: date_of_birth, name, address, city, state, zip","output":"Year(date_of_birth)"}
{"instruction":"Check if the provided value is a numeric value.","input":"Variables: input_value, name, address, city, state, zip","output":"IsNumeric(input_value)"}
{"instruction":"Check if the provided value is a valid SQL date.","input":"Variables: date_value, name, address, city, state, zip","output":"IsValidSqlDate(date_value)"}
{"instruction":"Replace all occurrences of the word \"dog\" with \"cat\".","input":"Variables: sentence, name, address, city, state, zip","output":"ReplaceAll(sentence, \"dog\", \"cat\")"}
{"instruction":"Check if the given text contains any numeric characters.","input":"Variables: text_value, name, address, city, state, zip","output":"IsNumeric(GetDigits(text_value))"}
{"instruction":"Convert the provided value to a string.","input":"Variables: input_value, name, address, city, state, zip","output":"ToString(input_value)"}
{"instruction":"Remove the first 3 characters from the provided value.","input":"Variables: input_value, name, address, city, state, zip","output":"Substring(input_value, 3)"}
{"instruction":"Add 5 days to the provided date.","input":"Variables: date_value, name, address, city, state, zip","output":"AddDays(date_value, 5)"}
{"instruction":"Check if the given text contains any whitespace characters.","input":"Variables: text_value, name, address, city, state, zip","output":"IsNullOrWhitespace(text_value)"}
{"instruction":"Convert the provided value to a decimal type.","input":"Variables: input_value, name, address, city, state, zip","output":"ToDecimal(input_value)"}
{"instruction":"Concatenate address, city, state and zip together.","input":"Variables: address, city, state, zip","output":"Concatenate(address, \", \", city, \", \", state, \", \", zip)"}
{"instruction":"Get the first 3 characters from the provided value.","input":"Variables: input_value, name, address, city, state, zip","output":"Left(input_value, 3)"}
{"instruction":"Check if the provided string is null or empty.","input":"Variables: input_value, name, address, city, state, zip","output":"IsNullOrEmpty(input_value)"}
{"instruction":"Add 1 year to the provided date.","input":"Variables: date_value, name, address, city, state, zip","output":"AddYears(date_value, 1)"}
{"instruction":"Check if the provided string is a valid date.","input":"Variables: input_value, name, address, city, state, zip","output":"IsDate(input_value)"}
{"instruction":"Replace all special characters with space in the provided string.","input":"Variables: input_value, name, address, city, state, zip","output":"ReplaceAllSpecialCharactersWithSpace(input_value)"}
{"instruction":"Check if the provided string is a substring of the second provided string.","input":"Variables: str1, str2, name, address, city, state, zip","output":"IsSubstringOf(str1, str2)"}
{"instruction":"Convert the provided date string to a DateTime type using the given format.","input":"Variables: date_string, format, name, address, city, state, zip","output":"ToDate(date_string, format)"}
{"instruction":"Check if the numeric variable is greater than or equal to 10.","input":"Variables: num, order_id, order_total","output":"num >= 10"}
{"instruction":"Get the difference in days between two dates.","input":"Variables: start_date, end_date, order_id, order_total","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Check if the string variable contains the word \"hello\".","input":"Variables: message, order_id, order_total","output":"Contains(message, \"hello\")"}
{"instruction":"Convert the string variable to all uppercase.","input":"Variables: name, address, city, state, zip","output":"ToUpper(name)"}
{"instruction":"Get the year from the given date variable.","input":"Variables: date_of_birth, address, city, state, zip","output":"Year(date_of_birth)"}
{"instruction":"Get the last word from the given string variable.","input":"Variables: sentence, order_id, order_total","output":"RightOf(sentence, \" \")"}
{"instruction":"Replace all occurrences of \"apple\" with \"banana\" in the given string variable.","input":"Variables: text, order_id, order_total","output":"ReplaceAll(text, \"apple\", \"banana\")"}
{"instruction":"Check if the given string variable is a valid email address.","input":"Variables: email, order_id, order_total","output":"IsMatchRegEx(\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\", email)"}
{"instruction":"Remove all whitespace characters from the given string variable.","input":"Variables: sentence, order_id, order_total","output":"RemoveChars(sentence, \" \")"}
{"instruction":"Get the second token from the given string variable, separated by a comma.","input":"Variables: csv_data, order_id, order_total","output":"GetToken(csv_data, \",\", 1)"}
{"instruction":"Add 5 days to the given date variable.","input":"Variables: start_date, order_id, order_total","output":"AddDays(start_date, 5)"}
{"instruction":"Convert the given string variable to a DateTime type using the specified format.","input":"Variables: date_str, date_format, order_id, order_total","output":"ToDate(date_str, date_format)"}
{"instruction":"Get the age in years between the two given dates.","input":"Variables: dob, current_date, order_id, order_total","output":"Age(dob, current_date, 1)"}
{"instruction":"Check if the given string variable is a valid US zip code.","input":"Variables: zipcode, order_id, order_total","output":"IsUSZipCode(zipcode)"}
{"instruction":"Get the date and time components from the given DateTime variable.","input":"Variables: datetime, order_id, order_total","output":"GetDateComponents(datetime)"}
{"instruction":"Convert the given string variable to a Decimal type.","input":"Variables: amount, order_id, order_total","output":"ToDecimal(amount)"}
{"instruction":"Replace all whitespace characters with a dash in the given string variable.","input":"Variables: sentence, order_id, order_total","output":"ReplaceAll(sentence, \" \", \"-\")"}
{"instruction":"Get the last 4 characters from the given string variable.","input":"Variables: text, order_id, order_total","output":"Substring(text, Length(text)-4)"}
{"instruction":"Check if the date variable is a valid SQL date.","input":"Variables: date, order_id, order_total","output":"IsValidSqlDate(date)"}
{"instruction":"Add 5 days to the date variable.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 5)"}
{"instruction":"Convert the string variable to uppercase.","input":"Variables: str, order_id, order_total","output":"ToUpper(str)"}
{"instruction":"Check if the string variable is numeric.","input":"Variables: str, order_id, order_total","output":"IsNumeric(str)"}
{"instruction":"Get the year from the date variable.","input":"Variables: order_date, order_id, order_total","output":"Year(order_date)"}
{"instruction":"Combine the city, state and zip variables into a single string.","input":"Variables: address, city, state, zip","output":"Concatenate(city, \", \", state, \" \", zip)"}
{"instruction":"Remove all whitespace from the string variable.","input":"Variables: str, order_id, order_total","output":"ReplaceAll(str, \" \", \"\")"}
{"instruction":"Build a string that includes the first name, last name and address variables in proper case.","input":"Variables: fname, lname, address, city, state, zip","output":"Proper(Concatenate(fname, \" \", lname, \", \", address))"}
{"instruction":"Check if the date variable is not null.","input":"Variables: order_date, order_id, order_total","output":"IsNotNull(order_date)"}
{"instruction":"Replace any instances of the word \"cat\" with \"dog\" in the string variable.","input":"Variables: str, order_id, order_total","output":"ReplaceAll(str, \"cat\", \"dog\")"}
{"instruction":"Get the hour from the date variable.","input":"Variables: order_date, order_id, order_total","output":"Hour(order_date)"}
{"instruction":"Convert the string variable to a DateTime type using format \"MM/dd/yyyy\".","input":"Variables: str, order_id, order_total","output":"ToDate(str, \"MM/dd/yyyy\")"}
{"instruction":"Calculate the difference in days between two date variables.","input":"Variables: start_date, end_date, order_id, order_total","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Check if the string variable contains the word \"hello\".","input":"Variables: str, order_id, order_total","output":"Contains(str, \"hello\")"}
{"instruction":"Remove the first 5 characters from the string variable.","input":"Variables: str, order_id, order_total","output":"Substring(str, 5)"}
{"instruction":"Replace all whitespace with a hyphen in the string variable.","input":"Variables: str, order_id, order_total","output":"ReplaceAll(str, \" \", \"-\")"}
{"instruction":"Convert the string variable to a decimal type.","input":"Variables: str, order_id, order_total","output":"ToDecimal(str)"}
{"instruction":"Check if the date variable is in the format \"dd/MM/yyyy\".","input":"Variables: date, order_id, order_total","output":"IsDate(date, \"dd/MM/yyyy\")"}
{"instruction":"Check if the address variable is not null or empty.","input":"Variables: name, address, city, state, zip","output":"IsNotNull(address)"}
{"instruction":"Return the total number of characters in the name variable.","input":"Variables: name, address, city, state, zip","output":"Length(name)"}
{"instruction":"Convert the string variable to title case.","input":"Variables: title, description, category, price","output":"ToProper(title)"}
{"instruction":"Check if the order date is a valid SQL date.","input":"Variables: order_date, order_id, order_total","output":"IsValidSqlDate(order_date)"}
{"instruction":"Concatenate the city, state, and zip variables with a comma delimiter.","input":"Variables: name, address, city, state, zip","output":"Concatenate(city, \", \", state, \", \", zip)"}
{"instruction":"Return the current date in the format of \"MM/DD/YYYY\".","input":"","output":"ToString(Now(), \"MM/dd/yyyy\")"}
{"instruction":"Find the position of the \"@\" symbol in the email variable.","input":"Variables: phone, email, address, city, state, zip","output":"Find(\"@\", email)"}
{"instruction":"Check if the price variable is a real number.","input":"Variables: price, order_id, order_total","output":"IsRealNumber(price)"}
{"instruction":"Subtract 2 days from the current date.","input":"","output":"AddDays(Now(), -2)"}
{"instruction":"Check if the zip code variable is a valid US zip code.","input":"Variables: name, address, city, state, zip","output":"IsUSZipCode(zip)"}
{"instruction":"Left align the name variable with a total length of 20 characters and fill with spaces on the right.","input":"Variables: name, address, city, state, zip","output":"LeftAlign(name, 20)"}
{"instruction":"Remove all spaces from the phone number variable.","input":"Variables: phone, email, address, city, state, zip","output":"RemoveChars(phone, \" \")"}
{"instruction":"Find the last occurrence of \"the\" in the description variable.","input":"Variables: title, description, category, price","output":"FindLast(\"the\", description)"}
{"instruction":"Strip all HTML tags from the description variable.","input":"Variables: title, description, category, price","output":"StripHtml(description)"}
{"instruction":"Replace all instances of \"red\" with \"blue\" in the title variable.","input":"Variables: title, description, category, price","output":"ReplaceAll(title, \"red\", \"blue\")"}
{"instruction":"Check if the name variable contains only alphabetical characters.","input":"Variables: name, address, city, state, zip","output":"IsAlpha(name)"}
{"instruction":"Return the week number of the current date.","input":"","output":"Week(Now())"}
{"instruction":"Convert the time string variable to the number of seconds since midnight.","input":"Variables: time, date, temperature","output":"CharToSeconds(time)"}
{"instruction":"Check if the zip variable is null or blank.","input":"Variables: fname, lname, address, city, state, zip","output":"IsNullOrWhitespace(zip)"}
{"instruction":"Return the address string with all letters capitalized.","input":"Variables: fname, lname, address, city, state, zip","output":"ToUpper(address)"}
{"instruction":"Calculate the difference in days between two dates.","input":"Date variables: start_date, end_date","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Add 5 hours to the current time.","input":"","output":"AddHours(Now(), 5)"}
{"instruction":"Replace all instances of \"dog\" with \"cat\" in the given string.","input":"String: \"The quick brown fox jumps over the lazy dog.\"","output":"ReplaceAll(\"The quick brown fox jumps over the lazy dog.\", \"dog\", \"cat\")"}
{"instruction":"Check if the order total is greater than or equal to 500.","input":"Variables: order_total, order_date, order_id","output":"order_total >= 500"}
{"instruction":"Get the year from the given date variable.","input":"Date variable: order_date","output":"Year(order_date)"}
{"instruction":"Check if the given string contains any numeric characters.","input":"String variable: text","output":"IsNumeric(text)"}
{"instruction":"Convert the given string to a decimal.","input":"String variable: price","output":"ToDecimal(price)"}
{"instruction":"Add 2 days to the given date variable.","input":"Date variable: order_date","output":"AddDays(order_date, 2)"}
{"instruction":"Check if the email variable is valid.","input":"Variables: phone, email, address, city, state, zip","output":"IsValidEmail(email)"}
{"instruction":"Extract all numbers from the given string.","input":"String variable: text","output":"GetDigits(text)"}
{"instruction":"Get the last 3 characters of the given string.","input":"String variable: text","output":"Right(text, 3)"}
{"instruction":"Replace the first occurrence of \"apple\" with \"orange\" in the given string.","input":"String variable: text","output":"ReplaceFirst(text, \"apple\", \"orange\", true)"}
{"instruction":"Check if the given date is a valid SQL date.","input":"Date variable: order_date","output":"IsValidSqlDate(order_date)"}
{"instruction":"Combine first name, last name, and a greeting message using concatenation.","input":"Variables: fname, lname, message","output":"Concatenate(\"Hello, \", fname, \" \", lname, \"! \", message)"}
{"instruction":"Get the age in months between two dates.","input":"Date variables: birth_date, current_date","output":"DateDifferenceMonths(birth_date, current_date)"}
{"instruction":"Extract the first 5 characters of the given string and convert them to all uppercase.","input":"String variable: text","output":"ToUpper(Substring(text, 0, 5))"}
{"instruction":"Check if the customer's state is California.","input":"Variables: state, customer_name, customer_email","output":"Equals(state, \"California\")"}
{"instruction":"Calculate the age of the customer in years.","input":"Variables: birthdate, order_date, customer_name, customer_email","output":"Age(birthdate, order_date, 1)"}
{"instruction":"Return the last 4 characters of the credit card number.","input":"Variables: cc_number, order_id, order_total","output":"Right(cc_number, 4)"}
{"instruction":"Remove any line breaks from the input text.","input":"Text with line breaks. Variables: text","output":"ReplaceAll(text, GetLineFeed(), \"\")"}
{"instruction":"Check if the input string is a valid email address.","input":"Variables: email","output":"IsMatchRegEx(\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\", email)"}
{"instruction":"Calculate the difference in days between two dates.","input":"Variables: start_date, end_date","output":"DateDifferenceDays(start_date, end_date)"}
{"instruction":"Check if the input string contains the word \"hello\".","input":"Variables: text","output":"Contains(text, \"hello\")"}
{"instruction":"Calculate the total price of an order including tax.","input":"Variables: order_total, tax_rate","output":"order_total * (1 + tax_rate)"}
{"instruction":"Get the weekday name of a given date.","input":"Variables: date","output":"DayOfWeekStr(date)"}
{"instruction":"Replace all instances of \"red\" with \"blue\" in the input string.","input":"Variables: text","output":"ReplaceAll(text, \"red\", \"blue\")"}
{"instruction":"Convert a string in the format \"MM/DD/YYYY\" to a DateTime type.","input":"Variables: date_str","output":"ToDate(date_str, \"MM/dd/yyyy\")"}
{"instruction":"Check if the input string is a valid US phone number.","input":"Variables: phone_number","output":"IsUSPhone(phone_number)"}
{"instruction":"Remove all non-alphabetic characters from the input string.","input":"Variables: text","output":"ReplaceRegEx(\"[^a-zA-Z]\", text, \"\")"}
{"instruction":"Get the integer value of the input string.","input":"Variables: number_string","output":"ToInteger(number_string)"}
{"instruction":"Add 30 days to a given date.","input":"Variables: date","output":"AddDays(date, 30)"}
{"instruction":"Check if the input string is null or empty.","input":"Variables: text","output":"IsNullOrEmpty(text)"}
{"instruction":"Get the first and last name initials of a person.","input":"Variables: full_name","output":"Concatenate(Left(full_name, 1), \".\", Left(Right(full_name, Length(full_name) - IndexOf(full_name, \" \")), 1), \".\")"}
{"instruction":"Calculate the total number of hours between two dates.","input":"Variables: start_date, end_date","output":"DateDifferenceHours(start_date, end_date)"}
{"instruction":"Check if the order_total is a real number.","input":"Variables: order_id, order_total, customer_id","output":"IsRealNumber(order_total)"}
{"instruction":"Convert the string variable to all uppercase.","input":"Variables: message, username, password","output":"ToUpper(message)"}
{"instruction":"Get the day of the week for the order date.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeek(order_date)"}
{"instruction":"Replace all instances of \"Mr.\" with \"Ms.\" in the variable.","input":"Variables: gender, fullname, address, city, state, zip","output":"ReplaceAll(fullname, \"Mr.\", \"Ms.\")"}
{"instruction":"Check if the email address is null or empty.","input":"Variables: email, fullname, address, city, state, zip","output":"IsNullOrEmpty(email)"}
{"instruction":"Subtract 7 days from the order date.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, -7)"}
{"instruction":"Get the Julian date for the order date.","input":"Variables: order_date, order_id, order_total","output":"ToJulianDate(order_date)"}
{"instruction":"Check if the zipcode is a valid US zipcode.","input":"Variables: zip, fullname, address, city, state","output":"IsUSZipCode(zip)"}
{"instruction":"Get the age in years between the birth date and the current date.","input":"Variables: birthdate, fullname, address, city, state, zip","output":"Age(birthdate, Now(), 1)"}
{"instruction":"Reverse the string variable.","input":"Variables: message, username, password","output":"Reverse(message)"}
{"instruction":"Remove the first 3 characters from the variable.","input":"Variables: fullname, address, city, state, zip","output":"Substring(fullname, 3)"}
{"instruction":"Pad the variable with zeroes on the left to make it 10 characters long.","input":"Variables: order_id, order_total, customer_id","output":"PadLeft(order_id, '0', 10)"}
{"instruction":"Check if the variable contains the word \"apple\".","input":"Variables: text, name, address, city, state, zip","output":"Contains(text, \"apple\")"}
{"instruction":"Get the first 5 characters of the variable and add \"...\" at the end.","input":"Variables: message, username, password","output":"Left(message, 5) + \"...\""}
{"instruction":"Replace all whitespace characters with a single space.","input":"Variables: text, name, address, city, state, zip","output":"ReplaceAll(text, \"\\s+\", \" \")"}
{"instruction":"Get the substring starting from the 3rd character and include the next 6 characters.","input":"Variables: fullname, address, city, state, zip","output":"Substring(fullname, 2, 6)"}
{"instruction":"Add 30 minutes to the current time.","input":"","output":"AddMinutes(Now(), 30)"}
{"instruction":"Check if the variable is a valid SQL date.","input":"Variables: date, order_id, order_total","output":"IsValidSqlDate(date)"}
{"instruction":"Remove the prefix \"Mr.\" or \"Mrs.\" from the name variable.","input":"Variables: name, address, city, state, zip","output":"ReplaceAll(Proper(name), \"Mr. \", \"\", False)"}
{"instruction":"Check if the variable dateOfBirth is a valid date.","input":"Variables: dateOfBirth, age, address, city, state, zip","output":"IsDate(dateOfBirth)"}
{"instruction":"Convert the variable age to a double type.","input":"Variables: dateOfBirth, age, address, city, state, zip","output":"ToReal(age)"}
{"instruction":"Check if the variable addressLine2 is null or empty.","input":"Variables: addressLine1, addressLine2, city, state, zip","output":"IsNullOrEmpty(addressLine2)"}
{"instruction":"Get the day of the week for the order date.","input":"Variables: order_date, order_id, order_total","output":"DayOfWeekStr(order_date)"}
{"instruction":"Add 7 days to the order date variable.","input":"Variables: order_date, order_id, order_total","output":"AddDays(order_date, 7)"}
{"instruction":"Remove all special characters from the address variable.","input":"Variables: name, address, city, state, zip","output":"ReplaceAllSpecialCharactersWithSpace(address)"}
{"instruction":"Get the index of the first occurrence of the word \"Street\" in the address variable.","input":"Variables: name, address, city, state, zip","output":"Find(\"Street\", address)"}
{"instruction":"Check if the variable age is greater than or equal to 18 and less than 65.","input":"Variables: dateOfBirth, age, address, city, state, zip","output":"If(And(age >= 18, age < 65), True, False)"}
{"instruction":"Convert the variable height to inches.","input":"Variables: height, weight","output":"ToReal(height) * 12"}
{"instruction":"Get the last four digits of the social security number.","input":"Variables: ssn, name, address, city, state, zip","output":"Substring(ssn, Length(ssn) - 3)"}
{"instruction":"Check if the variable order_total is a real number.","input":"Variables: order_date, order_id, order_total","output":"IsRealNumber(order_total)"}
{"instruction":"Add the first and last name to the email address.","input":"Variables: fname, lname, email, address, city, state, zip","output":"Concatenate(email, \".\", fname, \".\", lname, \"@example.com\")"}
{"instruction":"Remove any leading or trailing whitespaces from the variable phone.","input":"Variables: phone, email, address, city, state, zip","output":"Trim(phone)"}
{"instruction":"Convert the variable birthdate to a Julian date.","input":"Variables: birthdate, age, address, city, state, zip","output":"ToJulianDate(birthdate)"}
{"instruction":"Replace any occurrence of \"Avenue\" with \"Ave\" in the address variable.","input":"Variables: name, address, city, state, zip","output":"ReplaceAll(address, \"Avenue\", \"Ave\")"}
{"instruction":"Check if the variable zip is a valid US zip code.","input":"Variables: name, address, city, state, zip","output":"IsUSZipCode(zip)"}
{"instruction":"Calculate the age difference between the variable dob1 and dob2 in months.","input":"Variables: dob1, dob2, age, address, city, state, zip","output":"DateDifferenceMonths(dob1, dob2)"}
{"instruction":"Concatenate two strings together.","input":"Variables: firstName, lastName","output":"firstName + \" \" + lastName"}
{"instruction":"Convert a string to uppercase.","input":"Variables: text","output":"text.ToUpper()"}
{"instruction":"Find the maximum value between two decimal numbers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: text, key","output":"ComputeSHA256(text, key)"}
{"instruction":"Round a given decimal number to two decimal places.","input":"Variables: num","output":"Round(num, 2)"}
{"instruction":"Get the file name without extension from a given file path.","input":"Variables: filePath","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Compute the Double Metaphone of a given string.","input":"Variables: text","output":"DoubleMetaphone(text)"}
{"instruction":"Calculate the total number of minutes in a given TimeSpan.","input":"Variables: timeSpan","output":"TotalMinutes(timeSpan)"}
{"instruction":"Compute the Refined Soundex of a given string.","input":"Variables: text","output":"RefinedSoundex(text)"}
{"instruction":"move a file from one location to another.","input":"Variables: sourceFilePath, destFilePath","output":"MoveFile(sourceFilePath, destFilePath)"}
{"instruction":"Check if a directory exists at a given path.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Calculate the number of days between two given dates.","input":"Variables: startDate, endDate","output":"Days(endDate - startDate)"}
{"instruction":"Convert a given string to uppercase and then URL encode it.","input":"Variables: text","output":"UrlEncode(text.ToUpper())"}
{"instruction":"Calculate the future value of an investment given the interest rate, the number of periods, the payment amount and the present value.","input":"Variables: rate, numPeriods, paymentAmount, presentValue","output":"FV(rate, numPeriods, paymentAmount, presentValue)"}
{"instruction":"Parse a US address to get individual components.","input":"Variables: fullAddress, outputCase","output":"ParseAddressUS(fullAddress, outputCase)"}
{"instruction":"Calculate the straight-line depreciation for an asset based on its cost, salvage value and useful life.","input":"Variables: cost, salvageValue, usefulLife","output":"SLN(cost, salvageValue, usefulLife)"}
{"instruction":"Check if a given process is running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: text","output":"ComputeMD5(text)"}
{"instruction":"Compute the floor value of a given decimal number.","input":"Variables: num","output":"Floor(num)"}
{"instruction":"Calculate the number of periods required to pay off a loan given the interest rate, the payment amount and the present value.","input":"Variables: rate, paymentAmount, presentValue","output":"NumPeriods(rate, paymentAmount, presentValue)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Calculate the payment amount of a loan given the interest rate, the present value and the number of periods.","input":"Variables: rate, presentValue, numPeriods","output":"Pmt(rate, presentValue, numPeriods)"}
{"instruction":"Calculate the internal rate of return of an investment given the number of periods, the payment amount, the present value and the future value.","input":"Variables: numPeriods, paymentAmount, presentValue, futureValue","output":"Rate(numPeriods, paymentAmount, presentValue, futureValue)"}
{"instruction":"Compute hash value of a string with a given key.","input":"Variables: message, key","output":"ComputeHash(message, key)"}
{"instruction":"Convert a string to all uppercase.","input":"Variables: sentence","output":"ConvertEncoding(sentence, \"UTF-8\").ToUpper()"}
{"instruction":"Get the floor value of a decimal number.","input":"Variables: num","output":"Floor(num)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Calculate the total number of days in a given time span.","input":"Variables: timeSpan","output":"TotalDays(timeSpan)"}
{"instruction":"Generate a random real number between a given range.","input":"Variables: min, max","output":"RandomReal(min, max)"}
{"instruction":"Find the first line of a given text file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Compute the SHA256 hash value of a string.","input":"Variables: message","output":"ComputeSHA256(message)"}
{"instruction":"Round a real number to a given decimal place.","input":"Variables: num, decimals","output":"Round(num, decimals)"}
{"instruction":"Parse a US address and output the result in a specified case.","input":"Variables: fullAddress, outputCase","output":"ParseAddressUS(fullAddress, outputCase)"}
{"instruction":"Get the last time a file was updated.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Compute the total number of seconds in a given time span.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Calculate the principal payment of a loan in a given period.","input":"Variables: rate, periods, numPeriods, PV, FV","output":"PPmt(rate, periods, numPeriods, PV, FV)"}
{"instruction":"Convert a string to its equivalent byte array.","input":"Variables: message","output":"ToBytes(message, \"UTF-8\")"}
{"instruction":"Compute the double metaphone code of a string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Check if a specified process is currently running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Calculate the present value of a loan or investment.","input":"Variables: rate, Pmt, PV, FV","output":"PV(rate, Pmt, PV, FV)"}
{"instruction":"Append a given text to the end of a specified file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Copy a file from a source path to a destination path.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, True)"}
{"instruction":"Delete a specified file.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Move a specified file to a new location.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Find the number of periods required to pay off a loan or investment.","input":"Variables: rate, Pmt, PV, FV","output":"NumPeriods(rate, Pmt, PV, FV)"}
{"instruction":"Compute the soundex code of a string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Convert a string to its encoded URL.","input":"Variables: url","output":"UrlEncode(url)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: message","output":"ComputeSHA256(message)"}
{"instruction":"Round a decimal number to two decimal places.","input":"Variables: num","output":"Round(num, 2)"}
{"instruction":"Determine if a file exists at a specified file path.","input":"Variables: filePath","output":"If(FileExists(filePath), \"File exists\", \"File does not exist\")"}
{"instruction":"Read the first line of a text file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Calculate the number of days in a given time span.","input":"Variables: timeSpan","output":"Days(timeSpan)"}
{"instruction":"Calculate the number of seconds in a given time span.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Generate a Refined Soundex code for a given string.","input":"Variables: inputString","output":"RefinedSoundex(inputString)"}
{"instruction":"Calculate the interest payment for a given period in a loan.","input":"Variables: rate, periods, numPeriods, PV, FV","output":"IPmt(rate, periods, numPeriods, PV, FV)"}
{"instruction":"Convert a byte array to a string.","input":"Variables: byteArray, codePage","output":"FromBytes(byteArray, codePage)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: message","output":"ComputeMD5(message)"}
{"instruction":"Calculate the total number of minutes in a given time span.","input":"Variables: timeSpan","output":"TotalMinutes(timeSpan)"}
{"instruction":"Calculate the present value of a loan.","input":"Variables: rate, Pmt, PV, FV","output":"PV(rate, Pmt, PV, FV)"}
{"instruction":"Calculate the number of ticks in a given time span.","input":"Variables: timeSpan","output":"Ticks(timeSpan)"}
{"instruction":"Calculate the number of seconds in a given time span.","input":"Variables: timeSpan","output":"Seconds(timeSpan)"}
{"instruction":"Calculate the power of a given base raised to a given exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Compute the double metaphone code for a given string.","input":"Variables: inputString","output":"DoubleMetaphone(inputString)"}
{"instruction":"Calculate the maximum of two integers.","input":"Variables: a, b","output":"Max(a, b)"}
{"instruction":"Copy a file from a source path to a destination path.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Calculate the payment for a loan.","input":"Variables: rate, Pmt, PV, FV","output":"Pmt(rate, Pmt, PV, FV)"}
{"instruction":"Determine if a directory exists at a specified path.","input":"Variables: filePath","output":"DirectoryExists(filePath)"}
{"instruction":"Compute the hash of a string using a specified key and return the result in hexadecimal format.","input":"Variables: str, key","output":"ComputeHash(str, key, true)"}
{"instruction":"Calculate the minimum of two real numbers.","input":"Variables: a, b","output":"Min(a, b)"}
{"instruction":"Round the number 3.14567 to 2 decimal places.","input":"","output":"Round(3.14567, 2)"}
{"instruction":"Calculate the average of the numbers 5, 7, and 9","input":"","output":"(5+7+9)/3"}
{"instruction":"Convert the string \"Hello World\" to uppercase.","input":"","output":"Upper(\"Hello World\")"}
{"instruction":"Compute the SHA256 hash value of the string \"password\" using key \"secretkey\".","input":"","output":"ComputeHash(\"password\", \"secretkey\", false)"}
{"instruction":"Compute the soundex value of the string \"Astera\" ","input":"","output":"Soundex(\"Astera\")"}
{"instruction":"Compute the refined soundex value of the string \"Astera\" ","input":"","output":"RefinedSoundex(\"Astera\")"}
{"instruction":"Delete the file \"example.txt\" ","input":"File path: example.txt","output":"DeleteFile(example.txt)"}
{"instruction":"Copy the file \"example.txt\" to \"backup.txt\" ","input":"File path: example.txt, Destination path: backup.txt","output":"CopyFile(example.txt, backup.txt, false)"}
{"instruction":"Move the file \"example.txt\" to folder \"backup\" ","input":"File path: example.txt, Destination path: backup/","output":"MoveFile(example.txt, backup/example.txt)"}
{"instruction":"Read the first line of the file \"example.txt\" using UTF-8 encoding ","input":"File path: example.txt, Encoding: UTF-8","output":"ReadFileFirstLine(example.txt, \"UTF-8\")"}
{"instruction":"Read the text of the file \"example.txt\" using ISO-8859-1 encoding","input":"File path: example.txt, Encoding: ISO-8859-1","output":"ReadFileText(example.txt, \"ISO-8859-1\")"}
{"instruction":"Write the string \"Hello World\" to the file \"example.txt\"","input":"File path: example.txt, Text to append: \"Hello World\"","output":"WriteTextToFile(example.txt, \"Hello World\")"}
{"instruction":"Compute the MD5 hash value of the string \"password\" ","input":"","output":"ComputeMD5(\"password\")"}
{"instruction":"Compute the double metaphone value of the string \"Astera\"","input":"","output":"DoubleMetaphone(\"Astera\")"}
{"instruction":"Compute the number of days in 3 hours","input":"","output":"Days(TimeSpanFromTicks(3*TimeSpan.Ticks_Per_Hour))"}
{"instruction":"Compute the number of hours in 3 days ","input":"","output":"Hours(TimeSpanFromTicks(3*TimeSpan.Ticks_Per_Day))"}
{"instruction":"Compute the number of milliseconds in 3 seconds ","input":"","output":"Milliseconds(TimeSpanFromTicks(3*TimeSpan.Ticks_Per_Second))"}
{"instruction":"Calculate the future value of an investment with a present value of $1000, a rate of 5%, 10 periods, and an annuity payment of $100.","input":"","output":"FV(0.05, 10, -100, -1000, false)"}
{"instruction":"Calculate the monthly payment for a loan with a present value of $5000, a rate of 4%, and 36 periods.","input":"","output":"Pmt(0.04/12, -36, 5000, false)"}
{"instruction":"Calculate the number of periods it takes for an investment with a present value of $1000, a future value of $1500, and a rate of 6% to reach maturity.","input":"","output":"NumPeriods(0.06, 0, -1000, 1500, false)"}
{"instruction":"Compute the DDB depreciation of an asset with a cost of $10,000, a salvage value of $1,000, a life of 5 years, and 3 years of depreciation.","input":"","output":"DDB(10000, 1000, 5, 3)"}
{"instruction":"Parse and correct a US address with the input \"123 Main St., Anytown, NY 12345\"","input":"Address: \"123 Main St.\", City: \"Anytown\", State: \"NY\", Zip: \"12345\"","output":"ParseAndCorrectAddressUS(\"123 Main St., Anytown, NY 12345\")"}
{"instruction":"Parse a US name with the input \"John M. Smith Jr.\"","input":"","output":"ParseNameEx(\"John M. Smith Jr.\")"}
{"instruction":"Convert the input text to all uppercase.","input":"Variable: text","output":"UpperCase(text)"}
{"instruction":"Calculate the total cost of an order based on unit price and quantity.","input":"Variables: unitPrice, quantity","output":"unitPrice * quantity"}
{"instruction":"Convert the input text to base64 encoding.","input":"Variable: text","output":"ToBase64(text)"}
{"instruction":"Remove all special characters from the input text.","input":"Variable: text","output":"RemoveSpecialChars(text)"}
{"instruction":"Encrypt the input text using AES encryption with the given key and initialization vector.","input":"Variables: text, key, iv","output":"EncryptAES(text, key, iv)"}
{"instruction":"Get the length of the file in bytes.","input":"Variable: filePath","output":"FileLength(filePath)"}
{"instruction":"Get the first 5 characters of the input text.","input":"Variable: text","output":"Substring(text, 0, 5)"}
{"instruction":"Get the last modified date and time of the file.","input":"Variable: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Calculate the total interest paid on a loan based on rate, number of periods, payment amount, and principal.","input":"Variables: rate, numPeriods, payment, principal","output":"TotalInterest(rate, numPeriods, payment, principal)"}
{"instruction":"Convert the input text to title case.","input":"Variable: text","output":"TitleCase(text)"}
{"instruction":"Get the directory path of the input file.","input":"Variable: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Check if the input file exists.","input":"Variable: filePath","output":"FileExists(filePath)"}
{"instruction":"Calculate the sum of two decimal numbers.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Get the UTF-8 encoded byte array of the input text.","input":"Variable: text","output":"ToBytes(text, \"utf-8\")"}
{"instruction":"Reverse the order of words in the input text.","input":"Variable: text","output":"Reverse(text)"}
{"instruction":"Get the day of the week for a given date.","input":"Variable: date","output":"DayOfWeek(date)"}
{"instruction":"Round the input decimal number to the nearest integer.","input":"Variable: num","output":"Round(num)"}
{"instruction":"Concatenate two input strings.","input":"Variables: str1, str2","output":"Concat(str1, str2)"}
{"instruction":"Get the number of lines in the input file.","input":"Variable: filePath","output":"FileLineCount(filePath)"}
{"instruction":"Calculate the monthly payment amount for a loan based on rate, number of periods, and principal.","input":"Variables: rate, numPeriods, principal","output":"MonthlyPayment(rate, numPeriods, principal)"}
{"instruction":"Convert the input text to a date format.","input":"Variable: text","output":"ToDateTime(text)"}
{"instruction":"Get the refined soundex code for the input text.","input":"Variable: text","output":"RefinedSoundex(text)"}
{"instruction":"Calculate the factorial of the input whole number.","input":"Variable: num","output":"Factorial(num)"}
{"instruction":"Convert the string \"Hello, World!\" to upper case.","input":"\"Hello, World!\"","output":"ToUpper(\"Hello, World!\")"}
{"instruction":"Calculate the future value of an investment with an interest rate of 5%, a payment of $100, and a present value of $5000, over a period of 10 years.","input":"Rate = 0.05, NumPeriods = 10, Pmt = 100, PV = 5000","output":"FV(0.05, 10, 100, 5000)"}
{"instruction":"Parse the address \"123 Main St, Anytown, NY 12345\" and output in title case.","input":"\"123 Main St, Anytown, NY 12345\"","output":"ParseAddressUS(\"123 Main St\", \"Anytown, NY 12345\", \"TitleCase\")"}
{"instruction":"Get the file length of \"file.txt\".","input":"\"file.txt\"","output":"FileLength(\"file.txt\")"}
{"instruction":"Compute the SHA256 hash of the string \"password\" with the key \"secret\".","input":"\"password\", \"secret\"","output":"ComputeSHA256(\"password\", \"secret\")"}
{"instruction":"Convert the binary file \"image.png\" into a byte array.","input":"\"image.png\"","output":"ReadFileBytes(\"image.png\")"}
{"instruction":"Round the decimal number 3.14159 to 2 decimal places.","input":"3.14159","output":"Round(3.14159, 2)"}
{"instruction":"Move the file \"file.txt\" to the directory \"backup\".","input":"\"file.txt\", \"backup\"","output":"MoveFile(\"file.txt\", \"backup/file.txt\")"}
{"instruction":"Compute the total number of seconds in 2 hours, 30 minutes, and 15 seconds.","input":"Hours = 2, Minutes = 30, Seconds = 15","output":"TotalSeconds(ToTimeSpan(0, 2, 30, 15))"}
{"instruction":"Calculate the monthly payment on a loan with a 10% interest rate, a present value of $10000, and a term of 5 years.","input":"Rate = 0.10, NumPeriods = 60, PV = 10000","output":"Pmt(0.10/12, 60, 10000)"}
{"instruction":"Check if the file \"data.xlsx\" exists.","input":"\"data.xlsx\"","output":"FileExists(\"data.xlsx\")"}
{"instruction":"Compute the Refined Soundex code for the string \"gnome\".","input":"\"gnome\"","output":"RefinedSoundex(\"gnome\")"}
{"instruction":"Append the text \"Hello, world!\" to the end of \"file.txt\".","input":"\"file.txt\", \"Hello, world!\"","output":"AppendTextToFile(\"file.txt\", \"Hello, world!\")"}
{"instruction":"Delete the file \"old.txt\".","input":"\"old.txt\"","output":"DeleteFile(\"old.txt\")"}
{"instruction":"Determine the maximum of the decimal numbers 3.14 and 4.56.","input":"First = 3.14, Second = 4.56","output":"Max(3.14, 4.56)"}
{"instruction":"Copy the file \"data.xlsx\" to \"backup/data.xlsx\", overwriting any existing file.","input":"\"data.xlsx\", \"backup/data.xlsx\"","output":"CopyFile(\"data.xlsx\", \"backup/data.xlsx\", True)"}
{"instruction":"Compute the absolute value of -10.","input":"-10","output":"Abs(-10)"}
{"instruction":"Determine the minimum of the integer numbers 10 and 20.","input":"First = 10, Second = 20","output":"Min(10, 20)"}
{"instruction":"Compute the double metaphone code for the string \"phonetics\".","input":"\"phonetics\"","output":"DoubleMetaphone(\"phonetics\")"}
{"instruction":"Compute the hash of the string \"password\" with the key \"secret\" in hexadecimal format.","input":"\"password\", \"secret\"","output":"ComputeHash(\"password\", \"secret\", True)"}
{"instruction":"Encode the URL \"https://www.example.com\" using URL encoding.","input":"\"https://www.example.com\"","output":"UrlEncode(\"https://www.example.com\")"}
{"instruction":"Check if the process \"notepad.exe\" is currently running.","input":"\"notepad.exe\"","output":"IsProcessRunning(\"notepad.exe\")"}
{"instruction":"Terminate the process \"notepad.exe\".","input":"\"notepad.exe\"","output":"TerminateProcess(\"notepad.exe\")"}
{"instruction":"Get the number of days between two dates.","input":"Variables: start_date, end_date","output":"Days(Max(start_date, end_date), Min(start_date, end_date))"}
{"instruction":"Parse a US address into its components.","input":"Variables: address_text","output":"ParseAddressUS(address_text, \"ProperCase\")"}
{"instruction":"Convert a string to URL-encoded format.","input":"Variables: url","output":"UrlEncode(url)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: text","output":"ComputeSHA256(text)"}
{"instruction":"Calculate the present value of an investment given rate, payment, and number of periods.","input":"Variables: rate, payment, periods","output":"PV(rate, periods, -payment)"}
{"instruction":"Compute the double metaphone encoding of a string.","input":"Variables: text","output":"DoubleMetaphone(text)"}
{"instruction":"Convert a string to a different encoding.","input":"Variables: text, from_encoding","output":"ConvertEncoding(text, from_encoding)"}
{"instruction":"Calculate the total number of seconds in a specific timespan.","input":"Variables: timespan","output":"TotalSeconds(timespan)"}
{"instruction":"Copy a file to a new location and overwrite if necessary.","input":"Variables: source_file, dest_file","output":"CopyFile(source_file, dest_file, True)"}
{"instruction":"Calculate the total amount of interest paid on a loan given rate, payment, present value, and number of periods.","input":"Variables: rate, periods, payment, present_value","output":"IPmt(rate, periods, periods, present_value, 0, 0) * -1"}
{"instruction":"Get the file extension of a file path.","input":"Variables: file_path","output":"GetFileExtension(file_path)"}
{"instruction":"Calculate the number of periods required to pay off a loan given rate, payment, and present value.","input":"Variables: rate, payment, present_value","output":"NumPeriods(rate, payment, present_value)"}
{"instruction":"Compute the soundex encoding of a string.","input":"Variables: text","output":"Soundex(text)"}
{"instruction":"Calculate the total number of minutes in a specific timespan.","input":"Variables: timespan","output":"TotalMinutes(timespan)"}
{"instruction":"Get the file name without extension from a file path.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Delete a file from the file system.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the refined soundex encoding of a string.","input":"Variables: text","output":"RefinedSoundex(text)"}
{"instruction":"Calculate the total number of hours in a specific timespan.","input":"Variables: timespan","output":"TotalHours(timespan)"}
{"instruction":"Append text to a file.","input":"Variables: file_path, text_to_append","output":"AppendTextToFile(file_path, text_to_append)"}
{"instruction":"Move a file from one location to another.","input":"Variables: file_path, new_path","output":"MoveFile(file_path, new_path)"}
{"instruction":"Determine if a process is running by name.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: text","output":"ComputeMD5(text)"}
{"instruction":"Get the last update date and time of a file.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Calculate the sum of two decimal numbers.","input":"Variables: first_decimal, second_decimal","output":"first_decimal + second_decimal"}
{"instruction":"Get the length of a specified file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Round a decimal number to 2 decimal places.","input":"Variables: decimal_number","output":"Round(decimal_number, 2)"}
{"instruction":"Convert a string from one code page to another.","input":"Variables: input_string, from_code_page, to_code_page","output":"ConvertEncoding(input_string, from_code_page, to_code_page)"}
{"instruction":"Get the SHA256 hash of a specified string.","input":"Variables: input_string","output":"ComputeSHA256(input_string)"}
{"instruction":"Get the current date and time.","input":"","output":"CreateDateTime()"}
{"instruction":"Move a file from one location to another.","input":"Variables: file_path, new_file_path","output":"MoveFile(file_path, new_file_path)"}
{"instruction":"Determine if a file exists at a specified file path.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Calculate the number of days between two specified dates.","input":"Variables: first_date, second_date","output":"Days(Max(first_date, second_date) - Min(first_date, second_date))"}
{"instruction":"Generate a random real number between two specified integers.","input":"Variables: min_value, max_value","output":"RandomReal(min_value, max_value)"}
{"instruction":"Replace all occurrences of a specified string in a text file with another string.","input":"Variables: file_path, old_string, new_string","output":"ReplaceAll(ReadFileText(file_path), old_string, new_string)"}
{"instruction":"Calculate the refined Soundex code for a specified string.","input":"Variables: input_string","output":"RefinedSoundex(input_string)"}
{"instruction":"Parse a US address into individual components.","input":"Variables: address_string","output":"ParseAddressUS(address_string)"}
{"instruction":"Get the last time a specified file was updated.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Compute the DDB depreciation of an asset for a specified time period.","input":"Variables: cost, salvage, life, period","output":"DDB(cost, salvage, life, period)"}
{"instruction":"Convert a string to URL encoded format.","input":"Variables: input_string","output":"UrlEncode(input_string)"}
{"instruction":"Calculate the interest payment for a specific period in a loan.","input":"Variables: rate, periods, num_periods, pv","output":"IPmt(rate, periods, num_periods, pv)"}
{"instruction":"Copy a file from one location to another, overwriting the destination file if it exists.","input":"Variables: source_file_path, dest_file_path","output":"CopyFile(source_file_path, dest_file_path, True)"}
{"instruction":"Get the directory path for a specified file.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Parse a US address into individual components and correct any errors.","input":"Variables: address_input_string","output":"ParseAndCorrectAddressUS(address_input_string)"}
{"instruction":"Calculate the FV (future value) of a loan or investment.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Calculate the total number of minutes in a specified time span.","input":"Variables: time_span","output":"TotalMinutes(time_span)"}
{"instruction":"Concatenate two text files into a single file.","input":"Variables: file1_path, file2_path, new_file_path","output":"WriteBytesToFile(new_file_path, ReadFileBytes(file1_path) + ReadFileBytes(file2_path))"}
{"instruction":"Find the maximum value between two dates.","input":"Variables: date1, date2","output":"Max(date1, date2)"}
{"instruction":"Calculate the floor of a decimal number.","input":"Variables: decimal_num","output":"Floor(decimal_num)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: input_string","output":"ComputeSHA256(input_string)"}
{"instruction":"Convert a given string to URL encoded format.","input":"Variables: input_string","output":"UrlEncode(input_string)"}
{"instruction":"Calculate the number of days in a given time span.","input":"Variables: time_span","output":"Days(time_span)"}
{"instruction":"Check if a file exists.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Compute the total number of minutes in a given time span.","input":"Variables: time_span","output":"TotalMinutes(time_span)"}
{"instruction":"Parse and correct a given US address.","input":"Variables: full_address","output":"ParseAndCorrectAddressUS(full_address)"}
{"instruction":"Generate a Double Metaphone code for a given string.","input":"Variables: input_string","output":"DoubleMetaphone(input_string)"}
{"instruction":"Calculate the present value of an investment.","input":"Variables: rate, pmt, pv","output":"PV(rate, pmt, pv)"}
{"instruction":"Round a given real number to a certain number of decimals.","input":"Variables: real_num, decimals","output":"Round(real_num, decimals)"}
{"instruction":"Delete a file at a given file path.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the Refined Soundex value for a given string.","input":"Variables: input_string","output":"RefinedSoundex(input_string)"}
{"instruction":"Check if a directory exists at a given path.","input":"Variables: dir_path","output":"DirectoryExists(dir_path)"}
{"instruction":"Move a file from a source path to a new destination path.","input":"Variables: source_path, dest_path","output":"MoveFile(source_path, dest_path)"}
{"instruction":"Calculate the number of periods required for a loan.","input":"Variables: rate, pmt, pv","output":"NumPeriods(rate, pmt, pv)"}
{"instruction":"Get the length of a file at a given path.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Compute the total number of seconds in a given time span.","input":"Variables: time_span","output":"TotalSeconds(time_span)"}
{"instruction":"Compute the FV (future value) of an investment.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Compute the IPmt (interest payment) for a specific period of a loan.","input":"Variables: rate, periods, num_periods, pv","output":"IPmt(rate, periods, num_periods, pv)"}
{"instruction":"Check if a process is currently running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Get the last update date and time of a file at a given path.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Compute the total number of hours in a given time span.","input":"Variables: time_span","output":"TotalHours(time_span)"}
{"instruction":"Get the length of a text file.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Round a decimal value to nearest integer.","input":"Variables: decimal_value","output":"Round(decimal_value)"}
{"instruction":"Get the soundex code of a given string.","input":"Variables: name","output":"Soundex(name)"}
{"instruction":"Parse a US address into its components.","input":"Variables: full_address","output":"ParseAddressUS(full_address, \"title\")"}
{"instruction":"Compute SHA256 hash of a given string.","input":"Variables: input_string, key","output":"ComputeSHA256(input_string, key)"}
{"instruction":"Get the date and time when a file was last updated.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Convert a string to URL encoded format.","input":"Variables: input_string","output":"UrlEncode(input_string)"}
{"instruction":"Compute the total number of minutes in a given timespan.","input":"Variables: timespan","output":"TotalMinutes(timespan)"}
{"instruction":"Compute the power of a given real number raised to another real number.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: source_file_path, destination_file_path, overwrite","output":"CopyFile(source_file_path, destination_file_path, overwrite)"}
{"instruction":"Compute the total interest paid on a loan over a specific period.","input":"Variables: rate, periods, num_periods, pv, fv","output":"IPmt(rate, periods, num_periods, pv, fv)"}
{"instruction":"Convert a byte array to a string using a specific code page.","input":"Variables: byte_array, code_page","output":"FromBytes(byte_array, code_page)"}
{"instruction":"Check if a specified Excel file exists and get a list of its worksheets.","input":"Variables: file_path","output":"GetExcelWorksheets(file_path)"}
{"instruction":"Compute the double metaphone code of a given string.","input":"Variables: input_string","output":"DoubleMetaphone(input_string)"}
{"instruction":"Parse a US address into its components, and correct it if necessary.","input":"Variables: input_address","output":"ParseAndCorrectAddressUS(input_address)"}
{"instruction":"Get the file extension of a file.","input":"Variables: file_path","output":"GetFileExtension(file_path)"}
{"instruction":"Delete a specified file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Get the name of a file without its extension.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Compute the refined soundex code of a given string.","input":"Variables: input_string","output":"RefinedSoundex(input_string)"}
{"instruction":"Compute the FV (future value) of a loan payment.","input":"Variables: rate, n_per, pmt, pv","output":"FV(rate, n_per, pmt, pv)"}
{"instruction":"Compute the total number of seconds in a given timespan.","input":"Variables: timespan","output":"TotalSeconds(timespan)"}
{"instruction":"Compute the sum of two or more decimal values.","input":"Variables: values","output":"Sum(values)"}
{"instruction":"Convert a string to a specified encoding format.","input":"Variables: input_string, code_page","output":"ConvertEncoding(input_string, code_page)"}
{"instruction":"Convert a string to all uppercase.","input":"Variable: message","output":"Uppercase(message)"}
{"instruction":"Calculate the total cost of a set of products.","input":"Variables: product1, product2, product3, unit_price1, unit_price2, unit_price3, quantity1, quantity2, quantity3","output":"(unit_price1 * quantity1) + (unit_price2 * quantity2) + (unit_price3 * quantity3)"}
{"instruction":"Find the maximum value between two decimal numbers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Find the minimum value between two integer numbers.","input":"Variables: num1, num2","output":"Min(num1, num2)"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variable: num","output":"Round(num)"}
{"instruction":"Find the number of days between two dates.","input":"Variables: start_date, end_date","output":"Days(end_date - start_date)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: message, from_encoding, to_encoding","output":"ConvertEncoding(message, from_encoding, to_encoding)"}
{"instruction":"Check if a file exists.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Move a file to a different location.","input":"Variables: source_path, destination_path","output":"MoveFile(source_path, destination_path)"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Calculate the present value of an investment.","input":"Variables: rate, nper, pmt, fv","output":"PV(rate, nper, pmt, fv)"}
{"instruction":"Check if a process is running on the system.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Calculate the length of a file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Calculate the number of minutes in a TimeSpan.","input":"Variables: timespan","output":"Minutes(timespan)"}
{"instruction":"Calculate the double metaphone code for a string.","input":"Variable: string","output":"DoubleMetaphone(string)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variable: string","output":"ComputeSHA256(string)"}
{"instruction":"Append text to a file.","input":"Variables: file_path, text","output":"AppendTextToFile(file_path, text)"}
{"instruction":"Parse an address and separate it into its components (street, city, state, and zipcode).","input":"Variables: full_address","output":"ParseAddressUS(full_address, \"ProperCase\")"}
{"instruction":"Read the first line of a file.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Find the directory of a file.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Calculate the number of periods in an investment.","input":"Variables: rate, pmt, pv","output":"NumPeriods(rate, pmt, pv)"}
{"instruction":"Calculate the rate of return for an investment.","input":"Variables: num_periods, pmt, pv, fv","output":"Rate(num_periods, pmt, pv, fv)"}
{"instruction":"Calculate the correct address based on the input.","input":"Variables: address_input","output":"ParseAndCorrectAddressUS(address_input)"}
{"instruction":"Calculate the sum of two decimals.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Get the file extension from a given file path.","input":"Variables: filePath","output":"GetFileExtension(filePath)"}
{"instruction":"Convert a given string to uppercase.","input":"Variables: str","output":"ConvertEncoding(str, \"uppercase\")"}
{"instruction":"Calculate the total number of seconds in a given time span.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: date1, date2","output":"Days(Max(date1, date2) - Min(date1, date2))"}
{"instruction":"Delete a file at a given file path.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Round a given decimal to two decimal places.","input":"Variables: num","output":"Round(num, 2)"}
{"instruction":"Convert a given string to UTF-8 encoding.","input":"Variables: str","output":"ConvertEncoding(str, \"utf-8\")"}
{"instruction":"Calculate the absolute value of a given real number.","input":"Variables: num","output":"Abs(num)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: str","output":"ComputeSHA256(str)"}
{"instruction":"Get the name of a file without its extension from a given file path.","input":"Variables: filePath","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Calculate the total length of a given time span in milliseconds.","input":"Variables: timeSpan","output":"TotalMilliSeconds(timeSpan)"}
{"instruction":"Get the file information for a given file path.","input":"Variables: filePath","output":"GetFileInfo(filePath)"}
{"instruction":"Calculate the power of a given base and exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Get the refined soundex code for a given string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Create a new text file at a given file path and write a given text to it.","input":"Variables: filePath, text","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Calculate the number of hours in a given time span.","input":"Variables: timeSpan","output":"Hours(timeSpan)"}
{"instruction":"Get the directory of a given file path.","input":"Variables: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Calculate the maximum of two given integers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Calculate the number of minutes in a given time span.","input":"Variables: timeSpan","output":"Minutes(timeSpan)"}
{"instruction":"Get the last update date and time for a given file path.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Calculate the floor of a given real number.","input":"Variables: num","output":"Floor(num)"}
{"instruction":"Move a file from a given file path to a new file path.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Calculate the total cost by multiplying the unit cost with the quantity.","input":"Variables: unit_cost, quantity","output":"Multiply(unit_cost, quantity)"}
{"instruction":"Round off the number to the nearest tenth.","input":"Variables: number","output":"Round(number, 1)"}
{"instruction":"Get the refined soundex code of a given string.","input":"Variables: string","output":"RefinedSoundex(string)"}
{"instruction":"Check if a file exists.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Calculate the total interest paid over a loan period.","input":"Variables: rate, num_periods, pmt, pv","output":"Multiply(Subtract(Multiply(-pmt, num_periods), pv), rate)"}
{"instruction":"Calculate the power of a number.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Encode a string to url.","input":"Variables: string","output":"UrlEncode(string)"}
{"instruction":"Convert a string to bytes.","input":"Variables: string, code_page","output":"ToBytes(string, code_page)"}
{"instruction":"Find the minimum value between two given dates.","input":"Variables: date1, date2","output":"Min(date1, date2)"}
{"instruction":"Convert a string to a specified encoding.","input":"Variables: string, from_code_page","output":"ConvertEncoding(string, from_code_page)"}
{"instruction":"Calculate the number of days in a given time span.","input":"Variables: time_span","output":"TotalDays(time_span)"}
{"instruction":"Copy a file to another location.","input":"Variables: source_file_path, dest_file_path, overwrite","output":"CopyFile(source_file_path, dest_file_path, overwrite)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: string","output":"ComputeSHA256(string)"}
{"instruction":"Check if a directory exists.","input":"Variables: directory_path","output":"DirectoryExists(directory_path)"}
{"instruction":"Calculate the total number of minutes in a given time span.","input":"Variables: time_span","output":"TotalMinutes(time_span)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: string","output":"ComputeMD5(string)"}
{"instruction":"Remove a file from the specified path.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Get information about a specified file.","input":"Variables: file_path","output":"GetFileInfo(file_path)"}
{"instruction":"Calculate the total number of seconds in a given time span.","input":"Variables: time_span","output":"TotalSeconds(time_span)"}
{"instruction":"Compute the double metaphone code of a given string.","input":"Variables: string","output":"DoubleMetaphone(string)"}
{"instruction":"Check if a specific process is running in the system.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Terminate a specific running process.","input":"Variables: process_name","output":"TerminateProcess(process_name)"}
{"instruction":"Calculate the total interest paid over a loan period, including the future value.","input":"Variables: rate, num_periods, pmt, pv, fv","output":"Multiply(Subtract(Multiply(-pmt, num_periods), pv), rate) + fv"}
{"instruction":"Calculate the total cost of a product with a 10% discount.","input":"Variables: product_name, original_price ","output":"(original_price * 0.9)"}
{"instruction":"Convert a string to a lowercase.","input":"Variables: input_text","output":"ToLower(input_text)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: input_text","output":"ComputeSHA256(input_text)"}
{"instruction":"Round a given decimal number to the nearest whole number.","input":"Variables: input_number","output":"Round(input_number)"}
{"instruction":"Convert a hexadecimal string to bytes.","input":"Variables: input_hex_string","output":"FromBytes(input_hex_string, 'hex')"}
{"instruction":"Get the file information (size, creation time, last accessed time, last write time) of a given file.","input":"Variables: file_path","output":"GetFileInfo(file_path)"}
{"instruction":"Copy a file from source to destination and overwrite if necessary.","input":"Variables: source_file_path, destination_file_path","output":"CopyFile(source_file_path, destination_file_path, true)"}
{"instruction":"Convert a given string to its URL encoded format.","input":"Variables: input_string","output":"UrlEncode(input_string)"}
{"instruction":"Calculate the maximum value between two decimal numbers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Compute the double metaphone code for a given string.","input":"Variables: input_string","output":"DoubleMetaphone(input_string)"}
{"instruction":"Parse a US address and return the output in title case.","input":"Variables: address_line1, city, state, zip_code","output":"ParseAddressUS(address_line1, city + ', ' + state + ' ' + zip_code, 'Title')"}
{"instruction":"Compute the number of seconds in a given time span.","input":"Variables: time_span","output":"TotalSeconds(time_span)"}
{"instruction":"Calculate the present value of a payment with a 5% discount rate for 10 periods.","input":"Variables: rate, pmt, periods","output":"PV(rate, pmt, 0, periods)"}
{"instruction":"Get the list of worksheets in an Excel file.","input":"Variables: file_path","output":"GetExcelWorksheets(file_path)"}
{"instruction":"Delete a given file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Append a given text to an existing file.","input":"Variables: file_path, text_to_append","output":"AppendTextToFile(file_path, text_to_append)"}
{"instruction":"Calculate the total number of days in a given time span.","input":"Variables: time_span","output":"TotalDays(time_span)"}
{"instruction":"Encode a given string with a specific encoding.","input":"Variables: input_string, encoding","output":"ConvertEncoding(input_string, encoding)"}
{"instruction":"Round a given decimal number to two decimal places.","input":"Variables: input_number","output":"Round(input_number, 2)"}
{"instruction":"Check if a process with a specific name is currently running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Calculate the minimum value between two integer numbers.","input":"Variables: num1, num2","output":"Min(num1, num2)"}
{"instruction":"Create a new DateTime object with a specific year, month, and day.","input":"Variables: year, month, day","output":"CreateDateTime(year + '-' + month + '-' + day)"}
{"instruction":"Compute the SLN depreciation of an asset given its cost, salvage value, and life.","input":"Variables: cost, salvage_value, life","output":"SLN(cost, salvage_value, life)"}
{"instruction":"Calculate the total cost of an order with 10% discount.","input":"Variables: order_total","output":"order_total * 0.9"}
{"instruction":"Parse and correct an US address.","input":"Variables: address","output":"ParseAndCorrectAddressUS(address)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: string_to_hash, key","output":"ComputeSHA256(string_to_hash, key)"}
{"instruction":"Get the last update date and time of a file.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Copy a file from one location to another with overwrite.","input":"Variables: source_path, destination_path","output":"CopyFile(source_path, destination_path, true)"}
{"instruction":"Convert a string to bytes in a specified code page.","input":"Variables: string_to_convert, code_page","output":"ToBytes(string_to_convert, code_page)"}
{"instruction":"Compute the soundex code for a string.","input":"Variables: name","output":"Soundex(name)"}
{"instruction":"Calculate the total number of minutes in a given time span.","input":"Variables: time_span","output":"TotalMinutes(time_span)"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variables: decimal_number","output":"Round(decimal_number)"}
{"instruction":"Append text to the end of a file.","input":"Variables: file_path, text_to_append","output":"AppendTextToFile(file_path, text_to_append)"}
{"instruction":"Delete a file from the system.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the double metaphone code for a string.","input":"Variables: string_to_code","output":"DoubleMetaphone(string_to_code)"}
{"instruction":"Create a time span from given days, hours, minutes and seconds.","input":"Variables: days, hours, minutes, seconds","output":"ToTimeSpan(days, hours, minutes, seconds)"}
{"instruction":"Calculate the number of years from a given time span.","input":"Variables: time_span","output":"TotalDays(time_span) / 365.25"}
{"instruction":"Calculate the minimum of two decimal numbers.","input":"Variables: first_number, second_number","output":"Min(first_number, second_number)"}
{"instruction":"Count the number of lines in a file.","input":"Variables: file_path","output":"FileLineCount(file_path)"}
{"instruction":"Compute the refined soundex code for a string.","input":"Variables: string_to_code","output":"RefinedSoundex(string_to_code)"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Check if a file exists in the system.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Calculate the total seconds in a given time span.","input":"Variables: time_span","output":"TotalSeconds(time_span)"}
{"instruction":"Calculate the present value of an investment.","input":"Variables: rate, nper, pmt, fv","output":"PV(rate, nper, pmt, fv)"}
{"instruction":"Check if a directory exists in the system.","input":"Variables: directory_path","output":"DirectoryExists(directory_path)"}
{"instruction":"Calculate the total number of ticks in a given time span.","input":"Variables: time_span","output":"Ticks(time_span)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Example string: \"Hello, world!\"","output":"ComputeSHA256(\"Hello, world!\")"}
{"instruction":"Round a given decimal number to the nearest integer.","input":"Example number: 3.14159","output":"Round(3.14159)"}
{"instruction":"Convert a given string to all uppercase.","input":"Example string: \"hello, world!\"","output":"Uppercase(\"hello, world!\")"}
{"instruction":"Get the file extension of a given file path.","input":"Example file path: \"C:\\Documents\\example.txt\"","output":"GetFileExtension(\"C:\\Documents\\example.txt\")"}
{"instruction":"Add two decimal numbers together.","input":"Variables: num1 = 3.14, num2 = 2.71","output":"num1 + num2"}
{"instruction":"Get the length of a given string.","input":"Example string: \"The quick brown fox jumps over the lazy dog.\"","output":"Length(\"The quick brown fox jumps over the lazy dog.\")"}
{"instruction":"Compute the double metaphone of a given string.","input":"Example string: \"Mississippi\"","output":"DoubleMetaphone(\"Mississippi\")"}
{"instruction":"Check if a given directory exists.","input":"Example directory path: \"C:\\Users\\example\\Documents\"","output":"DirectoryExists(\"C:\\Users\\example\\Documents\")"}
{"instruction":"Get the second worksheet in an Excel file.","input":"Example file path: \"C:\\Users\\example\\Documents\\example.xlsx\"","output":"GetExcelWorksheets(\"C:\\Users\\example\\Documents\\example.xlsx\")[1]"}
{"instruction":"Compute the sum of two integers.","input":"Variables: num1 = 42, num2 = 13","output":"num1 + num2"}
{"instruction":"Convert a given string to title case.","input":"Example string: \"the quick BROWN fox JUMPS over the LAZY dog.\"","output":"TitleCase(\"the quick BROWN fox JUMPS over the LAZY dog.\")"}
{"instruction":"Get the last update datetime of a given file.","input":"Example file path: \"C:\\Users\\example\\Documents\\example.txt\"","output":"LastUpdateDateTime(\"C:\\Users\\example\\Documents\\example.txt\")"}
{"instruction":"Compute the refined soundex of a given string.","input":"Example string: \"Mississippi\"","output":"RefinedSoundex(\"Mississippi\")"}
{"instruction":"Check if a given file exists.","input":"Example file path: \"C:\\Users\\example\\Documents\\example.txt\"","output":"FileExists(\"C:\\Users\\example\\Documents\\example.txt\")"}
{"instruction":"Compute the power of a given base and exponent.","input":"Variables: base = 2, exponent = 8","output":"Pow(base, exponent)"}
{"instruction":"Compute the number of days in a given timespan.","input":"Example timespan: 2 weeks, 3 days, 4 hours","output":"Days(\"14.03:04:00\")"}
{"instruction":"Compute the number of minutes in a given timespan.","input":"Example timespan: 1 hour, 30 minutes","output":"Minutes(\"01:30:00\")"}
{"instruction":"Compute the number of ticks in a given timespan.","input":"Example timespan: 1 day, 2 hours, 30 minutes, 15 seconds","output":"Ticks(\"1.02:30:15\")"}
{"instruction":"Compute the difference between two dates in days.","input":"Variables: date1 = \"2022-01-01\", date2 = \"2022-01-31\"","output":"Days(Max(date1, date2) - Min(date1, date2))"}
{"instruction":"Compute the cosine of a given angle in radians.","input":"Example angle in radians: 1.0472 (60 degrees)","output":"Cos(1.0472)"}
{"instruction":"Compute the natural logarithm of a given number.","input":"Example number: 2.71828","output":"Ln(2.71828)"}
{"instruction":"Copy a given file to a new location.","input":"Variables: source = \"C:\\Users\\example\\Documents\\example.txt\", destination = \"C:\\Users\\example\\Desktop\\example.txt\"","output":"CopyFile(source, destination, true)"}
{"instruction":"Compute the sum of two decimal numbers.","input":"Variables: num1 = 1.61803, num2 = 0.61803","output":"num1 + num2"}
{"instruction":"Convert a string to URL encoded string.","input":"Variable: url","output":"UrlEncode(url)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variable: password","output":"ComputeSHA256(password)"}
{"instruction":"Find the maximum of two dates.","input":"Variables: date1, date2","output":"Max(date1, date2)"}
{"instruction":"Calculate the total number of minutes in a given time span.","input":"Variables: time","output":"TotalMinutes(time)"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variable: price","output":"Round(price)"}
{"instruction":"Compute the double metaphone encoding of a given string.","input":"Variable: name","output":"DoubleMetaphone(name)"}
{"instruction":"Check if a process is currently running.","input":"Variable: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, true)"}
{"instruction":"Parse a US address and output the parsed components.","input":"Variables: address","output":"ParseAddressUS(address, \"title\")"}
{"instruction":"Calculate the number of periods in a loan with given rate, payment and present value.","input":"Variables: rate, payment, presentValue","output":"NumPeriods(rate, payment, presentValue)"}
{"instruction":"Compute the floor of a decimal number.","input":"Variable: num","output":"Floor(num)"}
{"instruction":"Create a new file with the current date and time in the filename.","input":"Variable: folderPath","output":"CreateDateTime(folderPath + \"\\\\\" + DateTime.Now.ToString(\"yyyyMMdd_HHmmss\") + \".txt\")"}
{"instruction":"Delete a file with the given filename.","input":"Variable: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: str, fromCodePage, toCodePage","output":"ConvertEncoding(str, fromCodePage, toCodePage)"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, periods, payment, presentValue","output":"FV(rate, periods, payment, presentValue)"}
{"instruction":"Read the first line of a text file.","input":"Variable: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Calculate the monthly payment of a loan with given parameters.","input":"Variables: rate, periods, presentValue","output":"Pmt(rate / 12, periods, presentValue)"}
{"instruction":"Move a file from one location to another.","input":"Variables: sourceFilePath, destFilePath","output":"MoveFile(sourceFilePath, destFilePath)"}
{"instruction":"Convert a string to bytes.","input":"Variable: str","output":"ToBytes(str, \"UTF-8\")"}
{"instruction":"Calculate the soundex encoding of a given string.","input":"Variable: name","output":"Soundex(name)"}
{"instruction":"Check if a specified directory exists.","input":"Variable: filePath","output":"DirectoryExists(filePath)"}
{"instruction":"Compute the refined soundex encoding of a given string.","input":"Variable: name","output":"RefinedSoundex(name)"}
{"instruction":"Calculate the number of days in a given timespan.","input":"Variable: timespan","output":"TotalDays(timespan)"}
{"instruction":"Convert a string to its URL-encoded form.","input":"Variables: url","output":"UrlEncode(url)"}
{"instruction":"Calculate the total number of days in a given timespan.","input":"Variables: start_date, end_date","output":"Days(TimeSpanFromTicks(Subtract(end_date, start_date))))"}
{"instruction":"Calculate the decimal value of a given real number rounded to the nearest hundredth.","input":"Variables: num","output":"Round(num, 2)"}
{"instruction":"Convert a given string from a specified encoding to another.","input":"Variables: text, from_encoding, to_encoding","output":"ConvertEncoding(text, from_encoding, to_encoding)"}
{"instruction":"Compute the SHA-256 hash of a given string.","input":"Variables: text","output":"ComputeSHA256(text)"}
{"instruction":"Retrieve the name of a file without its extension.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Calculate the total number of seconds in a given timespan.","input":"Variables: timespan","output":"TotalSeconds(timespan)"}
{"instruction":"Compute the double metaphone encoding of a given string.","input":"Variables: text","output":"DoubleMetaphone(text)"}
{"instruction":"Calculate the refined soundex encoding of a given string.","input":"Variables: text","output":"RefinedSoundex(text)"}
{"instruction":"Determine whether a specified process is currently running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Calculate the number of whole periods in a loan given the interest rate, payment amount, and present value.","input":"Variables: rate, pmt, pv","output":"NumPeriods(rate, pmt, pv)"}
{"instruction":"Compute the Payment (PMT) for a loan given the interest rate, number of periods, and present value.","input":"Variables: rate, nper, pv","output":"Pmt(rate, nper, pv)"}
{"instruction":"Retrieve the extension of a given file.","input":"Variables: file_path","output":"GetFileExtension(file_path)"}
{"instruction":"Calculate the average of two given decimal numbers.","input":"Variables: num1, num2","output":"(num1 + num2) / 2"}
{"instruction":"Retrieve the first line of a given file.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Compute the soundex encoding of a given string.","input":"Variables: text","output":"Soundex(text)"}
{"instruction":"Calculate the present value of a loan given the interest rate, payment amount, and number of periods.","input":"Variables: rate, pmt, nper","output":"PV(rate, pmt, nper)"}
{"instruction":"Copy a file to a specified destination, potentially overwriting an existing file.","input":"Variables: source_path, dest_path, overwrite","output":"CopyFile(source_path, dest_path, overwrite)"}
{"instruction":"Delete a specified file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the DDB depreciation of an asset given its cost, salvage value, and life.","input":"Variables: cost, salvage, life","output":"DDB(cost, salvage, life, 1)"}
{"instruction":"Calculate the future value of an annuity given the interest rate, number of periods, payment amount, and present value.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Parse a US address into its individual components.","input":"Variables: full_address","output":"ParseAddressUS(full_address, \"\")"}
{"instruction":"Determine whether a specified US directory exists.","input":"Variables: dir_path","output":"DirectoryExists(dir_path)"}
{"instruction":"Convert a string to uppercase.","input":"Variable: text","output":"Upper(text)"}
{"instruction":"Round a decimal to the nearest whole number.","input":"Variable: decimalNumber","output":"Round(decimalNumber)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variable: inputString","output":"ComputeSHA256(inputString)"}
{"instruction":"Check if a file exists.","input":"Constant: filePath","output":"FileExists(filePath)"}
{"instruction":"Get the length of a file.","input":"Constant: filePath","output":"FileLength(filePath)"}
{"instruction":"Get the last update date of a file.","input":"Constant: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Copy a file to another location.","input":"Constants: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, false)"}
{"instruction":"Delete a file.","input":"Constant: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Parse and correct a US address.","input":"Variables: address, city, state, zip","output":"ParseAndCorrectAddressUS(address + \", \" + city + \", \" + state + \", \" + zip)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variable: inputString","output":"DoubleMetaphone(inputString)"}
{"instruction":"Compute the refined soundex of a string.","input":"Variable: inputString","output":"RefinedSoundex(inputString)"}
{"instruction":"Check if a process is running.","input":"Constant: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Terminate a process.","input":"Constant: processName","output":"TerminateProcess(processName)"}
{"instruction":"Compute the absolute value of a decimal.","input":"Variable: decimalNumber","output":"Abs(decimalNumber)"}
{"instruction":"Compute the ceiling of a decimal.","input":"Variable: decimalNumber","output":"Ceiling(decimalNumber)"}
{"instruction":"Compute the floor of a decimal.","input":"Variable: decimalNumber","output":"Floor(decimalNumber)"}
{"instruction":"Generate a random real number between two integers.","input":"Constants: min, max","output":"RandomReal(min, max)"}
{"instruction":"Convert a string to bytes.","input":"Variable: inputString","output":"ToBytes(inputString, \"UTF-8\")"}
{"instruction":"Convert bytes to a string.","input":"Variable: byteArray","output":"FromBytes(byteArray, \"UTF-8\")"}
{"instruction":"Encode a string for use in a URL.","input":"Variable: inputString","output":"UrlEncode(inputString)"}
{"instruction":"Decode a URL-encoded string.","input":"Variable: inputString","output":"UrlDecode(inputString)"}
{"instruction":"Compute the total number of days in a TimeSpan.","input":"Variable: timeSpan","output":"TotalDays(timeSpan)"}
{"instruction":"Compute the total number of hours in a TimeSpan.","input":"Variable: timeSpan","output":"TotalHours(timeSpan)"}
{"instruction":"Calculate the total number of days in a given timespan.","input":"Variables: start_date, end_date","output":"Days(end_date - start_date)"}
{"instruction":"Convert a string to uppercase and then hash it using SHA256 algorithm with a given key.","input":"Variables: input_string, key","output":"ComputeSHA256(Upper(input_string), key)"}
{"instruction":"Round a decimal number to the nearest whole number.","input":"Variables: decimal_num","output":"Round(decimal_num)"}
{"instruction":"Compute the soundex code for a given string.","input":"Variables: input_string","output":"Soundex(input_string)"}
{"instruction":"Compute the Refined Soundex code for a given string.","input":"Variables: input_string","output":"RefinedSoundex(input_string)"}
{"instruction":"Calculate the total number of minutes in a given timespan.","input":"Variables: start_time, end_time","output":"Minutes(end_time - start_time)"}
{"instruction":"Find the maximum value between two given dates.","input":"Variables: date1, date2","output":"Max(date1, date2)"}
{"instruction":"Compute the hash of a string using a given key and convert it to hexadecimal format.","input":"Variables: input_string, key","output":"ComputeHash(input_string, key, True)"}
{"instruction":"Calculate the total number of ticks in a given timespan.","input":"Variables: start_time, end_time","output":"Ticks(end_time - start_time)"}
{"instruction":"Convert a string to a different encoding using a given code page.","input":"Variables: input_string, code_page","output":"ConvertEncoding(input_string, code_page)"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Calculate the total number of hours in a given timespan.","input":"Variables: start_time, end_time","output":"Hours(end_time - start_time)"}
{"instruction":"Calculate the present value of an investment.","input":"Variables: rate, pmt, pv","output":"PV(rate, pmt, pv)"}
{"instruction":"Calculate the depreciation of an asset using Double Declining Balance method.","input":"Variables: cost, salvage, life, period","output":"DDB(cost, salvage, life, period)"}
{"instruction":"Calculate the total number of seconds in a given timespan.","input":"Variables: start_time, end_time","output":"TotalSeconds(end_time - start_time)"}
{"instruction":"Round a real number to a given number of decimal places.","input":"Variables: real_num, decimal_places","output":"Round(real_num, decimal_places)"}
{"instruction":"Calculate the total number of milliseconds in a given timespan.","input":"Variables: start_time, end_time","output":"TotalMilliseconds(end_time - start_time)"}
{"instruction":"Calculate the interest payment on a loan for a specific period.","input":"Variables: rate, periods, num_periods, pv","output":"IPmt(rate, periods, num_periods, pv)"}
{"instruction":"Calculate the number of compounding periods for an investment.","input":"Variables: rate, pmt, pv","output":"NumPeriods(rate, pmt, pv)"}
{"instruction":"Determine if a specific process is running on the system.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Copy a file from one location to another location.","input":"Variables: source_file, destination_file, overwrite","output":"CopyFile(source_file, destination_file, overwrite)"}
{"instruction":"Parse a full US address into its components.","input":"Variables: full_address","output":"ParseAddressUS(full_address, \"TitleCase\")"}
{"instruction":"Delete a file from the system.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Convert a string to URL encoded format.","input":"Variable: url","output":"UrlEncode(url)"}
{"instruction":"Calculate the total number of seconds in 5 hours and 30 minutes.","input":"","output":"TotalSeconds(ToTimeSpan(0, 5, 30))"}
{"instruction":"Convert a text file from one encoding to another.","input":"Variables: filePath, fromCodePage","output":"ConvertEncoding(ReadFileText(filePath), fromCodePage)"}
{"instruction":"Find the maximum value between two decimal numbers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Append a text to a file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variable: str","output":"ComputeSHA256(str)"}
{"instruction":"Calculate the number of milliseconds in 10 seconds.","input":"","output":"TotalMilliseconds(ToTimeSpan(0, 0, 10))"}
{"instruction":"Check if a file exists.","input":"Variable: filePath","output":"FileExists(filePath)"}
{"instruction":"Calculate the Payment amount for a loan.","input":"Variables: rate, nper, pv","output":"Pmt(rate, nper, pv)"}
{"instruction":"Calculate the FV of a loan.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Calculate the number of periods in a loan.","input":"Variables: rate, pmt, pv","output":"NumPeriods(rate, pmt, pv)"}
{"instruction":"Copy a file from source to destination.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, true)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variable: str","output":"ComputeMD5(str)"}
{"instruction":"Calculate the number of hours in a timespan of 2 days and 5 hours.","input":"","output":"TotalHours(ToTimeSpan(2, 5, 0, 0))"}
{"instruction":"Check if a directory exists.","input":"Variable: filePath","output":"DirectoryExists(filePath)"}
{"instruction":"Calculate the PV of a loan.","input":"Variables: rate, nper, pmt","output":"PV(rate, nper, pmt)"}
{"instruction":"Calculate the IPMT of a loan.","input":"Variables: rate, periods, numPeriods, PV, FV","output":"IPmt(rate, periods, numPeriods, PV, FV)"}
{"instruction":"Calculate the SYD of a loan.","input":"Variables: cost, salvage, life, period","output":"SYD(cost, salvage, life, period)"}
{"instruction":"Delete a file.","input":"Variable: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Find the minimum value between two decimal numbers.","input":"Variables: num1, num2","output":"Min(num1, num2)"}
{"instruction":"Read the first line of a text file.","input":"Variable: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Calculate the random real number between 1 and 100.","input":"","output":"RandomReal(1, 100)"}
{"instruction":"Calculate the SLN of a loan.","input":"Variables: cost, salvage, life","output":"SLN(cost, salvage, life)"}
{"instruction":"Find the average of a list of numbers.","input":"Variables: numbers","output":"Average(numbers)"}
{"instruction":"Round a number to the nearest whole number.","input":"Variables: num","output":"Round(num)"}
{"instruction":"Parse a US address and return the street address in title case.","input":"Variables: address","output":"ParseAddressUS(address, \"TitleCase\").Street"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: str","output":"ComputeSHA256(str)"}
{"instruction":"Find the larger value of two dates.","input":"Variables: date1, date2","output":"Max(date1, date2)"}
{"instruction":"Convert a string to a different encoding.","input":"Variables: str, fromCodePage, toCodePage","output":"ConvertEncoding(str, fromCodePage, toCodePage)"}
{"instruction":"Calculate the number of days in a given timespan.","input":"Variables: timeSpan","output":"Days(timeSpan)"}
{"instruction":"Check if a directory exists.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Compute the soundex value of a string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Compute the double metaphone value of a string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Append text to a file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Compute the refined soundex value of a string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Calculate the number of ticks in a given timespan.","input":"Variables: timeSpan","output":"Ticks(timeSpan)"}
{"instruction":"Copy a file from a source to a destination folder.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Create a new DateTime object from a given file path.","input":"Variables: filePath","output":"CreateDateTime(filePath)"}
{"instruction":"Delete a file at a given file path.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Compute a hash value of a string with a given key.","input":"Variables: str, key, hex","output":"ComputeHash(str, key, hex)"}
{"instruction":"Check if a file exists at a given file path.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Compute the length of a file in bytes at a given file path.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Move a file from a given file path to a new file path.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Read the first line of a file at a given file path.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Read text from a file at a given file path.","input":"Variables: filePath","output":"ReadFileText(filePath)"}
{"instruction":"Write text to a file at a given file path.","input":"Variables: filePath, text","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Calculate the sum of two integers.","input":"Variables: int1, int2","output":"int1 + int2"}
{"instruction":"Find the maximum of two decimal numbers.","input":"Variables: decimal1, decimal2","output":"Max(decimal1, decimal2)"}
{"instruction":"Round a decimal number to the nearest whole number.","input":"Variables: decimalNum","output":"Round(decimalNum)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: str","output":"ComputeSHA256(str)"}
{"instruction":"Convert an encoded string to bytes.","input":"Variables: encodedStr, codePage","output":"FromBytes(ToBytes(encodedStr, codePage), codePage)"}
{"instruction":"Compute the soundex of a string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Check if a file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Read the first line of a text file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Calculate the floor of a real number.","input":"Variables: realNum","output":"Floor(realNum)"}
{"instruction":"Compute the total number of seconds in a time span.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Find the minimum date between two dates.","input":"Variables: date1, date2","output":"Min(date1, date2)"}
{"instruction":"Compute the total number of days in a time span.","input":"Variables: timeSpan","output":"TotalDays(timeSpan)"}
{"instruction":"Calculate the Power of a real base raised to a real exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Calculate the number of periods for a loan with given values.","input":"Variables: rate, Pmt, PV, FV","output":"NumPeriods(rate, Pmt, PV, FV)"}
{"instruction":"Delete a file.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Generate the double metaphone of a string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: str","output":"ComputeMD5(str)"}
{"instruction":"Compute the number of ticks in a time span.","input":"Variables: timeSpan","output":"Ticks(timeSpan)"}
{"instruction":"Get the file properties of a file.","input":"Variables: filePath","output":"GetFileInfo(filePath)"}
{"instruction":"Calculate the present value of a loan with given values.","input":"Variables: rate, Pmt, PV, FV","output":"PV(rate, Pmt, PV, FV)"}
{"instruction":"Compute the refined soundex of a string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Append text to a file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Calculate the total cost of 5 items, each priced at $10.99.","input":"Variables: item_price=10.99, quantity=5","output":"item_price * quantity"}
{"instruction":"Round the number 3.1416 to 2 decimal places.","input":"num=3.1416","output":"Round(num, 2)"}
{"instruction":"Convert \"hello world\" to uppercase.","input":"str=\"hello world\"","output":"str.ToUpper()"}
{"instruction":"Compute the SHA256 hash of \"password\" using the key \"12345\".","input":"str=\"password\", key=\"12345\"","output":"ComputeSHA256(str, key)"}
{"instruction":"Determine the length of a text file.","input":"file_path=\"C:\\example\\file.txt\"","output":"FileLength(file_path)"}
{"instruction":"Get the file extension of \"example.jpg\".","input":"file_name=\"example.jpg\"","output":"GetFileExtension(file_name)"}
{"instruction":"Move \"File1.txt\" to \"Folder\".","input":"source_path=\"File1.txt\", dest_path=\"Folder\\File1.txt\"","output":"MoveFile(source_path, dest_path)"}
{"instruction":"Get the first worksheet of \"example.xlsx\".","input":"file_path=\"C:\\example\\example.xlsx\"","output":"GetExcelWorksheets(file_path)[0]"}
{"instruction":"Compute the total number of ticks of a TimeSpan object representing 5 days, 12 hours, 30 minutes, and 15 seconds.","input":"days=5, hours=12, minutes=30, seconds=15","output":"Ticks(ToTimeSpan(days, hours, minutes, seconds))"}
{"instruction":"Encode the string \"hello world\" for use in a URL.","input":"str=\"hello world\"","output":"UrlEncode(str)"}
{"instruction":"Convert the string \"example\" to bytes using the code page \"UTF-8\".","input":"str=\"example\", code_page=\"UTF-8\"","output":"ToBytes(str, code_page)"}
{"instruction":"Compute the difference between two dates: January 1st, 2022 and January 1st, 2021.","input":"date1=\"01/01/2022\", date2=\"01/01/2021\"","output":"Days(Max(date1, date2)) - Days(Min(date1, date2))"}
{"instruction":"Create a new text file \"example.txt\" and write the string \"hello world\" to it.","input":"file_path=\"C:\\example\\example.txt\", text=\"hello world\"","output":"WriteTextToFile(file_path, text)"}
{"instruction":"Delete the file \"example.txt\".","input":"file_path=\"C:\\example\\example.txt\"","output":"DeleteFile(file_path)"}
{"instruction":"Compute the minimum value between the Decimal 10.5 and the Double 7.2.","input":"num1=10.5, num2=7.2","output":"Min(num1, num2)"}
{"instruction":"Compute the refined soundex of the string \"example\".","input":"str=\"example\"","output":"RefinedSoundex(str)"}
{"instruction":"Parse the US address \"123 Main St, Anytown, CA 12345\" and output the result in title case.","input":"address_string=\"123 Main St, Anytown, CA 12345\", output_case=\"Title\"","output":"ParseAddressUS(address_string, output_case)"}
{"instruction":"Compute the present value of an investment with a rate of 5%, 10 payments of $200, and a future value of $5000.","input":"rate=0.05, nper=10, pmt=-200, fv=5000","output":"PV(rate, nper, pmt, fv)"}
{"instruction":"Determine if the process \"notepad.exe\" is currently running.","input":"process_name=\"notepad.exe\"","output":"IsProcessRunning(process_name)"}
{"instruction":"Compute the number of periods required for an investment at 10% with monthly payments of $1000 and a present value of $50000.","input":"rate=0.1, pmt=-1000, pv=50000","output":"NumPeriods(rate/12, pmt, pv)"}
{"instruction":"Parse the name \"John Doe\" and output the result as a NameComponents object.","input":"name=\"John Doe\"","output":"ParseNameEx(name)"}
{"instruction":"Append the string \"hello world\" to the end of \"example.txt\".","input":"file_path=\"C:\\example\\example.txt\", text=\"hello world\"","output":"AppendTextToFile(file_path, text)"}
{"instruction":"Calculate the double-declining balance depreciation for an asset with a cost of $10,000, a salvage value of $1,000, a life of 5 years, and it is in its 3rd year.","input":"cost=10000, salvage=1000, life=5, period=3","output":"DDB(cost, salvage, life, period)"}
{"instruction":"Convert a string to capitalized case.","input":"Variables: text","output":"ToCapitalized(text)"}
{"instruction":"Round a decimal number to 2 decimal places.","input":"Variables: cost","output":"Round(cost, 2)"}
{"instruction":"Get the total number of minutes in a given time span.","input":"Variables: timeSpan","output":"TotalMinutes(timeSpan)"}
{"instruction":"Check if a file exists at a given file path.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Compute the FV (future value) of an investment.","input":"Variables: rate, nPer, pmt, PV","output":"FV(rate, nPer, pmt, PV)"}
{"instruction":"Compute the soundex of a given string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Convert a string to UTF-8 encoding.","input":"Variables: text","output":"ConvertEncoding(text, \"UTF-8\")"}
{"instruction":"Calculate the number of days in a given time span.","input":"Variables: timeSpan","output":"TotalDays(timeSpan)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: str","output":"ComputeSHA256(str)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Add text to a file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Move a file from one location to another.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Parse a US address and output it in title case.","input":"Variables: fullAddress, outputCase","output":"ParseAddressUS(fullAddress, outputCase)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: str","output":"ComputeMD5(str)"}
{"instruction":"Calculate the number of years in a given time span.","input":"Variables: timeSpan","output":"TotalDays(timeSpan) / 365"}
{"instruction":"Calculate the IPMT (interest payment) for a given period in a loan.","input":"Variables: rate, periods, numPeriods, PV","output":"IPmt(rate, periods, numPeriods, PV)"}
{"instruction":"Create a new file with the current date-time in the file name.","input":"Variables: none","output":"CreateDateTime(\"new_file.txt\")"}
{"instruction":"Check if a directory exists at a given file path.","input":"Variables: filePath","output":"DirectoryExists(filePath)"}
{"instruction":"Calculate the PV (present value) of an investment.","input":"Variables: rate, nPer, pmt","output":"PV(rate, nPer, pmt)"}
{"instruction":"Copy a file from one location to another, overwriting if necessary.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, true)"}
{"instruction":"Compute the double metaphone of a given string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Compute the rate of return for an investment given the number of periods, payment and present value.","input":"Variables: numPeriods, pmt, PV","output":"Rate(numPeriods, pmt, PV)"}
{"instruction":"Parse a string and correct any errors in a US address.","input":"Variables: input","output":"ParseAndCorrectAddressUS(input)"}
{"instruction":"Parse and correct an address: 123 Main St, Apt 4A, New York, NY 10001","input":"address = \"123 Main St, Apt 4A, New York, NY 10001\"","output":"ParseAndCorrectAddressUS(address)"}
{"instruction":"Get the name components from \"Ms. Jane Doe\"","input":"name = \"Ms. Jane Doe\"","output":"ParseNameEx(name)"}
{"instruction":"Compute the SHA256 hash of \"Hello, World!\"","input":"text = \"Hello, World!\"","output":"ComputeSHA256(text)"}
{"instruction":"Get the file extension for \"example.docx\"","input":"filePath = \"example.docx\"","output":"GetFileExtension(filePath)"}
{"instruction":"Get the length of \"example.docx\" in bytes","input":"filePath = \"example.docx\"","output":"FileLength(filePath)"}
{"instruction":"Get the name of the file without extension from \"example.docx\"","input":"filePath = \"example.docx\"","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Convert \"Hello, World!\" from UTF-8 to ISO-8859-1","input":"text = \"Hello, World!\"","output":"ConvertEncoding(text, \"ISO-8859-1\")"}
{"instruction":"Read the first line of \"example.txt\"","input":"filePath = \"example.txt\"","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Write \"Hello, World!\" to \"example.txt\"","input":"filePath = \"example.txt\", text = \"Hello, World!\"","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Round 3.14159 to 2 decimal places","input":"number = 3.14159","output":"Round(number, 2)"}
{"instruction":"Compute the MD5 hash of \"password123\"","input":"text = \"password123\"","output":"ComputeMD5(text)"}
{"instruction":"Copy \"example.txt\" to \"example2.txt\"","input":"sourceFilePath = \"example.txt\", destFilePath = \"example2.txt\"","output":"CopyFile(sourceFilePath, destFilePath, false)"}
{"instruction":"Delete \"example.txt\"","input":"filePath = \"example.txt\"","output":"DeleteFile(filePath)"}
{"instruction":"Move \"example.txt\" to \"documents/example.txt\"","input":"filePath = \"example.txt\", newFilePath = \"documents/example.txt\"","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Compute the double metaphone of \"Smith\"","input":"str = \"Smith\"","output":"DoubleMetaphone(str)"}
{"instruction":"Search for a running process named \"chrome.exe\"","input":"processName = \"chrome.exe\"","output":"IsProcessRunning(processName)"}
{"instruction":"Terminate the process named \"notepad.exe\"","input":"processName = \"notepad.exe\"","output":"TerminateProcess(processName)"}
{"instruction":"Calculate the future value of an investment with a present value of $1000, a rate of 5%, and a term of 10 years","input":"PV = 1000, rate = 0.05, NPer = 10","output":"FV(rate, NPer, 0, PV)"}
{"instruction":"Calculate the monthly payment for a loan with a principal of $10,000, an interest rate of 4%, and a term of 5 years","input":"PV = 10000, rate = 0.04, NPer = 60","output":"Pmt(rate/12, NPer, PV)"}
{"instruction":"Calculate the number of months it will take to pay off a loan with a principal of $10,000, an interest rate of 4%, and a monthly payment of $200","input":"PV = 10000, rate = 0.04, Pmt = -200","output":"-NumPeriods(rate/12, Pmt, PV)"}
{"instruction":"Calculate the SLN depreciation for an asset with a cost of $10,000, a salvage value of $1000, and a life of 5 years","input":"Cost = 10000, Salvage = 1000, Life = 5","output":"SLN(Cost, Salvage, Life)"}
{"instruction":"Calculate the SYD depreciation for an asset with a cost of $10,000, a salvage value of $1000, a life of 5 years, and a period of 3 years","input":"Cost = 10000, Salvage = 1000, Life = 5, Period = 3","output":"SYD(Cost, Salvage, Life, Period)"}
{"instruction":"Get the directory of \"example.docx\"","input":"filePath = \"example.docx\"","output":"GetDirectory(filePath)"}
{"instruction":"Concatenate first name and last name with a space in between.","input":"Variables: first_name, last_name","output":"Concat(first_name, \" \", last_name)"}
{"instruction":"Calculate the PV of a loan with given rate, payment, and amount.","input":"Variables: rate, payment, amount","output":"PV(rate, payment, amount)"}
{"instruction":"Convert a string to uppercase.","input":"Variables: string_to_convert","output":"Upper(string_to_convert)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: start_date, end_date","output":"Days(Max(start_date, end_date), Min(start_date, end_date))"}
{"instruction":"Encode a URL.","input":"Variables: url_to_encode","output":"UrlEncode(url_to_encode)"}
{"instruction":"Decode a URL.","input":"Variables: url_to_decode","output":"UrlDecode(url_to_decode)"}
{"instruction":"Compute the SHA256 hash of a string with a given key.","input":"Variables: string_to_hash, hash_key","output":"ComputeSHA256(string_to_hash, hash_key)"}
{"instruction":"Get the file extension of a given file path.","input":"Variables: file_path","output":"GetFileExtension(file_path)"}
{"instruction":"Check if a file exists with the given file path.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Delete a file with the given file path.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Copy a file from a source file path to a destination file path, overwriting if necessary.","input":"Variables: source_file_path, destination_file_path","output":"CopyFile(source_file_path, destination_file_path, true)"}
{"instruction":"Move a file from the given file path to a new file path.","input":"Variables: file_path, new_file_path","output":"MoveFile(file_path, new_file_path)"}
{"instruction":"Get the first line of a text file with the given file path.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Get the number of lines in a text file with the given file path.","input":"Variables: file_path","output":"FileLineCount(file_path)"}
{"instruction":"Append text to the end of a text file with the given file path.","input":"Variables: file_path, text_to_append","output":"AppendTextToFile(file_path, text_to_append)"}
{"instruction":"Get the directory of a file with the given file path.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Get the last update date and time of a file with the given file path.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Read the contents of a text file with the given file path.","input":"Variables: file_path","output":"ReadFileText(file_path)"}
{"instruction":"Write a given text to a file with the given file path.","input":"Variables: file_path, text_to_write","output":"WriteTextToFile(file_path, text_to_write)"}
{"instruction":"Calculate the number of periods for a loan with given rate, payment, and amount.","input":"Variables: rate, payment, amount","output":"NumPeriods(rate, payment, amount)"}
{"instruction":"Calculate the present value of a loan with given rate, payment, and amount, as well as a future value.","input":"Variables: rate, payment, amount, future_value","output":"PV(rate, payment, amount, future_value)"}
{"instruction":"Parse the street, city, state, and zip code from a full address string.","input":"Variables: full_address_string","output":"ParseAddressUS(full_address_string, \"Parsed Address\")"}
{"instruction":"Calculate the soundex code for a given string.","input":"Variables: string_to_encode","output":"Soundex(string_to_encode)"}
{"instruction":"Convert text to title case.","input":"Variables: text","output":"ConvertCase(text, \"Title Case\")"}
{"instruction":"Compute the SHA256 hash of a text string.","input":"Variables: text, key","output":"ComputeSHA256(text, key, false)"}
{"instruction":"Calculate the future value of a series of payments.","input":"Variables: rate, num_periods, pmt, pv","output":"FV(rate, num_periods, pmt, pv)"}
{"instruction":"Round a decimal number to 2 decimal places.","input":"Variables: amount","output":"Round(amount, 2)"}
{"instruction":"Move a file from one location to another.","input":"Variables: source_file_path, destination_file_path","output":"MoveFile(source_file_path, destination_file_path)"}
{"instruction":"Convert a string to uppercase.","input":"Variables: text","output":"ConvertCase(text, \"Upper Case\")"}
{"instruction":"Compute the soundex code for a given string.","input":"Variables: text","output":"Soundex(text)"}
{"instruction":"Check if a specific process is running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: start_date, end_date","output":"Days(Max(start_date, end_date), Min(start_date, end_date))"}
{"instruction":"Parse and correct a US address.","input":"Variables: address_text","output":"ParseAndCorrectAddressUS(address_text)"}
{"instruction":"Compute the refined soundex code for a given string.","input":"Variables: text","output":"RefinedSoundex(text)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: source_file_path, destination_file_path, overwrite","output":"CopyFile(source_file_path, destination_file_path, overwrite)"}
{"instruction":"Check if a directory exists.","input":"Variables: directory_path","output":"DirectoryExists(directory_path)"}
{"instruction":"Compute the double metaphone code for a given string.","input":"Variables: text","output":"DoubleMetaphone(text)"}
{"instruction":"Delete a file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the total number of seconds in a TimeSpan.","input":"Variables: time_span","output":"TotalSeconds(time_span)"}
{"instruction":"Compute the sum of two decimal numbers.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Compute the minimum value between two dates.","input":"Variables: date1, date2","output":"Min(date1, date2)"}
{"instruction":"Read the contents of a file as text.","input":"Variables: file_path","output":"ReadFileText(file_path)"}
{"instruction":"Compute the difference between two TimeSpan values in minutes.","input":"Variables: time_span1, time_span2","output":"Floor(TotalMinutes(Max(time_span1, time_span2) - Min(time_span1, time_span2)))"}
{"instruction":"Calculate the fixed-declining balance (DDB) of an asset over a given period.","input":"Variables: cost, salvage, life, period","output":"DDB(cost, salvage, life, period)"}
{"instruction":"Compute the natural logarithm of a real number.","input":"Variables: num","output":"Log(num)"}
{"instruction":"Determine the number of lines in a text file.","input":"Variables: file_path","output":"FileLineCount(file_path)"}
{"instruction":"Compute the SHA256 hash for the text \"Hello, world!\".","input":"\"Hello, world!\"","output":"ComputeSHA256(\"Hello, world!\")"}
{"instruction":"Convert the text \"Bonjour\" from French encoding to UTF-8 encoding.","input":"\"Bonjour\"","output":"ConvertEncoding(\"Bonjour\", \"iso-8859-1\", \"utf-8\")"}
{"instruction":"Get the length of a file named \"example.txt\".","input":"\"example.txt\"","output":"FileLength(\"example.txt\")"}
{"instruction":"Round the number 3.14159 to 2 decimal places.","input":"3.14159","output":"Round(3.14159, 2)"}
{"instruction":"Calculate the present value of a payment of $1000 every year for 10 years with a 5% interest rate.","input":"Payment=1000, NumberOfPayments=10, InterestRate=0.05","output":"PV(0.05, 1000, 0, 10)"}
{"instruction":"Get the file extension for a file named \"example.docx\".","input":"\"example.docx\"","output":"GetFileExtension(\"example.docx\")"}
{"instruction":"Get the refined soundex code for the name \"John Smith\".","input":"\"John Smith\"","output":"RefinedSoundex(\"John Smith\")"}
{"instruction":"Compute the cosine of 45 degrees.","input":"Angle=45","output":"Cos(Radians(45))"}
{"instruction":"Get the first worksheet name of an Excel file named \"example.xls\".","input":"\"example.xls\"","output":"GetExcelWorksheets(\"example.xls\")[0]"}
{"instruction":"Get the ASCII code for the character 'A'.","input":"Character='A'","output":"Asc(\"A\")"}
{"instruction":"Get the maximum of two dates, \"2021-01-01\" and \"2022-01-01\".","input":"Date1=\"2021-01-01\", Date2=\"2022-01-01\"","output":"Max(Date(\"2021-01-01\"), Date(\"2022-01-01\"))"}
{"instruction":"Convert the text \"hello\" to URL encoding.","input":"\"hello\"","output":"UrlEncode(\"hello\")"}
{"instruction":"Calculate the number of days between two dates, \"2021-01-01\" and \"2022-01-01\".","input":"Date1=\"2021-01-01\", Date2=\"2022-01-01\"","output":"Days(DateDiff(Date(\"2021-01-01\"), Date(\"2022-01-01\")))"}
{"instruction":"Copy a file named \"example.txt\" to a new location named \"new_example.txt\".","input":"SourceFile=\"example.txt\", DestinationFile=\"new_example.txt\", Overwrite=True","output":"CopyFile(\"example.txt\", \"new_example.txt\", True)"}
{"instruction":"Get the file name from a file path \"C:\\Users\\John\\Documents\\example.docx\".","input":"FilePath=\"C:\\Users\\John\\Documents\\example.docx\"","output":"GetFileName(\"C:\\Users\\John\\Documents\\example.docx\")"}
{"instruction":"Terminate a process named \"chrome.exe\".","input":"ProcessName=\"chrome.exe\"","output":"TerminateProcess(\"chrome.exe\")"}
{"instruction":"Calculate the future value of a payment of $1000 every year for 10 years with a 5% interest rate.","input":"Payment=1000, NumberOfPayments=10, InterestRate=0.05, PresentValue=0","output":"FV(0.05, 10, 1000, 0)"}
{"instruction":"Get the name components from the name \"John Smith Jr.\".","input":"\"John Smith Jr.\"","output":"ParseNameEx(\"John Smith Jr.\")"}
{"instruction":"Calculate the number of periods for a payment of $100 every month with a 5% interest rate and a present value of $10000.","input":"InterestRate=0.05, Payment=100, PresentValue=10000","output":"NumPeriods(0.05/12, 100, 10000)"}
{"instruction":"Delete a file named \"example.txt\".","input":"FilePath=\"example.txt\"","output":"DeleteFile(\"example.txt\")"}
{"instruction":"Convert the text \"hello\" from URL encoding.","input":"\"hello\"","output":"UrlDecode(\"hello\")"}
{"instruction":"Append the text \"world\" to the end of a file named \"example.txt\".","input":"FilePath=\"example.txt\", Text=\"world\"","output":"AppendTextToFile(\"example.txt\", \"world\")"}
{"instruction":"Calculate the cosine of 45 degrees using degrees input instead of radians.","input":"Angle=45","output":"Cos(DegreesToRadians(45))"}
{"instruction":"Calculate the sum of two decimal numbers.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variables: dec","output":"Round(dec)"}
{"instruction":"Convert a string to its double metaphone.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Concatenate two strings.","input":"Variables: str1, str2","output":"str1 + str2"}
{"instruction":"Get the name of a file.","input":"Variables: filePath","output":"GetFileName(filePath)"}
{"instruction":"Get the file extension of a file.","input":"Variables: filePath","output":"GetFileExtension(filePath)"}
{"instruction":"Check if a file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Calculate the refined soundex of a string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Check if a process is running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Calculate the number of seconds in a timespan.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Convert a string to its URL encoded form.","input":"Variables: str","output":"UrlEncode(str)"}
{"instruction":"Calculate the value of FV.","input":"Variables: rate, nPer, pmt, PV","output":"FV(rate, nPer, pmt, PV)"}
{"instruction":"Calculate the value of PV.","input":"Variables: rate, pmt, nPer, FV","output":"PV(rate, pmt, nPer, FV)"}
{"instruction":"Calculate the value of Pmt.","input":"Variables: rate, PV, nPer","output":"Pmt(rate, PV, nPer)"}
{"instruction":"Calculate the number of periods.","input":"Variables: rate, pmt, PV","output":"NumPeriods(rate, pmt, PV)"}
{"instruction":"Get the last update datetime of a file.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Calculate the SHA256 hash of a string.","input":"Variables: str","output":"ComputeSHA256(str)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: str, fromCodePage","output":"ConvertEncoding(str, fromCodePage)"}
{"instruction":"Get the length of a file.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Calculate the number of ticks in a timespan.","input":"Variables: timeSpan","output":"Ticks(timeSpan)"}
{"instruction":"Copy a file to a new location.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: str","output":"ComputeMD5(str)"}
{"instruction":"Get the directory of a file.","input":"Variables: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Convert a string to lowercase.","input":"Variable: text","output":"ToLower(text)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variable: text","output":"ComputeSHA256(text)"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variable: num","output":"Round(num)"}
{"instruction":"Convert a string to uppercase.","input":"Variable: text","output":"ToUpper(text)"}
{"instruction":"Compute the refined soundex of a string.","input":"Variable: text","output":"RefinedSoundex(text)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variable: text","output":"DoubleMetaphone(text)"}
{"instruction":"Convert a string to a byte array.","input":"Variable: text","output":"ToBytes(text, \"UTF-8\")"}
{"instruction":"Convert an array of bytes to a string.","input":"Variable: bytes","output":"FromBytes(bytes, \"UTF-8\")"}
{"instruction":"Append text to a file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, false)"}
{"instruction":"Create a datetime from a given string.","input":"Variable: dateTimeStr","output":"CreateDateTime(dateTimeStr)"}
{"instruction":"Delete a file.","input":"Variable: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Check if a directory exists.","input":"Variable: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Check if a file exists.","input":"Variable: filePath","output":"FileExists(filePath)"}
{"instruction":"Get the length of a file.","input":"Variable: filePath","output":"FileLength(filePath)"}
{"instruction":"Get the number of lines in a file.","input":"Variable: filePath","output":"FileLineCount(filePath)"}
{"instruction":"Get the directory of a file.","input":"Variable: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Get the extension of a file.","input":"Variable: filePath","output":"GetFileExtension(filePath)"}
{"instruction":"Get the file info for a file.","input":"Variable: filePath","output":"GetFileInfo(filePath)"}
{"instruction":"Get the name of a file.","input":"Variable: filePath","output":"GetFileName(filePath)"}
{"instruction":"Get the name of a file without the extension.","input":"Variable: filePath","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Move a file from one location to another.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Replace the first line of a file with a given text.","input":"Variables: filePath, newLine","output":"Substring(ReadFileText(filePath), 0, Length(ReadFileFirstLine(filePath)))"}
{"instruction":"Calculate the area of a rectangle.","input":"Variables: length, width","output":"Multiply(length, width)"}
{"instruction":"Convert a string to upper case.","input":"Variables: text","output":"Upper(text)"}
{"instruction":"Calculate the total cost of a product by adding tax.","input":"Variables: price, tax","output":"Add(price, Multiply(price, Divide(tax, 100)))"}
{"instruction":"Round a decimal number to 2 decimal places.","input":"Variables: num","output":"Round(num, 2)"}
{"instruction":"Calculate the total number of seconds in a given time period.","input":"Variables: days, hours, minutes, seconds","output":"Add(Seconds(ToTimeSpan(days, hours, minutes, seconds)), Milliseconds(ToTimeSpan(days, hours, minutes, seconds)))"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: text, fromEncoding, toEncoding","output":"ConvertEncoding(text, fromEncoding, toEncoding)"}
{"instruction":"Calculate the sum of two decimal numbers.","input":"Variables: num1, num2","output":"Add(num1, num2)"}
{"instruction":"Calculate the difference between two dates in days.","input":"Variables: date1, date2","output":"Abs(TotalDays(Subtract(date1, date2)))"}
{"instruction":"Create a new file with given text.","input":"Variables: filePath, text","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Check if a directory exists.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Compute the SHA256 hash of a given string with a key.","input":"Variables: str, key","output":"ComputeHash(str, key, False)"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Calculate the total number of hours in a given time period.","input":"Variables: days, hours, minutes, seconds","output":"Add(Hours(ToTimeSpan(days, hours, minutes, seconds)), Milliseconds(ToTimeSpan(days, hours, minutes, seconds)))"}
{"instruction":"Calculate the present value of an investment.","input":"Variables: rate, nper, pmt, fv","output":"PV(rate, nper, pmt, fv)"}
{"instruction":"Calculate the number of periods for an investment.","input":"Variables: rate, pmt, pv","output":"NumPeriods(rate, pmt, pv)"}
{"instruction":"Create a new directory.","input":"Variables: directoryPath","output":"CreateDirectory(directoryPath)"}
{"instruction":"Calculate the sum of two integers.","input":"Variables: num1, num2","output":"Add(num1, num2)"}
{"instruction":"Calculate the difference between two dates in years.","input":"Variables: date1, date2","output":"Abs(Year(date1) - Year(date2))"}
{"instruction":"Parse and correct an address in the US.","input":"Variables: address","output":"ParseAndCorrectAddressUS(address)"}
{"instruction":"Check if a file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Combine two strings.","input":"Variables: str1, str2","output":"Concat(str1, str2)"}
{"instruction":"Find the minimum number between two real numbers.","input":"Variables: num1, num2","output":"Min(num1, num2)"}
{"instruction":"Check if a process is currently running on the system.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Get file length in bytes.","input":"File path: \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"FileLength(\"C:\\Users\\JohnDoe\\Documents\\example.txt\")"}
{"instruction":"Round a decimal number to the nearest whole number.","input":"Decimal number: 3.14159","output":"Round(3.14159)"}
{"instruction":"Convert a string to URL encoded format.","input":"String: \"Hello, world!\"","output":"UrlEncode(\"Hello, world!\")"}
{"instruction":"Compute the SHA256 hash of a string using a key.","input":"Key: \"secret\", String: \"This is a secret message.\"","output":"ComputeSHA256(\"This is a secret message.\", \"secret\")"}
{"instruction":"Convert a string to its byte representation.","input":"String: \"Hello, world!\"","output":"ToBytes(\"Hello, world!\", \"UTF-8\")"}
{"instruction":"Get the name of the file extension.","input":"File path: \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"GetFileExtension(\"C:\\Users\\JohnDoe\\Documents\\example.txt\")"}
{"instruction":"Get the number of lines in a file.","input":"File path: \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"FileLineCount(\"C:\\Users\\JohnDoe\\Documents\\example.txt\")"}
{"instruction":"Get the name of the file without its extension.","input":"File path: \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"GetFileNameWithoutExtension(\"C:\\Users\\JohnDoe\\Documents\\example.txt\")"}
{"instruction":"Compute the double metaphone of a string.","input":"String: \"Hello, world!\"","output":"DoubleMetaphone(\"Hello, world!\")"}
{"instruction":"Get the directory of a file.","input":"File path: \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"GetDirectory(\"C:\\Users\\JohnDoe\\Documents\\example.txt\")"}
{"instruction":"Move a file to a new location.","input":"File path: \"C:\\Users\\JohnDoe\\Documents\\example.txt\", New file path: \"C:\\Users\\JohnDoe\\Documents\\backup\\example.txt\"","output":"MoveFile(\"C:\\Users\\JohnDoe\\Documents\\example.txt\", \"C:\\Users\\JohnDoe\\Documents\\backup\\example.txt\")"}
{"instruction":"Compute the refined soundex of a string.","input":"String: \"Hello, world!\"","output":"RefinedSoundex(\"Hello, world!\")"}
{"instruction":"Get the worksheets in an Excel file.","input":"Excel file path: \"C:\\Users\\JohnDoe\\Documents\\example.xlsx\"","output":"GetExcelWorksheets(\"C:\\Users\\JohnDoe\\Documents\\example.xlsx\")"}
{"instruction":"Check if a process is running.","input":"Process name: \"chrome.exe\"","output":"IsProcessRunning(\"chrome.exe\")"}
{"instruction":"Append text to a file.","input":"File path: \"C:\\Users\\JohnDoe\\Documents\\example.txt\", Text: \"Hello, world!\"","output":"AppendTextToFile(\"C:\\Users\\JohnDoe\\Documents\\example.txt\", \"Hello, world!\")"}
{"instruction":"Convert a string from one encoding to another.","input":"String: \"Hello, world!\", From codepage: \"UTF-8\"","output":"ConvertEncoding(\"Hello, world!\", \"UTF-8\")"}
{"instruction":"Compute the DDB depreciation of an asset.","input":"Cost: 1000, Salvage: 100, Life: 10, Periods: 5","output":"DDB(1000, 100, 10, 5)"}
{"instruction":"Compute the FV of an investment.","input":"Rate: 0.05, NPer: 10, Pmt: -100, PV: -1000","output":"FV(0.05, 10, -100, -1000)"}
{"instruction":"Compute the IPmt of an investment.","input":"Rate: 0.05, Periods: 1, NumPeriods: 10, PV: -1000, FV: 0","output":"IPmt(0.05, 1, 10, -1000, 0)"}
{"instruction":"Compute the number of periods for an investment.","input":"Rate: 0.05, Pmt: -100, PV: -1000, FV: 0","output":"NumPeriods(0.05, -100, -1000, 0)"}
{"instruction":"Compute the Pmt for an investment.","input":"Rate: 0.05, PV: -1000, NPer: 10","output":"Pmt(0.05, -1000, 10)"}
{"instruction":"Compute the PPmt for an investment.","input":"Rate: 0.05, Periods: 1, NPer: 10, PV: -1000, FV: 0","output":"PPmt(0.05, 1, 10, -1000, 0)"}
{"instruction":"Compute the present value of an investment.","input":"Rate: 0.05, Pmt: -100, NPer: 10","output":"PV(0.05, -100, 0)"}
{"instruction":"Calculate total cost of an item after discount.","input":"Variables: price, discountPercentage","output":"price - (price * discountPercentage)"}
{"instruction":"Convert a string to its double metaphone representation.","input":"Variables: name","output":"DoubleMetaphone(name)"}
{"instruction":"Check if a specified process is running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: startDate, endDate","output":"Days(endDate - startDate)"}
{"instruction":"Compute the SHA-256 hash of a given string using a specified key.","input":"Variables: str, key","output":"ComputeSHA256(str, key)"}
{"instruction":"Calculate the total number of seconds in a given time span.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Get file information for a specified file path.","input":"Variables: filePath","output":"GetFileInfo(filePath)"}
{"instruction":"Compute the soundex code for a given string.","input":"Variables: name","output":"Soundex(name)"}
{"instruction":"Round a given decimal number to the nearest integer.","input":"Variables: number","output":"Round(number)"}
{"instruction":"Encode a given string for use in a URL.","input":"Variables: str","output":"UrlEncode(str)"}
{"instruction":"Calculate the number of months between two dates.","input":"Variables: startDate, endDate","output":"(endDate.Year - startDate.Year) * 12 + endDate.Month - startDate.Month"}
{"instruction":"Append a given text to a specified file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Calculate the total length of a given file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Convert a given string to a specified encoding.","input":"Variables: str, fromCodePage","output":"ConvertEncoding(str, fromCodePage)"}
{"instruction":"Check if a specified directory exists.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Get the last time a specified file was updated.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Round a given decimal number to the nearest tenth.","input":"Variables: number","output":"Round(number, 1)"}
{"instruction":"Calculate the number of ticks in a given time span.","input":"Variables: timeSpan","output":"Ticks(timeSpan)"}
{"instruction":"Combine two given strings into a specified file path.","input":"Variables: folderPath, fileName","output":"folderPath + \"/\" + fileName"}
{"instruction":"Calculate the power of a given base to a specified exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: str","output":"ComputeMD5(str)"}
{"instruction":"Check if a specified file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Copy a specified file to a specified location.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Convert a string to URL encoding.","input":"Variable: url","output":"UrlEncode(url)"}
{"instruction":"Get the length of a file.","input":"Variable: filePath","output":"FileLength(filePath)"}
{"instruction":"Get the file extension of a file.","input":"Variable: filePath","output":"GetFileExtension(filePath)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variable: stringToHash","output":"ComputeSHA256(stringToHash)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: originalString, fromEncoding, toEncoding","output":"ConvertEncoding(originalString, fromEncoding, toEncoding)"}
{"instruction":"Read the first line of a text file.","input":"Variable: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Get the last update date of a file.","input":"Variable: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variable: stringToHash","output":"ComputeMD5(stringToHash)"}
{"instruction":"Copy a file to a new location.","input":"Variables: sourceFilePath, destFilePath, overwrite","output":"CopyFile(sourceFilePath, destFilePath, overwrite)"}
{"instruction":"Delete a file.","input":"Variable: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Append text to the end of a file.","input":"Variables: filePath, textToAppend","output":"AppendTextToFile(filePath, textToAppend)"}
{"instruction":"Round a decimal number to a specific number of decimal places.","input":"Variables: decimalNumber, numDecimalPlaces","output":"Round(decimalNumber, numDecimalPlaces)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variable: stringToEncode","output":"DoubleMetaphone(stringToEncode)"}
{"instruction":"Compute the refined soundex of a string.","input":"Variable: stringToEncode","output":"RefinedSoundex(stringToEncode)"}
{"instruction":"Compute the soundex of a string.","input":"Variable: stringToEncode","output":"Soundex(stringToEncode)"}
{"instruction":"Check if a process is running.","input":"Variable: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Terminate a running process.","input":"Variable: processName","output":"TerminateProcess(processName)"}
{"instruction":"Get the name of a file without its extension.","input":"Variable: filePath","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Read the contents of a file as a string.","input":"Variable: filePath","output":"ReadFileText(filePath)"}
{"instruction":"Remove a file.","input":"Variable: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Write text to a file.","input":"Variables: filePath, textToWrite","output":"WriteTextToFile(filePath, textToWrite)"}
{"instruction":"Get the worksheet names of an Excel file.","input":"Variable: excelFilePath","output":"GetExcelWorksheets(excelFilePath)"}
{"instruction":"Get the FileInfo of a file.","input":"Variable: filePath","output":"GetFileInfo(filePath)"}
{"instruction":"Convert string to uppercase.","input":"Variables: str","output":"Upper(str)"}
{"instruction":"Generate a random real number between 10 and 20.","input":"","output":"RandomReal(10, 20)"}
{"instruction":"Calculate the total number of seconds in 2 hours, 30 minutes and 45 seconds.","input":"","output":"ToTimeSpan(0, 2, 30, 45).TotalSeconds()"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: str","output":"ComputeSHA256(str)"}
{"instruction":"Round a given real number to two decimal places.","input":"Variables: num","output":"Round(num, 2)"}
{"instruction":"Check if a file exists at a given path.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Compute the number of days between two given dates.","input":"Variables: date1, date2","output":"(Max(date1, date2)-Min(date1, date2)).TotalDays()"}
{"instruction":"Convert a given string from one codepage to another.","input":"Variables: str, fromCodePage, toCodePage","output":"ConvertEncoding(str, fromCodePage, toCodePage)"}
{"instruction":"Get the number of lines in a given file.","input":"Variables: filePath","output":"FileLineCount(filePath)"}
{"instruction":"Calculate the total amount of interest paid over a 6-month period with a 5% annual interest rate on a $10,000 loan.","input":"","output":"IPmt(0.05/12, 1, 6, 10000)*6"}
{"instruction":"Compute the double metaphone code of a given string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Delete a file at a given path.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Calculate the number of periods required to pay off a $5,000 loan with a monthly payment of $150 and a 10% annual interest rate.","input":"","output":"NumPeriods(0.10/12, -150, 5000)"}
{"instruction":"Check if a specific process is running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Write a given text to a file at a given path.","input":"Variables: filePath, text","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Compute the floor of a given decimal number.","input":"Variables: num","output":"Floor(num)"}
{"instruction":"Move a file from a given path to another path.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Compute the refined soundex code of a given string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Copy a file from a given path to another path.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Calculate the payment required to pay off a $10,000 loan over 2 years with a monthly interest rate of 1%.","input":"","output":"Pmt(0.01/12, 24, -10000)"}
{"instruction":"Get the date and time of the last update to a given file.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Calculate the number of periods required to pay off a $5,000 loan with a monthly payment of $150, a 10% annual interest rate, and a final payment of $1000.","input":"","output":"NumPeriods(0.10/12, -150, 5000, -1000)"}
{"instruction":"Compute the soundex code of a given string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Convert a string to uppercase.","input":"Variable: text = \"Hello World\"","output":"text.ToUpper()"}
{"instruction":"Get the directory of a file.","input":"Variable: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"GetDirectory(filePath)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variable: text = \"Password123\"","output":"ComputeSHA256(text)"}
{"instruction":"Get the number of days in a timespan.","input":"Variable: timespan = \"3.05:30:15\"","output":"Days(timespan)"}
{"instruction":"Round a decimal number to 2 decimal places.","input":"Variable: number = 3.141592","output":"Round(number, 2)"}
{"instruction":"Check if a directory exists.","input":"Variable: directoryPath = \"C:\\Users\\JohnDoe\\Documents\"","output":"DirectoryExists(directoryPath)"}
{"instruction":"Encode a string to be used in a URL.","input":"Variable: text = \"Hello World!\"","output":"UrlEncode(text)"}
{"instruction":"Add text to a file.","input":"Variables: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\", text = \"This is some new text.\"","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Get the length of a file.","input":"Variable: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"FileLength(filePath)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variable: text = \"Password123\"","output":"ComputeMD5(text)"}
{"instruction":"Move a file to a new location.","input":"Variables: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\", newFilePath = \"C:\\Users\\JohnDoe\\Downloads\\example.txt\"","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Decode a URL encoded string.","input":"Variable: text = \"Hello%20World%21\"","output":"UrlDecode(text)"}
{"instruction":"Convert a string to a different encoding.","input":"Variable: text = \"Hello World!\", fromCodePage = \"ISO-8859-1\"","output":"ConvertEncoding(text, fromCodePage)"}
{"instruction":"Get the file extension of a file.","input":"Variable: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"GetFileExtension(filePath)"}
{"instruction":"Get the file info of a file.","input":"Variable: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"GetFileInfo(filePath)"}
{"instruction":"Check if a file exists.","input":"Variable: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"FileExists(filePath)"}
{"instruction":"Read the first line of a file.","input":"Variable: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Read the text of a file.","input":"Variable: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"ReadFileText(filePath)"}
{"instruction":"Delete a file.","input":"Variable: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\"","output":"DeleteFile(filePath)"}
{"instruction":"Write text to a file.","input":"Variables: filePath = \"C:\\Users\\JohnDoe\\Documents\\example.txt\", text = \"This is some new text.\"","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Get the worksheets in an Excel file.","input":"Variable: excelFilePath = \"C:\\Users\\JohnDoe\\Documents\\example.xlsx\"","output":"GetExcelWorksheets(excelFilePath)"}
{"instruction":"Create a DateTime object from a string.","input":"Variable: text = \"2022-01-01 00:00:00\"","output":"CreateDateTime(text)"}
{"instruction":"Parse and correct a US address.","input":"Variable: address = \"1600 Pennsylvania Ave NW, Washington, DC 20500\"","output":"ParseAndCorrectAddressUS(address)"}
{"instruction":"Round the number to the nearest whole number.","input":"Variables: price, tax, discount","output":"Round(price + tax - discount)"}
{"instruction":"Get the length of a specific file.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\"","output":"FileLength(\"C:\\Users\\John\\Documents\\example.txt\")"}
{"instruction":"Get the directory of a specific file.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\"","output":"GetDirectory(\"C:\\Users\\John\\Documents\\example.txt\")"}
{"instruction":"Calculate the total number of days between two specific dates.","input":"Constants: \"2022-06-01\", \"2022-07-01\"","output":"TotalDays(Max(CreateDateTime(\"2022-06-01\"), CreateDateTime(\"2022-07-01\")) - Min(CreateDateTime(\"2022-06-01\"), CreateDateTime(\"2022-07-01\")))"}
{"instruction":"Convert a string to UTF8 encoding.","input":"Variables: text","output":"ConvertEncoding(text, \"utf-8\")"}
{"instruction":"Compute the SHA256 hash of a specific string.","input":"Constants: \"Hello World!\"","output":"ComputeSHA256(\"Hello World!\")"}
{"instruction":"Check if a specific file exists.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\"","output":"FileExists(\"C:\\Users\\John\\Documents\\example.txt\")"}
{"instruction":"Add a specific text to an existing file.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\", \"This is a sample text.\"","output":"AppendTextToFile(\"C:\\Users\\John\\Documents\\example.txt\", \"This is a sample text.\")"}
{"instruction":"Calculate the random number between two specific integers.","input":"Constants: 10, 50","output":"RandomReal(10, 50)"}
{"instruction":"Delete a specific file.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\"","output":"DeleteFile(\"C:\\Users\\John\\Documents\\example.txt\")"}
{"instruction":"Get the file extension of a specific file.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\"","output":"GetFileExtension(\"C:\\Users\\John\\Documents\\example.txt\")"}
{"instruction":"Move a specific file to a new location.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\", \"C:\\Users\\John\\Desktop\\example.txt\"","output":"MoveFile(\"C:\\Users\\John\\Documents\\example.txt\", \"C:\\Users\\John\\Desktop\\example.txt\")"}
{"instruction":"Get the first line of text from a specific file.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\"","output":"ReadFileFirstLine(\"C:\\Users\\John\\Documents\\example.txt\")"}
{"instruction":"Get the soundex code of a specific string.","input":"Constants: \"Astera\"","output":"Soundex(\"Astera\")"}
{"instruction":"Get the refined soundex code of a specific string.","input":"Constants: \"Astera\"","output":"RefinedSoundex(\"Astera\")"}
{"instruction":"Check if a specific process is running.","input":"Constants: \"chrome.exe\"","output":"IsProcessRunning(\"chrome.exe\")"}
{"instruction":"Terminate a specific process.","input":"Constants: \"chrome.exe\"","output":"TerminateProcess(\"chrome.exe\")"}
{"instruction":"Compute the MD5 hash of a specific string.","input":"Constants: \"Hello World!\"","output":"ComputeMD5(\"Hello World!\")"}
{"instruction":"Convert a specific string to base64 encoding.","input":"Constants: \"Hello World!\"","output":"ToBytes(\"Hello World!\", \"base64\")"}
{"instruction":"Convert a specific base64 encoded string to normal string.","input":"Constants: \"SGVsbG8gV29ybGQh\"","output":"FromBytes(\"SGVsbG8gV29ybGQh\", \"base64\")"}
{"instruction":"Count the total number of lines in a specific file.","input":"Constants: \"C:\\Users\\John\\Documents\\example.txt\"","output":"FileLineCount(\"C:\\Users\\John\\Documents\\example.txt\")"}
{"instruction":"Convert a specific string to URL encoded format.","input":"Constants: \"Hello World!\"","output":"UrlEncode(\"Hello World!\")"}
{"instruction":"Convert a specific URL encoded string to normal string.","input":"Constants: \"Hello%20World%21\"","output":"UrlDecode(\"Hello%20World%21\")"}
{"instruction":"Convert a string to URL format.","input":"Variables: url","output":"UrlEncode(url)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: text","output":"ComputeMD5(text)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: text","output":"ComputeSHA256(text)"}
{"instruction":"Convert a string to a different encoding.","input":"Variables: text, fromCodePage","output":"ConvertEncoding(text, fromCodePage)"}
{"instruction":"Get the last time a file was updated.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Delete a file.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Read the first line of a file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Append text to an existing file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Get the number of lines in a file.","input":"Variables: filePath","output":"FileLineCount(filePath)"}
{"instruction":"Get the Soundex code of a string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Check if a process is running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Terminate a running process.","input":"Variables: processName","output":"TerminateProcess(processName)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Create a datetime object from a given string.","input":"Variables: dateTimeString","output":"CreateDateTime(dateTimeString)"}
{"instruction":"Move a file from its current location to a new one.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Get the parsed components of a US address.","input":"Variables: fullAddress, outputCase","output":"ParseAddressUS(fullAddress, outputCase)"}
{"instruction":"Get the worksheets in an Excel file.","input":"Variables: excelFilePath","output":"GetExcelWorksheets(excelFilePath)"}
{"instruction":"Convert a string to EdiMetaProperties.","input":"Variables: filePath","output":"GetEDIFileMetaDate(filePath)"}
{"instruction":"Parse and correct a US address.","input":"Unknown input","output":"ParseAndCorrectAddressUS(input)"}
{"instruction":"Parse name components from a given input.","input":"Unknown input","output":"ParseNameEx(input)"}
{"instruction":"Compute the refined Soundex of a string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Convert a string to all uppercase letters.","input":"Variables: firstName, lastName, email","output":"Upper(ConvertEncoding(firstName, \"UTF-8\"))"}
{"instruction":"Calculate the maximum value between two dates.","input":"Variables: startDate, endDate","output":"Max(startDate, endDate)"}
{"instruction":"Concatenate three strings into one string.","input":"Variables: firstName, lastName, email","output":"Concat(ConvertEncoding(firstName, \"UTF-8\"), \" \", ConvertEncoding(lastName, \"UTF-8\"), \" \", email)"}
{"instruction":"Calculate the number of minutes in 2 hours and 30 minutes.","input":"","output":"Minutes(ToTimeSpan(0, 2, 30))"}
{"instruction":"Calculate the interest payment for the second period of a loan.","input":"Variables: rate, periods, numPeriods, PV","output":"IPmt(rate, 2, numPeriods, PV)"}
{"instruction":"Get the date and time the file was last updated.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Calculate the total cost of an asset depreciated with the double-declining balance method.","input":"Variables: cost, salvage, life, periods","output":"DDB(cost, salvage, life, periods)"}
{"instruction":"Create a text file and write a line of text to it.","input":"Variables: filePath, text","output":"\n1. AppendTextToFile(filePath, text)\n2. WriteTextToFile(filePath, text)"}
{"instruction":"Calculate the total number of ticks in 1 hour and 30 minutes.","input":"","output":"Ticks(ToTimeSpan(0, 1, 30))"}
{"instruction":"Check if a directory exists.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Calculate the rate of interest for a loan.","input":"Variables: numPeriods, Pmt, PV","output":"Rate(numPeriods, Pmt, PV)"}
{"instruction":"Move a file from one directory to another.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: startDate, endDate","output":"Days(endDate - startDate)"}
{"instruction":"Read the first line of a text file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Check if a process is running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Convert a string to a byte array.","input":"Variables: str","output":"ToBytes(str, \"UTF-8\")"}
{"instruction":"Encode a URL.","input":"Variables: url","output":"UrlEncode(url)"}
{"instruction":"Calculate the present value of a loan.","input":"Variables: rate, Pmt, PV, FV","output":"PV(rate, Pmt, PV, FV)"}
{"instruction":"Delete a file.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Convert a byte array to a string.","input":"Variables: bytes","output":"FromBytes(bytes, \"UTF-8\")"}
{"instruction":"Calculate the total number of hours in 5 days.","input":"","output":"TotalHours(ToTimeSpan(5, 0, 0, 0))"}
{"instruction":"Get the meta properties of an EDI file.","input":"Variables: filePath","output":"GetEDIFileMetaDate(filePath)"}
{"instruction":"Calculate the number of periods it will take to pay off a loan.","input":"Variables: rate, Pmt, PV, FV","output":"NumPeriods(rate, Pmt, PV, FV)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"\"Hello World\"","output":"ComputeSHA256(\"Hello World\")"}
{"instruction":"Round off 123.456 to the nearest integer.","input":"","output":"Round(123.456)"}
{"instruction":"Get the length of a given file in bytes.","input":"\"C:/Users/User/Documents/sample_file.txt\"","output":"FileLength(\"C:/Users/User/Documents/sample_file.txt\")"}
{"instruction":"Get the file extension of a given file path.","input":"\"C:/Users/User/Documents/sample_file.txt\"","output":"GetFileExtension(\"C:/Users/User/Documents/sample_file.txt\")"}
{"instruction":"Convert a given string from UTF-8 to ASCII.","input":"\"Bonjour!\"","output":"ConvertEncoding(\"Bonjour!\", \"utf-8, ASCII\")"}
{"instruction":"Create a new text file and append a given text to it.","input":"Variables: file_path, text","output":"AppendTextToFile(file_path, text)"}
{"instruction":"Get the first line of a given text file.","input":"\"C:/Users/User/Documents/sample_file.txt\"","output":"ReadFileFirstLine(\"C:/Users/User/Documents/sample_file.txt\")"}
{"instruction":"Add two given numbers and round off the result to 3 decimal places.","input":"Variables: num1 = 12.345, num2 = 67.890","output":"Round(num1 + num2, 3)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"\"Hello World\"","output":"ComputeMD5(\"Hello World\")"}
{"instruction":"Move a given file to a new location.","input":"Variables: file_path, new_location","output":"MoveFile(file_path, new_location)"}
{"instruction":"Get the directory of a given file path.","input":"\"C:/Users/User/Documents/sample_file.txt\"","output":"GetDirectory(\"C:/Users/User/Documents/sample_file.txt\")"}
{"instruction":"Compute the soundex of a given string.","input":"\"Hello World\"","output":"Soundex(\"Hello World\")"}
{"instruction":"Get the number of lines in a given text file.","input":"\"C:/Users/User/Documents/sample_file.txt\"","output":"FileLineCount(\"C:/Users/User/Documents/sample_file.txt\")"}
{"instruction":"Check if a given directory exists.","input":"\"C:/Users/User/Documents\"","output":"DirectoryExists(\"C:/Users/User/Documents\")"}
{"instruction":"Copy a given file to a new location.","input":"Variables: source_file_path, destination_file_path, over_write","output":"CopyFile(source_file_path, destination_file_path, over_write)"}
{"instruction":"Calculate the total number of days in a given time span.","input":"TimeSpan(12, 15, 30)","output":"TotalDays(TimeSpan(12, 15, 30))"}
{"instruction":"Generate the double metaphone of a given string.","input":"\"Hello World\"","output":"DoubleMetaphone(\"Hello World\")"}
{"instruction":"Compute the refined soundex of a given string.","input":"\"Hello World\"","output":"RefinedSoundex(\"Hello World\")"}
{"instruction":"Get the name of a given file without its extension.","input":"\"C:/Users/User/Documents/sample_file.txt\"","output":"GetFileNameWithoutExtension(\"C:/Users/User/Documents/sample_file.txt\")"}
{"instruction":"Terminate a given process.","input":"\"notepad.exe\"","output":"TerminateProcess(\"notepad.exe\")"}
{"instruction":"Compute the floor value of 6.789.","input":"","output":"Floor(6.789)"}
{"instruction":"Parse and correct the given US address.","input":"Variables: address, city, state, zip","output":"ParseAndCorrectAddressUS(address, city, state, zip)"}
{"instruction":"Compute the PV of 100 payments of 1000 each at 5% interest rate.","input":"Variables: rate = 5, nper = 100, pmt = -1000, fv = 0","output":"PV(rate, nper, pmt, fv)"}
{"instruction":"Convert a string to uppercase.","input":"Variables: message","output":"UpperCase(message)"}
{"instruction":"Compute the SHA256 hash of a string with a specific key.","input":"Variables: message, key","output":"ComputeHash(message, key)"}
{"instruction":"Parse and correct a US address.","input":"Variables: address","output":"ParseAndCorrectAddressUS(address)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Compute the power of a given base raised to a specific exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Get the number of days between two dates.","input":"Variables: date1, date2","output":"Days(Max(date1, date2) - Min(date1, date2))"}
{"instruction":"Delete a file from the file system.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: message, from_encoding, to_encoding","output":"ConvertEncoding(message, from_encoding, to_encoding)"}
{"instruction":"Get the refined soundex code for a given string.","input":"Variables: message","output":"RefinedSoundex(message)"}
{"instruction":"Compute the total number of minutes in a given time span.","input":"Variables: time_span","output":"TotalMinutes(time_span)"}
{"instruction":"Write text to a file.","input":"Variables: file_path, text","output":"WriteTextToFile(file_path, text)"}
{"instruction":"Round a given decimal number to the nearest integer.","input":"Variables: number","output":"Round(number)"}
{"instruction":"Get the file name without the extension.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: message","output":"ComputeMD5(message)"}
{"instruction":"Get the number of hours in a given time span.","input":"Variables: time_span","output":"Hours(time_span)"}
{"instruction":"Compute the Soundex code for a given string.","input":"Variables: message","output":"Soundex(message)"}
{"instruction":"Copy a file to a different location.","input":"Variables: source_file_path, destination_file_path","output":"CopyFile(source_file_path, destination_file_path)"}
{"instruction":"Compute the absolute value of a given real number.","input":"Variables: number","output":"Abs(number)"}
{"instruction":"Compute the edifact metadata properties of a given file path.","input":"Variables: file_path","output":"GetEDIFileMetaDate(file_path)"}
{"instruction":"Parse a US address into its constituent parts.","input":"Variables: address","output":"ParseAddressUS(address)"}
{"instruction":"Compute the double metaphone code for a given string.","input":"Variables: message","output":"DoubleMetaphone(message)"}
{"instruction":"Get the length of a specific file's first line.","input":"Variables: file_path","output":"Length(ReadFileFirstLine(file_path))"}
{"instruction":"Compute the number of seconds between two dates.","input":"Variables: date1, date2","output":"TotalSeconds(Max(date1, date2) - Min(date1, date2))"}
{"instruction":"Calculate the average of three decimal numbers.","input":"Variables: num1, num2, num3","output":"(num1 + num2 + num3) / 3"}
{"instruction":"Convert a string to uppercase.","input":"Variable: text","output":"Upper(text)"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variable: num","output":"Round(num)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variable: str, key","output":"ComputeSHA256(str, key)"}
{"instruction":"Calculate the factorial of a given integer.","input":"Variable: num","output":"Fact(num)"}
{"instruction":"Get the length of a file in bytes.","input":"Variable: filePath","output":"FileLength(filePath)"}
{"instruction":"Check if a file exists.","input":"Variable: filePath","output":"FileExists(filePath)"}
{"instruction":"Get the name of a file without the extension.","input":"Variable: filePath","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Get the current date and time.","input":"None","output":"Now()"}
{"instruction":"Check if a directory exists.","input":"Variable: dirPath","output":"DirectoryExists(dirPath)"}
{"instruction":"Write text to a file.","input":"Variables: filePath, text","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Compute the total number of seconds in a TimeSpan object.","input":"Variable: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Remove a file.","input":"Variable: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variable: str","output":"DoubleMetaphone(str)"}
{"instruction":"Parse a US address.","input":"Variables: fullAddress, outputCase","output":"ParseAddressUS(fullAddress, outputCase)"}
{"instruction":"Compute the sum of two decimal numbers.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Generate a random real number between two integers.","input":"Variables: min, max","output":"RandomReal(min, max)"}
{"instruction":"Calculate the total number of minutes in a TimeSpan object.","input":"Variable: timeSpan","output":"TotalMinutes(timeSpan)"}
{"instruction":"Copy a file to a new location.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Get the name of the current process.","input":"None","output":"GetCurrentProcessName()"}
{"instruction":"Compute the SOUNDEX of a string.","input":"Variable: str","output":"Soundex(str)"}
{"instruction":"Compute the annual depreciation using the DDB method.","input":"Variables: cost, salvage, life, period","output":"DDB(cost, salvage, life, period)"}
{"instruction":"Calculate the present value of an annuity.","input":"Variables: rate, pmt, pv","output":"PV(rate, pmt, pv)"}
{"instruction":"Find the maximum value between two decimal numbers.","input":"Variables: decimal1, decimal2","output":"Max(decimal1, decimal2)"}
{"instruction":"Calculate the number of days in a given timespan.","input":"Variables: timespan","output":"Days(timespan)"}
{"instruction":"Compute the refined soundex of a given string.","input":"Variables: inputString","output":"RefinedSoundex(inputString)"}
{"instruction":"Check if a specified process is running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: inputString","output":"ComputeSHA256(inputString)"}
{"instruction":"Round a given real number to 2 decimal places.","input":"Variables: realNumber","output":"Round(realNumber, 2)"}
{"instruction":"Find the minimum value between two integers.","input":"Variables: integer1, integer2","output":"Min(integer1, integer2)"}
{"instruction":"Convert a given string to byte array using UTF-8 encoding.","input":"Variables: inputString","output":"ToBytes(inputString, \"UTF-8\")"}
{"instruction":"Calculate the present value of a payment.","input":"Variables: rate, payment, presentValue","output":"PV(rate, payment, presentValue)"}
{"instruction":"Copy a file from source path to destination path.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, false)"}
{"instruction":"Parse a US address and return the parsed components.","input":"Variables: fullAddress","output":"ParseAddressUS(fullAddress, \"pascal\")"}
{"instruction":"Find the soundex code of a given string.","input":"Variables: inputString","output":"Soundex(inputString)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: inputString","output":"ComputeMD5(inputString)"}
{"instruction":"Calculate the number of hours in a given timespan.","input":"Variables: timespan","output":"Hours(timespan)"}
{"instruction":"Calculate the number of minutes in a given timespan.","input":"Variables: timespan","output":"Minutes(timespan)"}
{"instruction":"Calculate the number of seconds in a given timespan.","input":"Variables: timespan","output":"Seconds(timespan)"}
{"instruction":"Get the last update date time of a given file.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Parse a US address and correct it if necessary.","input":"Variables: fullAddress","output":"ParseAndCorrectAddressUS(fullAddress)"}
{"instruction":"Calculate the future value of a payment.","input":"Variables: rate, numPeriods, payment, presentValue","output":"FV(rate, numPeriods, payment, presentValue)"}
{"instruction":"Check if a directory exists at the specified path.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Calculate the number of periods in a given payment.","input":"Variables: rate, payment, presentValue","output":"NumPeriods(rate, payment, presentValue)"}
{"instruction":"Calculate the interest payment for a given period in a loan.","input":"Variables: rate, period, numPeriods, presentValue","output":"IPmt(rate, period, numPeriods, presentValue)"}
{"instruction":"Compute the double metaphone code of a given string.","input":"Variables: inputString","output":"DoubleMetaphone(inputString)"}
{"instruction":"Find the max value between two decimal numbers.","input":"Variables: number1, number2 ","output":"Max(number1, number2)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: text","output":"ComputeSHA256(text)"}
{"instruction":"Parse an address and return the parsed result.","input":"Variables: fullAddress","output":"ParseAddressUS(fullAddress, \"Title\")"}
{"instruction":"Add two decimal numbers and return the result.","input":"Variables: number1, number2","output":"number1 + number2"}
{"instruction":"Check if a file exists at the given path.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Find the refined soundex of a given string.","input":"Variables: text","output":"RefinedSoundex(text)"}
{"instruction":"Compute the total number of days in a given time span.","input":"Variables: timeSpan","output":"TotalDays(timeSpan)"}
{"instruction":"Read the first line of a text file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Find the difference between two dates in days.","input":"Variables: date1, date2","output":"Days(date2 - date1)"}
{"instruction":"Copy a file from one directory to another.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, True)"}
{"instruction":"Compute the cosine similarity between two given strings.","input":"Variables: text1, text2","output":"CosineSimilarity(text1, text2)"}
{"instruction":"Compute the factorial of a given integer.","input":"Variables: number","output":"Factorial(number)"}
{"instruction":"Check if a directory exists at the given path.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Find the min value between two integer numbers.","input":"Variables: number1, number2","output":"Min(number1, number2)"}
{"instruction":"Round a given decimal number to the nearest integer.","input":"Variables: number","output":"Round(number)"}
{"instruction":"Compute the sum of two real numbers.","input":"Variables: number1, number2","output":"number1 + number2"}
{"instruction":"Count the number of lines in a text file.","input":"Variables: filePath","output":"FileLineCount(filePath)"}
{"instruction":"Compute the power of a given real number to a given real exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Compute the number of seconds in a given time span.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Compute the SHA-256 hash of a given string using a given key.","input":"Variables: text, key","output":"ComputeSHA256(text, key)"}
{"instruction":"Find the max value between two real numbers.","input":"Variables: number1, number2","output":"Max(number1, number2)"}
{"instruction":"Check if a file is longer than a given length.","input":"Variables: filePath, length","output":"FileLength(filePath) > length"}
{"instruction":"Compute the average of two decimal numbers.","input":"Variables: number1, number2","output":"(number1 + number2) / 2"}
{"instruction":"Round up 3.145 to the nearest whole number.","input":"","output":"Round(3.145)"}
{"instruction":"Compute the soundex code for the word \"astute\".","input":"","output":"Soundex(\"astute\")"}
{"instruction":"Convert the string \"Hello World!\" to bytes.","input":"","output":"ToBytes(\"Hello World!\", \"UTF-8\")"}
{"instruction":"Get the last update date and time of a file located at C:\\Users\\JohnDoe\\Documents\test.txt.","input":"","output":"LastUpdateDateTime(\"C:\\Users\\JohnDoe\\Documents\\test.txt\")"}
{"instruction":"Compute the SHA256 hash of the string \"Password123\".","input":"","output":"ComputeSHA256(\"Password123\")"}
{"instruction":"Find the minimum value of the decimal numbers 5.5 and -3.2.","input":"","output":"Min(5.5, -3.2)"}
{"instruction":"Compute the total number of minutes in a time span of 2 hours and 30 minutes.","input":"","output":"TotalMinutes(ToTimeSpan(0, 2, 30))"}
{"instruction":"Create a new file at C:\\Users\\JohnDoe\\Documents\\newfile.txt and write the text \"Hello World!\" to it.","input":"","output":"WriteTextToFile(\"C:\\Users\\JohnDoe\\Documents\\newfile.txt\", \"Hello World!\")"}
{"instruction":"Calculate the present value of an investment with an interest rate of 5%, 10 years of life, $5000 cost and $2000 salvage value.","input":"","output":"PV(0.05, 0, 5000, 0, 10, 0, 0, 0, 2000)"}
{"instruction":"Compute the double metaphone code for the word \"knight\".","input":"","output":"DoubleMetaphone(\"knight\")"}
{"instruction":"Parse the US address \"123 Main St, Anytown, CA 12345\" and output the components in uppercase.","input":"","output":"ParseAddressUS(\"123 Main St\", \"Anytown, CA 12345\", \"UPPERCASE\")"}
{"instruction":"Calculate the number of periods required to pay off a loan with a payment of $500, a present value of $10000, and an interest rate of 3%.","input":"","output":"NumPeriods(0.03, -500, 10000)"}
{"instruction":"Delete the file located at C:\\Users\\JohnDoe\\Documents\\oldfile.txt.","input":"","output":"DeleteFile(\"C:\\Users\\JohnDoe\\Documents\\oldfile.txt\")"}
{"instruction":"Get the Excel worksheets in the file located at C:\\Users\\JohnDoe\\Documents\\data.xlsx.","input":"","output":"GetExcelWorksheets(\"C:\\Users\\JohnDoe\\Documents\\data.xlsx\")"}
{"instruction":"Calculate the monthly payment required to pay off a loan with a present value of $10000, a future value of $0, and an interest rate of 5% over 60 months.","input":"","output":"Pmt(0.05/12, -60, 10000, 0, 0)"}
{"instruction":"Compute the Refined Soundex code for the word \"camel\".","input":"","output":"RefinedSoundex(\"camel\")"}
{"instruction":"Copy the file located at C:\\Users\\JohnDoe\\Documents\\file1.txt to C:\\Users\\JohnDoe\\Desktop\\file2.txt, overwriting if it already exists.","input":"","output":"CopyFile(\"C:\\Users\\JohnDoe\\Documents\\file1.txt\", \"C:\\Users\\JohnDoe\\Desktop\\file2.txt\", true)"}
{"instruction":"Determine if the process named \"notepad.exe\" is running.","input":"","output":"IsProcessRunning(\"notepad.exe\")"}
{"instruction":"Compute the duration in seconds of a time span of 2 hours and 30 minutes.","input":"","output":"TotalSeconds(ToTimeSpan(0, 2, 30))"}
{"instruction":"Calculate the interest payment for the 6th period of a loan with an interest rate of 5%, 10 periods, a $10000 present value, and $5000 payment.","input":"","output":"IPmt(0.05, 6, 10, 10000, 0, 0)"}
{"instruction":"Compute the number of milliseconds in a time span of 3 hours and 15 minutes.","input":"","output":"TotalMilliseconds(ToTimeSpan(0, 3, 15))"}
{"instruction":"Parse and correct the address \"123 Abcdef St, Anytown, NY 12345\".","input":"","output":"ParseAndCorrectAddressUS(\"123 Abcdef St, Anytown, NY 12345\")"}
{"instruction":"Get the length in bytes of the file located at C:\\Users\\JohnDoe\\Documents\\mydata.bin.","input":"","output":"FileLength(\"C:\\Users\\JohnDoe\\Documents\\mydata.bin\")"}
{"instruction":"Convert a string to its Refined Soundex code.","input":"Variables: full_name","output":"RefinedSoundex(full_name)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: password","output":"ComputeSHA256(password)"}
{"instruction":"Calculate the total number of days between two dates.","input":"Variables: start_date, end_date","output":"TotalDays(Max(start_date, end_date) - Min(start_date, end_date))"}
{"instruction":"Parse and correct a given US address.","input":"Variables: address_line_1, address_line_2, city, state, zip_code","output":"ParseAndCorrectAddressUS(address_line_1 + \" \" + address_line_2 + \" \" + city + \" \" + state + \" \" + zip_code)"}
{"instruction":"Round a given decimal number to 2 decimal places.","input":"Variables: price","output":"Round(price, 2)"}
{"instruction":"Get the file size in bytes for a given file path.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Compute the double metaphone code of a given string.","input":"Variables: word","output":"DoubleMetaphone(word)"}
{"instruction":"Encode a given string with URL encoding.","input":"Variables: url","output":"UrlEncode(url)"}
{"instruction":"Find out if a given process is currently running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Calculate the number of whole months between two dates.","input":"Variables: start_date, end_date","output":"Round(Days(end_date - start_date) / 30.44)"}
{"instruction":"Convert a given string from one code page to another.","input":"Variables: text, from_code_page, to_code_page","output":"ConvertEncoding(text, from_code_page + \"-\" + to_code_page)"}
{"instruction":"Append a given text to the end of a specific file.","input":"Variables: file_path, text","output":"AppendTextToFile(file_path, text)"}
{"instruction":"Calculate the total number of seconds in a given time span.","input":"Variables: time_span","output":"TotalSeconds(time_span)"}
{"instruction":"Delete a given file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Read the first line of a given file as a string.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Check if a directory exists at a given file path.","input":"Variables: dir_path","output":"DirectoryExists(dir_path)"}
{"instruction":"Get a list of worksheets in an Excel file.","input":"Variables: file_path","output":"GetExcelWorksheets(file_path)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: password","output":"ComputeMD5(password)"}
{"instruction":"Copy a given file to a new file path.","input":"Variables: source_file_path, dest_file_path","output":"CopyFile(source_file_path, dest_file_path, False)"}
{"instruction":"Calculate the present value of a loan.","input":"Variables: rate, pmt, pv","output":"PV(rate, pmt, pv)"}
{"instruction":"Find out if a given file exists at a specific file path.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Move a given file to a new file path.","input":"Variables: file_path, new_file_path","output":"MoveFile(file_path, new_file_path)"}
{"instruction":"Find the total number of seconds in a given timespan.","input":"Variables: timespan","output":"TotalSeconds(timespan)"}
{"instruction":"Compute the Power of '3' to the exponent of '4'.","input":"Constants: None.","output":"Pow(3, 4)"}
{"instruction":"Find the length of a given file in bytes.","input":"Constants: filePath.","output":"FileLength(filePath)"}
{"instruction":"Convert a given string to bytes using UTF-8 encoding.","input":"Variables: str.","output":"ToBytes(str, \"UTF-8\")"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: str.","output":"ComputeSHA256(str)"}
{"instruction":"Find the number of hours in a given timespan.","input":"Variables: timespan.","output":"Hours(timespan)"}
{"instruction":"Compute the refined soundex of a given string.","input":"Variables: str.","output":"RefinedSoundex(str)"}
{"instruction":"Find the minimum value between two given integers.","input":"Variables: int1, int2.","output":"Min(int1, int2)"}
{"instruction":"Find the largest worksheet name in an Excel file.","input":"Constants: excelFilePath.","output":"Max(GetExcelWorksheets(excelFilePath))"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: str.","output":"ComputeMD5(str)"}
{"instruction":"Parse and correct a given US address.","input":"Variables: address.","output":"ParseAndCorrectAddressUS(address)"}
{"instruction":"Calculate the Future Value of a given set of numbers.","input":"Variables: rate, nPer, pmt, pv.","output":"FV(rate, nPer, pmt, pv)"}
{"instruction":"Add a given text to a specified text file.","input":"Constants: filePath, text.","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Convert a given string from a specified code page to UTF-8 encoding.","input":"Variables: str, fromCodePage.","output":"ConvertEncoding(str, fromCodePage)"}
{"instruction":"Find the number of days in a given timespan.","input":"Variables: timespan.","output":"Days(timespan)"}
{"instruction":"Check if a specified process is running.","input":"Constants: processName.","output":"IsProcessRunning(processName)"}
{"instruction":"Get the metadata properties of a specified EDI file.","input":"Constants: filePath.","output":"GetEDIFileMetaDate(filePath)"}
{"instruction":"Find the minimum value between two given decimals.","input":"Variables: dec1, dec2.","output":"Min(dec1, dec2)"}
{"instruction":"Generate a double metaphone of a given string.","input":"Variables: str.","output":"DoubleMetaphone(str)"}
{"instruction":"Move a specified file to a new location.","input":"Constants: filePath, newFilePath.","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Calculate the payment amount for a given set of numbers.","input":"Variables: rate, nPer, pv.","output":"Pmt(rate, nPer, pv)"}
{"instruction":"Calculate the interest payment for a given set of numbers.","input":"Variables: rate, periods, numPeriods, pv.","output":"IPmt(rate, periods, numPeriods, pv)"}
{"instruction":"Check if a specified directory exists.","input":"Constants: filePath.","output":"DirectoryExists(filePath)"}
{"instruction":"Convert a string to upper case.","input":"Variables: text","output":"Upper(text)"}
{"instruction":"Add two decimal numbers.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variables: num","output":"Round(num)"}
{"instruction":"Find the maximum of two decimal numbers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Convert a string to base64.","input":"Variables: text","output":"ToBase64(text)"}
{"instruction":"Replace a substring in a string.","input":"Variables: text, oldStr, newStr","output":"Replace(text, oldStr, newStr)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: text","output":"ComputeSHA256(text)"}
{"instruction":"Get the date and time when a file was last modified.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Compute the sum of several decimal numbers.","input":"Variables: num1, num2, num3, num4","output":"num1 + num2 + num3 + num4"}
{"instruction":"Compute the difference between two dates in days.","input":"Variables: date1, date2","output":"Days(date1 - date2)"}
{"instruction":"Convert a string to an integer.","input":"Variables: text","output":"ToInt(text)"}
{"instruction":"Get the name of a file without extension.","input":"Variables: filePath","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Get the number of milliseconds since a specific date and time.","input":"Variables: date, time","output":"TotalMilliseconds(ToTimeSpan(date, time))"}
{"instruction":"Convert a string to a DateTime object.","input":"Variables: text","output":"CreateDateTime(text)"}
{"instruction":"Compute the quotient of two integers.","input":"Variables: num1, num2","output":"num1 / num2"}
{"instruction":"Check if a file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Get the meta properties of an EDI file.","input":"Variables: filePath","output":"GetEDIFileMetaDate(filePath)"}
{"instruction":"Compute the soundex code of a string.","input":"Variables: text","output":"Soundex(text)"}
{"instruction":"Copy a file to a new location.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, False)"}
{"instruction":"Compute the double metaphone code of a string.","input":"Variables: text","output":"DoubleMetaphone(text)"}
{"instruction":"Convert a string to a byte array.","input":"Variables: text","output":"ToBytes(text, \"UTF-8\")"}
{"instruction":"Compute the absolute value of a real number.","input":"Variables: num","output":"Abs(num)"}
{"instruction":"Convert a string to its SHA256 hash.","input":"Variables: password","output":"ComputeSHA256(password)"}
{"instruction":"Convert a date to its year.","input":"Variables: date","output":"DatePart(\"Year\", date)"}
{"instruction":"Get the total number of seconds in a timespan.","input":"Variables: timespan","output":"TotalSeconds(timespan)"}
{"instruction":"Compute the refined soundex of a string.","input":"Variables: name","output":"RefinedSoundex(name)"}
{"instruction":"Get the average of two decimal numbers.","input":"Variables: num1, num2","output":"(num1 + num2) / 2"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variables: number","output":"Round(number)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: string","output":"ComputeMD5(string)"}
{"instruction":"Get the last update date of a file.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Check if a file exists.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Get the total number of minutes in a timespan.","input":"Variables: timespan","output":"TotalMinutes(timespan)"}
{"instruction":"Create a new directory.","input":"Variables: directory_path","output":"CreateDirectory(directory_path)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: source_file_path, destination_file_path","output":"CopyFile(source_file_path, destination_file_path, true)"}
{"instruction":"Get the number of lines in a file.","input":"Variables: file_path","output":"FileLineCount(file_path)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Delete a file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the double metaphone code of a string.","input":"Variables: name","output":"DoubleMetaphone(name)"}
{"instruction":"Get the soundex code of a string.","input":"Variables: name","output":"Soundex(name)"}
{"instruction":"Compute the hash of a string with a key.","input":"Variables: string, key","output":"ComputeHash(string, key)"}
{"instruction":"Convert a string to its URL encoded format.","input":"Variables: string","output":"UrlEncode(string)"}
{"instruction":"Convert a string to its URL decoded format.","input":"Variables: string","output":"UrlDecode(string)"}
{"instruction":"Compute the PV (present value) of a loan.","input":"Variables: rate, pmt, nper","output":"PV(rate, nper, pmt)"}
{"instruction":"Compute the total number of days in a timespan.","input":"Variables: timespan","output":"TotalDays(timespan)"}
{"instruction":"Compute the IPmt (interest payment) of a loan.","input":"Variables: rate, periods, nper, pv, fv","output":"IPmt(rate, periods, nper, pv, fv)"}
{"instruction":"Convert string to uppercase.","input":"Variables: message","output":"message.ToUpper()"}
{"instruction":"Compute SHA256 hash of a given string.","input":"Variables: password","output":"ComputeSHA256(password)"}
{"instruction":"Compute the sum of two decimal numbers.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Convert a string to byte array using UTF-8 encoding.","input":"Variables: message","output":"ToBytes(message, \"UTF-8\")"}
{"instruction":"Generate a random real number between 0 and 100.","input":"","output":"RandomReal(0, 100)"}
{"instruction":"Find the minimum of two integer numbers.","input":"Variables: num1, num2","output":"Min(num1, num2)"}
{"instruction":"Compute the absolute value of a decimal number.","input":"Variables: value","output":"Abs(value)"}
{"instruction":"Round a decimal number to the nearest whole number.","input":"Variables: value","output":"Round(value)"}
{"instruction":"Check if a file exists at a given path.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Get the last updated date of a file.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Calculate the total number of days in a given timespan.","input":"Variables: timespan","output":"TotalDays(timespan)"}
{"instruction":"Append text to a file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Delete a file at a given path.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Compute the MD5 hash of a given string.","input":"Variables: password","output":"ComputeMD5(password)"}
{"instruction":"Get the file extension of a given file path.","input":"Variables: filePath","output":"GetFileExtension(filePath)"}
{"instruction":"Look for a running process.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Count the number of lines in a given file.","input":"Variables: filePath","output":"FileLineCount(filePath)"}
{"instruction":"Convert a string to lowercase.","input":"Variables: message","output":"message.ToLower()"}
{"instruction":"Compute the difference between two dates in seconds.","input":"Variables: date1, date2","output":"TotalSeconds(date1 - date2)"}
{"instruction":"Copy a file from source to destination.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Find the maximum of two real numbers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Convert a string to title case.","input":"Variables: message","output":"message.ToTitleCase()"}
{"instruction":"Check if a directory exists at a given path.","input":"Variables: dirPath","output":"DirectoryExists(dirPath)"}
{"instruction":"Convert a string to its corresponding URL encoded format.","input":"Variables: url","output":"UrlEncode(url)"}
{"instruction":"Compute the SHA256 hash of a string using the provided key and return the result in hex format.","input":"Variables: text, key","output":"ComputeHash(text, key, True)"}
{"instruction":"Compute the Refined Soundex code for a given string.","input":"Variables: name","output":"RefinedSoundex(name)"}
{"instruction":"Parse and correct a US address.","input":"Variables: address","output":"ParseAndCorrectAddressUS(address)"}
{"instruction":"Get the file extension of a given file path.","input":"Variables: filePath","output":"GetFileExtension(filePath)"}
{"instruction":"Get the last update date and time of a file.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Convert a string to its corresponding bytes using the provided code page.","input":"Variables: text, codePage","output":"ToBytes(text, codePage)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: text","output":"ComputeMD5(text)"}
{"instruction":"Get the list of worksheets in an Excel file.","input":"Variables: excelFilePath","output":"GetExcelWorksheets(excelFilePath)"}
{"instruction":"Calculate the power of a real number raised to another real number.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Check if a given process is running or not.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Get the directory of a given file path.","input":"Variables: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Compute the double metaphone code for a given string.","input":"Variables: name","output":"DoubleMetaphone(name)"}
{"instruction":"Delete a file at the specified path.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Compute the soundex code for a given string.","input":"Variables: name","output":"Soundex(name)"}
{"instruction":"Convert a string to its corresponding decimal format using the provided code page.","input":"Variables: text, codePage","output":"ConvertEncoding(text, codePage)"}
{"instruction":"Calculate the number of seconds in a given time span.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Round a decimal number to a specified number of decimal places.","input":"Variables: number, decimals","output":"Round(number, decimals)"}
{"instruction":"Copy a file from a specified source path to a specified destination path.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Append text to an existing file at the specified path.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Create a date time object from a string with the specified format.","input":"Variables: filePath","output":"CreateDateTime(filePath)"}
{"instruction":"Get the meta properties of an EDI file.","input":"Variables: filePath","output":"GetEDIFileMetaDate(filePath)"}
{"instruction":"Find the refined soundex code for \"Mississippi\".","input":"Word: \"Mississippi\"","output":"RefinedSoundex(\"Mississippi\")"}
{"instruction":"Convert a string to its hexadecimal representation.","input":"String: \"Hello, world!\"","output":"ComputeHash(\"Hello, world!\", \"\", true)"}
{"instruction":"Convert a string from one encoding to another.","input":"String: \"你好，世界\" (Encoded in GB2312), Output Encoding: UTF-8","output":"ConvertEncoding(\"你好，世界\", \"GB2312\")"}
{"instruction":"Check if a file exists in a specific directory.","input":"Directory Path: \"C:\\Users\\User\\Documents\", File Name: \"example.txt\"","output":"FileExists(\"C:\\Users\\User\\Documents\\example.txt\")"}
{"instruction":"Read the first line of a text file.","input":"File Path: \"C:\\Users\\User\\Documents\\example.txt\"","output":"ReadFileFirstLine(\"C:\\Users\\User\\Documents\\example.txt\")"}
{"instruction":"Delete a file from the file system.","input":"File Path: \"C:\\Users\\User\\Documents\\example.txt\"","output":"DeleteFile(\"C:\\Users\\User\\Documents\\example.txt\")"}
{"instruction":"Compute the SHA256 hash of a string.","input":"String: \"Hello, world!\"","output":"ComputeSHA256(\"Hello, world!\")"}
{"instruction":"Get the file extension from a given file path.","input":"File Path: \"C:\\Users\\User\\Documents\\example.txt\"","output":"GetFileExtension(\"C:\\Users\\User\\Documents\\example.txt\")"}
{"instruction":"Compute the number of days between two dates.","input":"Date1: \"2021-01-01\", Date2: \"2021-12-31\"","output":"Days(Max(CreateDateTime(\"2021-01-01\"), CreateDateTime(\"2021-12-31\")) - Min(CreateDateTime(\"2021-01-01\"), CreateDateTime(\"2021-12-31\")))"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Decimal Number: 3.14159265359","output":"Round(3.14159265359)"}
{"instruction":"Compute the length of a file in bytes.","input":"File Path: \"C:\\Users\\User\\Documents\\example.txt\"","output":"FileLength(\"C:\\Users\\User\\Documents\\example.txt\")"}
{"instruction":"Move a file from one directory to another.","input":"Source File Path: \"C:\\Users\\User\\Downloads\\example.txt\", Destination File Path: \"C:\\Users\\User\\Documents\\example.txt\"","output":"MoveFile(\"C:\\Users\\User\\Downloads\\example.txt\", \"C:\\Users\\User\\Documents\\example.txt\")"}
{"instruction":"Determine the maximum value between two dates.","input":"Date1: \"2022-01-01\", Date2: \"2021-12-31\"","output":"Max(CreateDateTime(\"2022-01-01\"), CreateDateTime(\"2021-12-31\"))"}
{"instruction":"Compute the total number of hours in a TimeSpan.","input":"TimeSpan: \"2.05:30:15\"","output":"TotalHours(ToTimeSpan(\"2.05:30:15\"))"}
{"instruction":"Create a ParsedAddress object from a full address string.","input":"Full Address: \"1234 Main St, Anytown, USA 12345\", Output Case: \"UCWords\"","output":"ParseAddressUS(\"1234 Main St\", \"Anytown, USA 12345\", \"UCWords\")"}
{"instruction":"Compute the FV for a given rate, number of periods, payment amount, and present value.","input":"Rate: 0.05, NPer: 10, Pmt: 100, PV: 1000","output":"FV(0.05, 10, 100, 1000)"}
{"instruction":"Check if a directory exists at a given file path.","input":"Directory Path: \"C:\\Users\\User\\Documents\"","output":"DirectoryExists(\"C:\\Users\\User\\Documents\")"}
{"instruction":"Compute the total number of ticks in a TimeSpan.","input":"TimeSpan: \"1.02:30:00\"","output":"Ticks(ToTimeSpan(\"1.02:30:00\"))"}
{"instruction":"Compute the SLN depreciation for a given asset cost, salvage value, and useful life.","input":"Cost: 1000, Salvage: 200, Life: 5","output":"SLN(1000, 200, 5)"}
{"instruction":"Compute the Pmt for a given rate, payment amount, and present value.","input":"Rate: 0.05, Pmt: 100, PV: 1000","output":"Pmt(0.05, 100, 1000)"}
{"instruction":"Compute the IPmt for a given rate, number of periods, payment amount, present value, and future value.","input":"Rate: 0.05, Period: 1, NumPeriods: 10, PV: 1000, FV: 0","output":"IPmt(0.05, 1, 10, 1000, 0)"}
{"instruction":"Check if a process with a specific name is currently running.","input":"Process Name: \"chrome.exe\"","output":"IsProcessRunning(\"chrome.exe\")"}
{"instruction":"Compute the PPmt for a given rate, payment amount, and present value.","input":"Rate: 0.05, Pmt: 100, PV: 1000","output":"PPmt(0.05, 100, 1000)"}
{"instruction":"Find the sum of two decimal numbers.","input":"Variables: num1, num2","output":"Round(num1 + num2, 2)"}
{"instruction":"Parse a US address.","input":"Variables: address","output":"ParseAddressUS(address, \"Title\")"}
{"instruction":"Create a directory if it does not exist.","input":"Variables: directoryPath","output":"If(!DirectoryExists(directoryPath), CreateDirectory(directoryPath))"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: inputString, key","output":"ComputeSHA256(inputString, key)"}
{"instruction":"Convert text to bytes.","input":"Variables: inputText","output":"ToBytes(inputText, \"UTF-8\")"}
{"instruction":"Read the first line of a text file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Find the max value between two integers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Convert a string to uppercase.","input":"Variables: inputString","output":"Upper(inputString)"}
{"instruction":"Compute the total number of days in a timespan.","input":"Variables: timeSpan","output":"TotalDays(timeSpan)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, True)"}
{"instruction":"Compute the soundex of a string.","input":"Variables: inputString","output":"Soundex(inputString)"}
{"instruction":"Compute the refined soundex of a string.","input":"Variables: inputString","output":"RefinedSoundex(inputString)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variables: inputString","output":"DoubleMetaphone(inputString)"}
{"instruction":"Delete a file.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Compute the absolute value of a decimal number.","input":"Variables: num","output":"Abs(num)"}
{"instruction":"Compute the ceiling of a decimal number.","input":"Variables: num","output":"Ceiling(num)"}
{"instruction":"Compute the floor of a decimal number.","input":"Variables: num","output":"Floor(num)"}
{"instruction":"Compute the maximum of two dates.","input":"Variables: date1, date2","output":"Max(date1, date2)"}
{"instruction":"Compute the minimum of two decimals.","input":"Variables: num1, num2","output":"Min(num1, num2)"}
{"instruction":"Compute the power of a real number.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Convert a string to a timespan.","input":"Variables: timeString","output":"ToTimeSpan(timeString, \"hh:mm:ss\")"}
{"instruction":"Compute the number of ticks in a timespan.","input":"Variables: timeSpan","output":"Ticks(timeSpan)"}
{"instruction":"Convert a string to uppercase.","input":"Variable: name","output":"Uppercase(name)"}
{"instruction":"Compute SHA256 hash of a given string.","input":"Variable: password","output":"ComputeSHA256(password)"}
{"instruction":"Round a decimal number to two decimals.","input":"Variable: price","output":"Round(price, 2)"}
{"instruction":"Get the file length in bytes.","input":"Variable: file","output":"FileLength(file)"}
{"instruction":"Calculate the number of minutes in a given time span.","input":"Variable: timeSpan","output":"Minutes(timeSpan)"}
{"instruction":"Get the current year.","input":"","output":"Year(Now())"}
{"instruction":"Convert a string to bytes using UTF-8 encoding.","input":"Variable: message","output":"ToBytes(message, \"UTF-8\")"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, periods, payment, presentValue","output":"FV(rate, periods, payment, presentValue)"}
{"instruction":"Get the length of a string in bytes using ASCII encoding.","input":"Variable: message","output":"Length(ToBytes(message, \"ASCII\"))"}
{"instruction":"Delete a file if it exists.","input":"Variable: filePath","output":"If(FileExists(filePath), DeleteFile(filePath))"}
{"instruction":"Calculate the total number of seconds in a given time span.","input":"Variable: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Copy a file to a new location.","input":"Variables: sourceFile, destinationFile","output":"CopyFile(sourceFile, destinationFile, True)"}
{"instruction":"Convert a string to lowercase.","input":"Variable: name","output":"Lowercase(name)"}
{"instruction":"Get the name of a file without the extension.","input":"Variable: filePath","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: date1, date2","output":"Days(Max(date1, date2) - Min(date1, date2))"}
{"instruction":"Calculate the present value of an investment.","input":"Variables: rate, periods, payment, futureValue","output":"PV(rate, periods, payment, futureValue)"}
{"instruction":"Check if a directory exists.","input":"Variable: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Append text to a file.","input":"Variables: filePath, message","output":"AppendTextToFile(filePath, message)"}
{"instruction":"Calculate the monthly payment for a loan.","input":"Variables: rate, periods, presentValue","output":"Pmt(rate, periods, presentValue)"}
{"instruction":"Get the date and time when a file was last updated.","input":"Variable: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Convert a string to URL-encoded format.","input":"Variable: message","output":"UrlEncode(message)"}
{"instruction":"Move a file to a new location.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Check if a process is running by its name.","input":"Variable: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Compute the SHA256 hash of the given string.","input":"Variables: inputString","output":"ComputeSHA256(inputString)"}
{"instruction":"Find the largest value between two decimal numbers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Round the given decimal to the nearest integer.","input":"Variables: decimalNum","output":"Round(decimalNum)"}
{"instruction":"Convert the given string to uppercase.","input":"Variables: inputString","output":"Upper(inputString)"}
{"instruction":"Calculate the total number of seconds in the given timespan.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Check if the specified directory exists.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Compute the refined soundex code for the given string.","input":"Variables: inputString","output":"RefinedSoundex(inputString)"}
{"instruction":"Compute the MD5 hash of the given string.","input":"Variables: inputString","output":"ComputeMD5(inputString)"}
{"instruction":"Calculate the difference in days between two dates.","input":"Variables: date1, date2","output":"Days(date2 - date1)"}
{"instruction":"Copy a file and overwrite if it already exists.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath, true)"}
{"instruction":"Compute the SHA256 hash of the given string with the specified key.","input":"Variables: inputString, key","output":"ComputeSHA256(inputString, key)"}
{"instruction":"Calculate the number of whole months between two dates.","input":"Variables: startDate, endDate","output":"NumPeriods(0, 1, startDate, endDate)"}
{"instruction":"Find the smallest value between two integer numbers.","input":"Variables: num1, num2","output":"Min(num1, num2)"}
{"instruction":"Compute the soundex code for the given string.","input":"Variables: inputString","output":"Soundex(inputString)"}
{"instruction":"Calculate the number of hours in the given timespan.","input":"Variables: timeSpan","output":"TotalHours(timeSpan)"}
{"instruction":"Move a file to the specified path.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Convert the given string to lowercase.","input":"Variables: inputString","output":"Lower(inputString)"}
{"instruction":"Compute the double metaphone code for the given string.","input":"Variables: inputString","output":"DoubleMetaphone(inputString)"}
{"instruction":"Calculate the payment amount for the given loan.","input":"Variables: rate, numPeriods, PV","output":"Pmt(rate, numPeriods, PV)"}
{"instruction":"Check if a file with the specified path exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Parse the US address in the given format and output it in the specified case format.","input":"Variables: fullAddress, outputCase","output":"ParseAddressUS(fullAddress, outputCase)"}
{"instruction":"Check if address is a valid US address.","input":"Variables: fullAddress, outputCase","output":"ParseAddressUS(fullAddress, outputCase)"}
{"instruction":"Calculate the present value of the given loan.","input":"Variables: rate, numPeriods, PMT","output":"PV(rate, numPeriods, PMT)"}
{"instruction":"Read the first line of text in the specified file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Round number to 2 decimal places.","input":"Variables: price","output":"Round(price, 2)"}
{"instruction":"Compute SHA256 hash of input string.","input":"Variables: str, key","output":"ComputeSHA256(str, key)"}
{"instruction":"Get the number of days between two dates.","input":"Variables: date1, date2","output":"Days(Max(date1, date2) - Min(date1, date2))"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Get the last line of a file.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Convert a string to uppercase.","input":"Variables: text","output":"Upper(text)"}
{"instruction":"Create a new file and write some text to it.","input":"Variables: file_path, text","output":"WriteTextToFile(file_path, text)"}
{"instruction":"Get the name of a file without its extension.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Compute the sum of two integers.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Get the directory containing a file.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: text, from_encoding, to_encoding","output":"ConvertEncoding(text, from_encoding, to_encoding)"}
{"instruction":"Get the name of the operating system currently running.","input":"","output":"System.OSName()"}
{"instruction":"Compute the refined soundex of a string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Move a file from one location to another.","input":"Variables: source_file_path, dest_file_path","output":"MoveFile(source_file_path, dest_file_path)"}
{"instruction":"Compute the SHA256 hash of a file.","input":"Variables: file_path, key","output":"ComputeHash(ReadFileBytes(file_path), key)"}
{"instruction":"Compute the number of minutes represented by a given number of seconds.","input":"Variables: seconds","output":"Minutes(ToTimeSpan(0, 0, CharToSeconds(seconds)))"}
{"instruction":"Convert a string to a byte array.","input":"Variables: text","output":"ToBytes(text)"}
{"instruction":"Compute the number of ticks represented by a given number of seconds.","input":"Variables: seconds","output":"Ticks(ToTimeSpan(0, 0, CharToSeconds(seconds))"}
{"instruction":"Get the metadata for a given EDI file","input":"Variables: file_path","output":"GetEDIFileMetaDate(file_path)"}
{"instruction":"Create a new datetime object.","input":"Variables: year, month, day, hour, minute, second, millisecond","output":"CreateDateTime(year, month, day, hour, minute, second, millisecond)"}
{"instruction":"Check if a file exists.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Compute the number of days represented by a given number of seconds.","input":"Variables: seconds","output":"TotalDays(ToTimeSpan(0, 0, CharToSeconds(seconds))"}
{"instruction":"Round the number 3.1415926535 to 2 decimal places.","input":"","output":"Round(3.1415926535, 2)"}
{"instruction":"Find the maximum value between 7 and 12.","input":"","output":"Max(7, 12)"}
{"instruction":"Convert the string \"Hello World\" to URL encoded format.","input":"","output":"UrlEncode(\"Hello World\")"}
{"instruction":"Calculate the future value of a loan with rate 5%, 10 years, 1000 payments per year, and present value 10000.","input":"","output":"FV(0.05, 10000, 1000, 10)"}
{"instruction":"Convert the given string to bytes, using the encoding codepage \"UTF-8\".","input":"Variables: input","output":"ToBytes(input, \"UTF-8\")"}
{"instruction":"Get the file length of the file located at C:\\Users\\Username\\Documents\\example.txt","input":"","output":"FileLength(\"C:\\\\Users\\\\Username\\\\Documents\\\\example.txt\")"}
{"instruction":"Compute the SHA256 hash of the string \"password123\".","input":"","output":"ComputeSHA256(\"password123\")"}
{"instruction":"Delete the file located at C:\\Users\\Username\\Documents\\example.txt","input":"","output":"DeleteFile(\"C:\\\\Users\\\\Username\\\\Documents\\\\example.txt\")"}
{"instruction":"Calculate the total number of days in a time span of 5 hours and 30 minutes.","input":"","output":"TotalDays(ToTimeSpan(0, 5, 30, 0))"}
{"instruction":"Get the directory of the file located at C:\\Users\\Username\\Documents\\example.txt","input":"","output":"GetDirectory(\"C:\\\\Users\\\\Username\\\\Documents\\\\example.txt\")"}
{"instruction":"Get the refined soundex code for the string \"John Doe\".","input":"","output":"RefinedSoundex(\"John Doe\")"}
{"instruction":"Find the minimum of 25 and 58.","input":"","output":"Min(25, 58)"}
{"instruction":"Parse the given US address \"123 Main St, Anytown, CA 12345\" and output all fields in uppercase format.","input":"Variables: address","output":"ParseAddressUS(address, \"UPPERCASE\")"}
{"instruction":"Append the text \"Hello World\" to the file located at C:\\Users\\Username\\Documents\\example.txt","input":"","output":"AppendTextToFile(\"C:\\\\Users\\\\Username\\\\Documents\\\\example.txt\", \"Hello World\")"}
{"instruction":"Round the number 2.788 to the nearest whole number.","input":"","output":"Round(2.788)"}
{"instruction":"Calculate the payment amount for a loan with rate 3%, 5 years, and present value 20000.","input":"","output":"Pmt(0.03, 20000, 5)"}
{"instruction":"Calculate the number of periods for a loan with rate 4%, payment amount 500, and present value 15000.","input":"","output":"NumPeriods(0.04, 500, 15000)"}
{"instruction":"Check if the process \"notepad.exe\" is currently running.","input":"","output":"IsProcessRunning(\"notepad.exe\")"}
{"instruction":"Calculate the present value for a loan with rate 6%, payment amount 800, and future value 5000.","input":"","output":"PV(0.06, 800, 5000)"}
{"instruction":"Get the last update date and time for the file located at C:\\Users\\Username\\Documents\\example.txt","input":"","output":"LastUpdateDateTime(\"C:\\\\Users\\\\Username\\\\Documents\\\\example.txt\")"}
{"instruction":"Convert the given byte array to a string, using the encoding codepage \"UTF-8\".","input":"Variables: bytes","output":"FromBytes(bytes, \"UTF-8\")"}
{"instruction":"Calculate the soundex code for the string \"John Doe\".","input":"","output":"Soundex(\"John Doe\")"}
{"instruction":"Copy the file located at C:\\Users\\Username\\Documents\\example.txt to the folder C:\\Users\\Username\\Downloads, overwriting if the file already exists.","input":"","output":"CopyFile(\"C:\\\\Users\\\\Username\\\\Documents\\\\example.txt\", \"C:\\\\Users\\\\Username\\\\Downloads\\\\example.txt\", true)"}
{"instruction":"Round a decimal number to 2 decimal places.","input":"Variables: price","output":"Round(price, 2)"}
{"instruction":"Calculate the floor value of a real number.","input":"Variables: height","output":"Floor(height)"}
{"instruction":"Get the directory path from a file path.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Convert a string to URL encoded format.","input":"Variables: text","output":"UrlEncode(text)"}
{"instruction":"Get the number of days between two dates.","input":"Variables: start_date, end_date","output":"Days(end_date - start_date)"}
{"instruction":"Merge two strings with a space.","input":"Variables: first_name, last_name","output":"first_name + \" \" + last_name"}
{"instruction":"Compute the SHA256 hash of a string using a key.","input":"Variables: text, key","output":"ComputeSHA256(text, key)"}
{"instruction":"Calculate the present value of a loan payment.","input":"Variables: rate, payment, present_value","output":"PV(rate, payment, present_value)"}
{"instruction":"Compute the length of a file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Round a real number to the nearest integer.","input":"Variables: temperature","output":"Round(temperature)"}
{"instruction":"Delete a file at a specified path.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Get the name of a file without the extension.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Calculate the number of ticks in a TimeSpan value.","input":"Variables: time_span","output":"Ticks(time_span)"}
{"instruction":"Append text to an existing file.","input":"Variables: file_path, text","output":"AppendTextToFile(file_path, text)"}
{"instruction":"Compute the difference between two dates in total minutes.","input":"Variables: start_date, end_date","output":"TotalMinutes(end_date - start_date)"}
{"instruction":"Get the first line of text from a file.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Move a file from one location to another.","input":"Variables: file_path, new_file_path","output":"MoveFile(file_path, new_file_path)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: text, from_encoding","output":"ConvertEncoding(text, from_encoding)"}
{"instruction":"Calculate the number of hours in a TimeSpan value.","input":"Variables: time_span","output":"Hours(time_span)"}
{"instruction":"Check if a process is currently running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Get the Excel worksheets in a workbook.","input":"Variables: excel_file_path","output":"GetExcelWorksheets(excel_file_path)"}
{"instruction":"Generate a Double Metaphone code for a string.","input":"Variables: text","output":"DoubleMetaphone(text)"}
{"instruction":"Calculate the floor value of a decimal number.","input":"Variables: price","output":"Floor(price)"}
{"instruction":"Round 123.456 to 2 decimal places.","input":"","output":"Round(123.456, 2)"}
{"instruction":"Convert \"Hello World\" to URL encoded format.","input":"text = \"Hello World\"","output":"UrlEncode(text)"}
{"instruction":"Compute SHA256 hash of \"password123\".","input":"","output":"ComputeSHA256(\"password123\")"}
{"instruction":"Parse US address from \"123 Main Street, Apt 2, Anytown, PA 12345\"","input":"fullAddress = \"123 Main Street, Apt 2, Anytown, PA 12345\"","output":"ParseAddressUS(fullAddress, \"Title\")"}
{"instruction":"Get the length of \"example.txt\" file in bytes.","input":"filePath = \"example.txt\"","output":"FileLength(filePath)"}
{"instruction":"Copy \"file.txt\" to \"backup.txt\".","input":"sourceFilePath = \"file.txt\", destFilePath = \"backup.txt\"","output":"CopyFile(sourceFilePath, destFilePath, False)"}
{"instruction":"Create a date time from \"2021-10-31 11:59:59 AM\".","input":"dateTimeStr = \"2021-10-31 11:59:59 AM\"","output":"CreateDateTime(dateTimeStr)"}
{"instruction":"Get all worksheets from \"example.xlsx\".","input":"excelFilePath = \"example.xlsx\"","output":"GetExcelWorksheets(excelFilePath)"}
{"instruction":"Compute MD5 hash of \"password123\".","input":"","output":"ComputeMD5(\"password123\")"}
{"instruction":"Compute the difference between two dates: \"2021-12-31\" and \"2020-01-01\".","input":"date1 = \"2021-12-31\", date2 = \"2020-01-01\"","output":"Days(Max(date1, date2)) - Days(Min(date1, date2))"}
{"instruction":"Read first line from \"example.txt\".","input":"filePath = \"example.txt\"","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Round 123.456 to the nearest integer.","input":"","output":"Round(123.456)"}
{"instruction":"Compute the hash of \"password123\" using key \"secret\".","input":"str = \"password123\", key = \"secret\"","output":"ComputeHash(str, key)"}
{"instruction":"Delete file \"example.txt\".","input":"filePath = \"example.txt\"","output":"DeleteFile(filePath)"}
{"instruction":"Get the number of lines in \"example.txt\".","input":"filePath = \"example.txt\"","output":"FileLineCount(filePath)"}
{"instruction":"Convert \"Hello World\" to bytes in ASCII encoding.","input":"text = \"Hello World\"","output":"ToBytes(text, \"ascii\")"}
{"instruction":"Calculate the depreciation of an asset with a cost of $10,000, a salvage value of $1,000, a useful life of 5 years, and a period of 2 years using the DDB method.","input":"cost = 10000, salvage = 1000, life = 5, period = 2","output":"DDB(cost, salvage, life, period)"}
{"instruction":"Parse name components from \"John Q. Doe Jr.\".","input":"input = \"John Q. Doe Jr.\"","output":"ParseNameEx(input)"}
{"instruction":"Convert \"Hello World\" to bytes in UTF-8 encoding.","input":"text = \"Hello World\"","output":"ToBytes(text, \"utf-8\")"}
{"instruction":"Append \"some text\" to \"example.txt\".","input":"filePath = \"example.txt\", text = \"some text\"","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Move \"example.txt\" to folder \"backup\".","input":"filePath = \"example.txt\", newFilePath = \"backup/example.txt\"","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Find out if a process named \"notepad.exe\" is running.","input":"processName = \"notepad.exe\"","output":"IsProcessRunning(processName)"}
{"instruction":"Terminate a process named \"firefox.exe\".","input":"processName = \"firefox.exe\"","output":"TerminateProcess(processName)"}
{"instruction":"Convert string from ISO-8859-1 to UTF-8 encoding.","input":"Variable: data containing string to be encoded.","output":"ConvertEncoding(data, \"ISO-8859-1\", \"UTF-8\")"}
{"instruction":"Compute MD5 hash of a string.","input":"Variable: text containing the string to be hashed.","output":"ComputeMD5(text)"}
{"instruction":"Get the length of a file in bytes.","input":"Variable: filePath containing the path to the file.","output":"FileLength(filePath)"}
{"instruction":"Get the name of the file without extension.","input":"Variable: filePath containing the path to the file.","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Get the number of days in a given time span.","input":"Variables: days, hours, minutes, seconds.","output":"Days(ToTimeSpan(days, hours, minutes, seconds))"}
{"instruction":"Compute the SHA-256 hash of a string.","input":"Variable: text containing the string to be hashed.","output":"ComputeSHA256(text)"}
{"instruction":"Write text to a file.","input":"Variables: filePath containing the path to the file, text to be written.","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Remove a file.","input":"Variable: filePath containing the path to the file.","output":"DeleteFile(filePath)"}
{"instruction":"Compute the double metaphone code for a string.","input":"Variable: text containing the string to be encoded.","output":"DoubleMetaphone(text)"}
{"instruction":"Get the first line of a text file.","input":"Variable: filePath containing the path to the file.","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Get the directory of a file.","input":"Variable: filePath containing the path to the file.","output":"GetDirectory(filePath)"}
{"instruction":"Calculate the future value of an investment assuming fixed interest rate.","input":"Variables: rate of interest, number of periods, payment amount, present value of investment.","output":"FV(rate, number of periods, payment amount, present value of investment)"}
{"instruction":"Calculate the present value of an investment assuming fixed interest rate.","input":"Variables: rate of interest, number of periods, payment amount, future value of investment.","output":"PV(rate, number of periods, payment amount, future value of investment)"}
{"instruction":"Calculate the rate of interest for an investment assuming fixed payment and present value.","input":"Variables: number of periods, payment amount, present value of investment.","output":"Rate(number of periods, payment amount, present value of investment)"}
{"instruction":"Calculate the periodic payment required for a loan assuming fixed interest rate and present value.","input":"Variables: rate of interest, number of periods, present value of loan.","output":"Pmt(rate, number of periods, present value of loan)"}
{"instruction":"Calculate the total number of periods required for a loan assuming fixed payment and present value.","input":"Variables: rate of interest, payment amount, present value of loan.","output":"NumPeriods(rate, payment amount, present value of loan)"}
{"instruction":"Get the file extension.","input":"Variable: filePath containing the path to the file.","output":"GetFileExtension(filePath)"}
{"instruction":"Compute the rounded absolute value of a decimal number.","input":"Variable: num containing the decimal number.","output":"Abs(Round(num))"}
{"instruction":"Check if a process is running.","input":"Variable: process name.","output":"IsProcessRunning(process name)"}
{"instruction":"Convert string to URL-encoded form.","input":"Variable: text containing the string to be encoded.","output":"UrlEncode(text)"}
{"instruction":"Get the refined soundex code for a string.","input":"Variable: text containing the string to be encoded.","output":"RefinedSoundex(text)"}
{"instruction":"Calculate the interest payment for a specific period of a loan assuming fixed payment and present value.","input":"Variables: rate of interest, period, number of periods, present value of loan.","output":"IPmt(rate, period, number of periods, present value of loan)"}
{"instruction":"Copy a file to a new location.","input":"Variables: sourceFilePath containing the path to the source file, destFilePath containing the path to the destination file, overwrite flag.","output":"CopyFile(sourceFilePath, destFilePath, overwrite flag)"}
{"instruction":"Calculate the total payment for a loan with a rate of 5%, 24 periods, and principal of $10,000.","input":"","output":"Pmt(0.05, 24, 10000)"}
{"instruction":"Round the number 3.14159 to the nearest hundredth.","input":"","output":"Round(3.14159, 2)"}
{"instruction":"Compute the SHA256 hash of the string \"password\".","input":"","output":"ComputeSHA256(\"password\")"}
{"instruction":"Find the length of a file named \"example.txt\".","input":"","output":"FileLength(\"example.txt\")"}
{"instruction":"Move a file named \"oldfile.txt\" to a new location \"newfile.txt\".","input":"","output":"MoveFile(\"oldfile.txt\", \"newfile.txt\")"}
{"instruction":"Compute the double metaphone for the word \"hello\".","input":"","output":"DoubleMetaphone(\"hello\")"}
{"instruction":"Encode the string \"hello world\" as a URL.","input":"","output":"UrlEncode(\"hello world\")"}
{"instruction":"Decode a URL-encoded string \"%22hello%20world%22\".","input":"","output":"UrlDecode(\"%22hello%20world%22\")"}
{"instruction":"Calculate the power of 2 to the 10th power.","input":"","output":"Pow(2, 10)"}
{"instruction":"Compute the floor of the decimal number 3.5.","input":"","output":"Floor(3.5)"}
{"instruction":"Parse the name \"John Q. Public\" into its components.","input":"","output":"ParseNameEx(\"John Q. Public\")"}
{"instruction":"Compute the number of seconds in a timespan of 2 days, 4 hours, and 30 minutes.","input":"","output":"TotalSeconds(ToTimeSpan(2, 4, 30))"}
{"instruction":"Calculate the future value of an investment with a 5% interest rate, 24 periods, a monthly payment of $100, and a present value of $10,000.","input":"","output":"FV(0.05/12, 24*12, -100, 10000)"}
{"instruction":"Compute the soundex code for the name \"Smith\".","input":"","output":"Soundex(\"Smith\")"}
{"instruction":"Find the maximum date between two input dates.","input":"Variables: date1, date2","output":"Max(date1, date2)"}
{"instruction":"Calculate the number of months it would take to pay off a loan with a 5% interest rate, a monthly payment of $500, and a present value of $10,000.","input":"","output":"NumPeriods(0.05/12, 500, 10000)"}
{"instruction":"Copy a file named \"example.docx\" to a new location \"backup.docx\", overwriting any existing file.","input":"","output":"CopyFile(\"example.docx\", \"backup.docx\", true)"}
{"instruction":"Convert the string \"Hello World\" to bytes using the codepage \"UTF-8\".","input":"","output":"ToBytes(\"Hello World\", \"UTF-8\")"}
{"instruction":"Compute the refined soundex code for the name \"Smith\".","input":"","output":"RefinedSoundex(\"Smith\")"}
{"instruction":"Calculate the present value of an investment with a 5% interest rate, 24 periods, and a monthly payment of $1000.","input":"","output":"PV(0.05/12, 24*12, 1000)"}
{"instruction":"Compute the number of ticks in a timespan of 5 hours and 30 minutes.","input":"","output":"Ticks(ToTimeSpan(5, 30))"}
{"instruction":"Compute the edifact meta properties of the file \"EDIFile.edi\".","input":"","output":"GetEDIFileMetaDate(\"EDIFile.edi\")"}
{"instruction":"Parse and correct an input address to its proper format.","input":"Variables: fullAddress","output":"ParseAndCorrectAddressUS(fullAddress)"}
{"instruction":"Round a decimal number to two decimal places.","input":"Variables: price","output":"Round(price,2)"}
{"instruction":"Convert a string to uppercase.","input":"Variables: name","output":"Upper(name)"}
{"instruction":"Add two numbers and return the result.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Get the directory of a file path.","input":"Variables: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Calculate the total number of seconds in a time span.","input":"Variables: timeSpan","output":"TotalSeconds(timeSpan)"}
{"instruction":"Create a new text file and append text to it.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: text","output":"ComputeSHA256(text)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: date1, date2","output":"Days(Max(date1, date2) - Min(date1, date2))"}
{"instruction":"Check if a directory exists.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Calculate the interest payment for a given period.","input":"Variables: rate, periods, numPeriods, pv","output":"IPmt(rate, periods, numPeriods, pv)"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, nPer, pmt, pv","output":"FV(rate, nPer, pmt, pv)"}
{"instruction":"Convert a string to bytes.","input":"Variables: text, codePage","output":"ToBytes(text, codePage)"}
{"instruction":"Check if a file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Calculate the number of minutes in a time span.","input":"Variables: timeSpan","output":"TotalMinutes(timeSpan)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: text","output":"ComputeMD5(text)"}
{"instruction":"Calculate the present value of an investment.","input":"Variables: rate, pmt, pv","output":"PV(rate, pmt, pv)"}
{"instruction":"Check if a process is running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variables: text","output":"DoubleMetaphone(text)"}
{"instruction":"Delete a file from the system.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Calculate the number of hours in a time span.","input":"Variables: timeSpan","output":"TotalHours(timeSpan)"}
{"instruction":"Calculate the maximum value of two decimal numbers.","input":"Variables: num1, num2","output":"Max(num1, num2)"}
{"instruction":"Parse a US address into its individual components.","input":"Variables: fullAddress, outputCase","output":"ParseAddressUS(fullAddress, outputCase)"}
{"instruction":"Calculate the interest rate for an investment.","input":"Variables: numPeriods, pmt, pv","output":"Rate(numPeriods, pmt, pv)"}
{"instruction":"Find the last update date and time of a file.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Find the first line of a text file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Convert a string to uppercase.","input":"Variables: stringToConvert","output":"stringToConvert.ToUpper()"}
{"instruction":"Convert a string to lowercase.","input":"Variables: stringToConvert","output":"stringToConvert.ToLower()"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: stringToHash, key, hex","output":"ComputeSHA256(stringToHash, key, hex)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: stringToHash, key","output":"ComputeMD5(stringToHash, key)"}
{"instruction":"Encode a string for use in a URL.","input":"Variables: stringToEncode","output":"UrlEncode(stringToEncode)"}
{"instruction":"Decode a URL-encoded string.","input":"Variables: stringToDecode","output":"UrlDecode(stringToDecode)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Get the number of lines in a text file.","input":"Variables: filePath","output":"FileLineCount(filePath)"}
{"instruction":"Get the name of a file without its extension.","input":"Variables: filePath","output":"GetFileNameWithoutExtension(filePath)"}
{"instruction":"Copy a file.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Delete a file.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Get the name of a directory containing a file.","input":"Variables: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Get the date and time when an EDI file was generated.","input":"Variables: filePath","output":"GetEDIFileMetaDate(filePath)"}
{"instruction":"Get a list of worksheets in an Excel file.","input":"Variables: excelFilePath","output":"GetExcelWorksheets(excelFilePath)"}
{"instruction":"Get the extension of a file.","input":"Variables: filePath","output":"GetFileExtension(filePath)"}
{"instruction":"Get information about a file.","input":"Variables: filePath","output":"GetFileInfo(filePath)"}
{"instruction":"Get the name of a file.","input":"Variables: filePath","output":"GetFileName(filePath)"}
{"instruction":"Check if a file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Move a file.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Write text to a file.","input":"Variables: filePath, text","output":"WriteTextToFile(filePath, text)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variables: stringToConvert","output":"DoubleMetaphone(stringToConvert)"}
{"instruction":"Round the number 3.14159 to 3 decimal points.","input":"3.14159","output":"Round(3.14159, 3)"}
{"instruction":"Convert the string \"Hello World!\" to URL encoded format.","input":"\"Hello World!\"","output":"UrlEncode(\"Hello World!\")"}
{"instruction":"Compute the SHA256 hash of the string \"password123\".","input":"\"password123\"","output":"ComputeSHA256(\"password123\")"}
{"instruction":"Get the file extension of the file \"example.docx\".","input":"\"example.docx\"","output":"GetFileExtension(\"example.docx\")"}
{"instruction":"Compute the soundex code for the string \"Smith\".","input":"\"Smith\"","output":"Soundex(\"Smith\")"}
{"instruction":"Parse the name \"John Doe\".","input":"\"John Doe\"","output":"ParseNameEx(\"John Doe\")"}
{"instruction":"Compute the refined soundex code for the string \"Smith\".","input":"\"Smith\"","output":"RefinedSoundex(\"Smith\")"}
{"instruction":"Compute the MD5 hash of the string \"password123\".","input":"\"password123\"","output":"ComputeMD5(\"password123\")"}
{"instruction":"Create a new text file named \"example.txt\" with the text \"Hello world!\" as its content.","input":"\"Hello world!\"","output":"WriteTextToFile(\"example.txt\", \"Hello world!\")"}
{"instruction":"Check if the file \"example.txt\" exists.","input":"\"example.txt\"","output":"FileExists(\"example.txt\")"}
{"instruction":"Move the file \"file1.txt\" to \"file2.txt\".","input":"\"file1.txt\", \"file2.txt\"","output":"MoveFile(\"file1.txt\", \"file2.txt\")"}
{"instruction":"Delete the file \"example.txt\".","input":"\"example.txt\"","output":"DeleteFile(\"example.txt\")"}
{"instruction":"Compute the double metaphone code for the string \"Smith\".","input":"\"Smith\"","output":"DoubleMetaphone(\"Smith\")"}
{"instruction":"Compute the hash of the string \"password123\" with the key \"secret\".","input":"\"password123\", \"secret\"","output":"ComputeHash(\"password123\", \"secret\")"}
{"instruction":"Convert the string \"Hello, World!\" to bytes using the UTF-8 codepage.","input":"\"Hello, World!\"","output":"ToBytes(\"Hello, World!\", \"UTF-8\")"}
{"instruction":"Decode the URL encoded string \"%48%65%6C%6C%6F%2C%20%57%6F%72%6C%64%21\" using the URL decoding function.","input":"\"%48%65%6C%6C%6F%2C%20%57%6F%72%6C%64%21\"","output":"UrlDecode(\"%48%65%6C%6C%6F%2C%20%57%6F%72%6C%64%21\")"}
{"instruction":"Compute the byte length of the file \"example.txt\".","input":"\"example.txt\"","output":"FileLength(\"example.txt\")"}
{"instruction":"Compute the floor of the number 3.14159.","input":"3.14159","output":"Floor(3.14159)"}
{"instruction":"Compute the ceiling of the number 3.14159.","input":"3.14159","output":"Ceiling(3.14159)"}
{"instruction":"Compute the days in a time span of 5 hours.","input":"TimeSpanFromTicks(5 * 36000000000)","output":"Days(TimeSpanFromTicks(5 * 36000000000))"}
{"instruction":"Compute the number of periods in a loan of $1000 at 5% interest rate with monthly payments of $50.","input":"0.05, 50, -1000","output":"NumPeriods(0.05/12, 50, -1000)"}
{"instruction":"Compute the future value of an investment of $1000 at 5% interest rate for 10 years.","input":"0.05, 10, 0, -1000","output":"FV(0.05, 10, 0, -1000)"}
{"instruction":"Compute the present value of a payment of $50 per month for 5 years at 10% interest rate.","input":"0.1/12, 60, -50","output":"PV(0.1/12, 60, -50)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: original_text, original_code_page, target_code_page","output":"ConvertEncoding(original_text, original_code_page, target_code_page)"}
{"instruction":"Compute the SHA256 hash of a string.","input":"Variables: original_string","output":"ComputeSHA256(original_string)"}
{"instruction":"Append a text to a file.","input":"Variables: file_path, text_to_append","output":"AppendTextToFile(file_path, text_to_append)"}
{"instruction":"Check if a file exists.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Get the length of a file.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Get all worksheets in an Excel file.","input":"Variables: excel_file_path","output":"GetExcelWorksheets(excel_file_path)"}
{"instruction":"Move a file to a new location.","input":"Variables: original_file_path, new_file_path","output":"MoveFile(original_file_path, new_file_path)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variables: original_string","output":"DoubleMetaphone(original_string)"}
{"instruction":"Get the refined soundex of a string.","input":"Variables: original_string","output":"RefinedSoundex(original_string)"}
{"instruction":"Determine if a process is running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Compute the total days in a time span.","input":"Variables: time_span","output":"TotalDays(time_span)"}
{"instruction":"Round a decimal to two decimal places.","input":"Variables: decimal_number","output":"Round(decimal_number, 2)"}
{"instruction":"Calculate the power of a base number to an exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Get the directory of a file.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Parse an address in the US.","input":"Variables: full_address, output_case","output":"ParseAddressUS(full_address, output_case)"}
{"instruction":"Compute the maximum of two dates.","input":"Variables: date1, date2","output":"Max(date1, date2)"}
{"instruction":"Determine if a directory exists.","input":"Variables: directory_path","output":"DirectoryExists(directory_path)"}
{"instruction":"Compute the floor of a decimal number.","input":"Variables: decimal_number","output":"Floor(decimal_number)"}
{"instruction":"Read the first line of a file.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Compute the sum of two decimal numbers.","input":"Variables: decimal_number_1, decimal_number_2","output":"decimal_number_1 + decimal_number_2"}
{"instruction":"Copy a file to a new location.","input":"Variables: source_file_path, destination_file_path, overwrite","output":"CopyFile(source_file_path, destination_file_path, overwrite)"}
{"instruction":"Compute the SLN depreciation of an asset.","input":"Variables: cost, salvage, life","output":"SLN(cost, salvage, life)"}
{"instruction":"Compute the IPmt of a loan.","input":"Variables: rate, periods, num_periods, pv","output":"IPmt(rate, periods, num_periods, pv)"}
{"instruction":"Convert a date string to datetime format.","input":"Variables: date_string (e.g. \"2022-01-01\")","output":"CreateDateTime(date_string)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: str (e.g. \"Hello, world!\"), key (e.g. \"password123\"), hex (e.g. True)","output":"ComputeSHA256(str, key, hex)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: file_path (e.g. \"/documents/my_file.txt\")","output":"FileLength(file_path)"}
{"instruction":"Round a decimal number to the nearest whole number.","input":"Variables: decimal_number (e.g. 3.14159)","output":"Round(decimal_number)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: str (e.g. \"Bonjour\"), from_codepage (e.g. \"iso-8859-1\")","output":"ConvertEncoding(str, from_codepage)"}
{"instruction":"Compute the total number of days in a given time span.","input":"Variables: time_span (e.g. \"3.15:30:00\")","output":"TotalDays(time_span)"}
{"instruction":"Get the name of a file without its extension.","input":"Variables: file_path (e.g. \"/documents/my_file.txt\")","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Compute the refined soundex code for a given string.","input":"Variables: str (e.g. \"ASTERA\")","output":"RefinedSoundex(str)"}
{"instruction":"Get the directory of a given file path.","input":"Variables: file_path (e.g. \"/documents/my_file.txt\")","output":"GetDirectory(file_path)"}
{"instruction":"Compute the total number of milliseconds in a given time span.","input":"Variables: time_span (e.g. \"3.15:30:00\")","output":"TotalMilliSeconds(time_span)"}
{"instruction":"Append text to the end of a file.","input":"Variables: file_path (e.g. \"/documents/my_file.txt\"), text (e.g. \"New text\")","output":"AppendTextToFile(file_path, text)"}
{"instruction":"Compute the double metaphone code for a given string.","input":"Variables: str (e.g. \"ASTERA\")","output":"DoubleMetaphone(str)"}
{"instruction":"Compute the floor value of a given real number.","input":"Variables: real_number (e.g. 3.14159)","output":"Floor(real_number)"}
{"instruction":"Get the meta properties of an EDI file.","input":"Variables: file_path (e.g. \"/documents/my_file.edi\")","output":"GetEDIFileMetaDate(file_path)"}
{"instruction":"Compute the maximum of two given dates.","input":"Variables: date1 (e.g. \"2022-01-01\"), date2 (e.g. \"2022-01-02\")","output":"Max(date1, date2)"}
{"instruction":"Compute the soundex code for a given string.","input":"Variables: str (e.g. \"ASTERA\")","output":"Soundex(str)"}
{"instruction":"Retrieve the first line of a text file.","input":"Variables: file_path (e.g. \"/documents/my_file.txt\")","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Compute the difference in days between two dates.","input":"Variables: date1 (e.g. \"2022-01-01\"), date2 (e.g. \"2022-01-02\")","output":"Days(date2 - date1)"}
{"instruction":"Retrieve the length of a specific line in a text file.","input":"Variables: file_path (e.g. \"/documents/my_file.txt\"), line_number (e.g. 4)","output":"FileLineCount(file_path, line_number)"}
{"instruction":"Check if a file with a specific file path exists.","input":"Variables: file_path (e.g. \"/documents/my_file.txt\")","output":"FileExists(file_path)"}
{"instruction":"Compute the maximum of two given decimal numbers.","input":"Variables: decimal1 (e.g. 3.14), decimal2 (e.g. 2.71)","output":"Max(decimal1, decimal2)"}
{"instruction":"Compute the number of whole hours in a given time span.","input":"Variables: time_span (e.g. \"3.15:30:00\")","output":"TotalHours(time_span)"}
{"instruction":"Convert a string to lowercase using a specific code page.","input":"Variables: str (e.g. \"BONJOUR\"), code_page (e.g. \"iso-8859-1\")","output":"ReadFileText(str, code_page).ToLower()"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: input_str","output":"ComputeSHA256(input_str)"}
{"instruction":"Convert a given string to uppercase and encode for URL.","input":"Variables: input_str","output":"UrlEncode(Upper(input_str))"}
{"instruction":"Parse a US address and return the parsed address in title case.","input":"Variables: address_string","output":"ToString(ParseAddressUS(address_string, \"TitleCase\"))"}
{"instruction":"Calculate the number of years, months, and days between two dates.","input":"Variables: start_date, end_date","output":"TotalDays(Minus(end_date, start_date)) & \" days, \" & TotalMonths(Minus(end_date, start_date)) & \" months, \" & TotalYears(Minus(end_date, start_date)) & \" years\""}
{"instruction":"Convert a given string to bytes using UTF-8 encoding.","input":"Variables: input_str","output":"ToBytes(input_str, \"utf-8\")"}
{"instruction":"Get the last updated date of a file.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Copy a file from source path to destination path with overwrite option.","input":"Variables: source_path, dest_path","output":"CopyFile(source_path, dest_path, true)"}
{"instruction":"Calculate monthly payment for a loan with given interest rate, number of periods, and present value.","input":"Variables: rate, periods, present_value","output":"Pmt(rate/1200, periods, present_value)"}
{"instruction":"Calculate the remaining balance of a loan after a given number of payments.","input":"Variables: rate, periods, present_value, payment_number","output":"Pv(rate/1200, payment_number, Pmt(rate/1200, periods, present_value))"}
{"instruction":"Get the refined soundex code for a given string.","input":"Variables: input_str","output":"RefinedSoundex(input_str)"}
{"instruction":"Calculate the sum of two decimal numbers.","input":"Variables: number1, number2","output":"Plus(number1, number2)"}
{"instruction":"Convert a given string to lowercase and encode for URL.","input":"Variables: input_str","output":"UrlEncode(Lower(input_str))"}
{"instruction":"Get the list of worksheets in an Excel file.","input":"Variables: excel_file_path","output":"ToString(GetExcelWorksheets(excel_file_path))"}
{"instruction":"Calculate the interest payment for a loan for a given payment period.","input":"Variables: rate, periods, present_value, payment_number","output":"Ipmt(rate/1200, payment_number, periods, present_value)"}
{"instruction":"Calculate the number of periods required to pay off a loan.","input":"Variables: rate, payment, present_value","output":"NumPeriods(rate/1200, payment, present_value)"}
{"instruction":"Calculate the double metaphone code for a given string.","input":"Variables: input_str","output":"DoubleMetaphone(input_str)"}
{"instruction":"Calculate the total interest paid on a loan.","input":"Variables: rate, periods, present_value","output":"TotalInterest(rate/1200, periods, present_value, Pmt(rate/1200, periods, present_value))"}
{"instruction":"Get the file size in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Calculate the interest payment for a loan for a given payment period and final value.","input":"Variables: rate, periods, present_value, payment_number, final_value","output":"Ipmt(rate/1200, payment_number, periods, present_value, final_value)"}
{"instruction":"Round a given decimal number to two decimal places.","input":"Variables: number","output":"Round(number, 2)"}
{"instruction":"Calculate the remaining balance of a loan after a given number of payments with a final value.","input":"Variables: rate, periods, present_value, payment_number, final_value","output":"Pv(rate/1200, payment_number, Pmt(rate/1200, periods, present_value), final_value)"}
{"instruction":"Calculate the present value of a loan with given interest rate, number of periods, and payment.","input":"Variables: rate, periods, payment","output":"Pv(rate/1200, periods, payment)"}
{"instruction":"Check if a given directory exists.","input":"Variables: directory_path","output":"DirectoryExists(directory_path)"}
{"instruction":"Parse the address and output in title case.","input":"Variables: full_address","output":"ParseAddressUS(full_address, \"TitleCase\")"}
{"instruction":"Calculate the annual depreciation using DDB depreciation for an asset with $50,000 cost, $5,000 salvage value, 5-year life and 3-year period.","input":"","output":"DDB(50000,5000,5,3)"}
{"instruction":"Compute the hash of a string using SHA256 algorithm and output in hexadecimal format.","input":"Variables: message","output":"ComputeHash(message, null, true)"}
{"instruction":"Get the length of a file.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Copy a file from source path to destination path, overwriting if necessary.","input":"Variables: source_path, dest_path","output":"CopyFile(source_path, dest_path, true)"}
{"instruction":"Check if a directory exists.","input":"Variables: directory_path","output":"DirectoryExists(directory_path)"}
{"instruction":"Calculate future value based on present value, interest rate, number of periods and payment amount.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Calculate the soundex code of a string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Calculate the refined soundex code of a string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Check if a specific process is running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: str, from_codepage","output":"ConvertEncoding(str, from_codepage)"}
{"instruction":"Get the file extension of a file.","input":"Variables: file_path","output":"GetFileExtension(file_path)"}
{"instruction":"Get the file info of a file.","input":"Variables: file_path","output":"GetFileInfo(file_path)"}
{"instruction":"Get the name of a file.","input":"Variables: file_path","output":"GetFileName(file_path)"}
{"instruction":"Get the name of a file without its extension.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Create a new file and write text to it.","input":"Variables: file_path, text","output":"WriteTextToFile(file_path, text)"}
{"instruction":"Delete a file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Read the first line of a file and output it.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Read a file's text content and output it.","input":"Variables: file_path","output":"ReadFileText(file_path)"}
{"instruction":"Calculate the double metaphone code of a string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Compute the hash of a string using MD5 algorithm and output in hexadecimal format.","input":"Variables: message","output":"ComputeMD5(message)"}
{"instruction":"Terminate a specific running process.","input":"Variables: processname","output":"TerminateProcess(processname)"}
{"instruction":"Calculate the value of monthly payment for a loan with interest rate of 5%, 10 years and a principle amount of $50,000.","input":"","output":"Pmt(0.05/12, 10*12, 50000)"}
{"instruction":"Convert a string to URL encoded format.","input":"Variables: text","output":"UrlEncode(text)"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variables: price","output":"Round(price)"}
{"instruction":"Calculate the total number of seconds in a timespan.","input":"Variables: time","output":"TotalSeconds(time)"}
{"instruction":"Calculate the SHA256 hash of a string.","input":"Variables: text","output":"ComputeSHA256(text)"}
{"instruction":"Delete a file from a specified file path.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Move a file to a new file path and delete the original file.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Read the contents of a file and return the first line.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Compute the present value of a loan given the interest rate, payment, and present value.","input":"Variables: rate, pmt, pv","output":"PV(rate, pmt, pv)"}
{"instruction":"Calculate the refined soundex of a string.","input":"Variables: text","output":"RefinedSoundex(text)"}
{"instruction":"Copy a file from a specified file path to a new file path.","input":"Variables: sourceFilePath, destFilePath","output":"CopyFile(sourceFilePath, destFilePath)"}
{"instruction":"Calculate the number of days in a timespan.","input":"Variables: time","output":"TotalDays(time)"}
{"instruction":"Determine if a specified directory exists.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Append text to the end of a file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Calculate the number of periods in a loan given the interest rate, payment, and present value.","input":"Variables: rate, pmt, pv","output":"NumPeriods(rate, pmt, pv)"}
{"instruction":"Compute the soundex of a string.","input":"Variables: text","output":"Soundex(text)"}
{"instruction":"Convert a string to a byte array.","input":"Variables: text","output":"ToBytes(text)"}
{"instruction":"Check if a specified file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Calculate the number of hours in a timespan.","input":"Variables: time","output":"TotalHours(time)"}
{"instruction":"Calculate the number of minutes in a timespan.","input":"Variables: time","output":"TotalMinutes(time)"}
{"instruction":"Calculate the number of milliseconds in a timespan.","input":"Variables: time","output":"TotalMilliseconds(time)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variables: text","output":"DoubleMetaphone(text)"}
{"instruction":"Convert a string from one encoding to another.","input":"Variables: text, fromCodePage","output":"ConvertEncoding(text, fromCodePage)"}
{"instruction":"Parse a US address and return the parsed address object.","input":"Variables: fullAddress","output":"ParseAddressUS(fullAddress, \"TitleCase\")"}
{"instruction":"Convert a string to URL-safe format.","input":"Variables: url","output":"UrlEncode(url)"}
{"instruction":"Calculate the total number of seconds in a given timespan.","input":"Variables: timespan","output":"TotalSeconds(timespan)"}
{"instruction":"Calculate the future value of an investment.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Compute the hash of a given input string using a given key.","input":"Variables: input, key","output":"ComputeHash(input, key)"}
{"instruction":"Convert a given string to a byte array using a specified code page.","input":"Variables: str, codePage","output":"ToBytes(str, codePage)"}
{"instruction":"Get the last update date of a file.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Delete a file from the file system.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Compute the SHA-256 hash of a given input string.","input":"Variables: input","output":"ComputeSHA256(input)"}
{"instruction":"Check if a process is currently running on the system.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Convert a given string to a TimeSpan object using a specified format string.","input":"Variables: timeSpanStr, format","output":"ToTimeSpan(timeSpanStr, format)"}
{"instruction":"Get the name of the directory containing a given file.","input":"Variables: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Compute the Refined Soundex code for a given input string.","input":"Variables: input","output":"RefinedSoundex(input)"}
{"instruction":"Calculate the number of days in a given timespan.","input":"Variables: timespan","output":"TotalDays(timespan)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Read a specified number of bytes from a given file.","input":"Variables: filePath, numBytes","output":"ReadFileBytes(filePath, numBytes)"}
{"instruction":"Calculate the present value of an investment.","input":"Variables: rate, nper, pmt, fv","output":"PV(rate, nper, pmt, fv)"}
{"instruction":"Calculate the number of periods in an investment.","input":"Variables: rate, pmt, pv","output":"NumPeriods(rate, pmt, pv)"}
{"instruction":"Convert a given string to its Double Metaphone code.","input":"Variables: input","output":"DoubleMetaphone(input)"}
{"instruction":"Calculate the floor of a given decimal number.","input":"Variables: num","output":"Floor(num)"}
{"instruction":"Append a line of text to a given file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Compute the MD5 hash of a given input string.","input":"Variables: input","output":"ComputeMD5(input)"}
{"instruction":"Get the length of a given file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Check if a directory exists at a given path.","input":"Variables: filePath","output":"DirectoryExists(filePath)"}
{"instruction":"Convert a string to URL encoded format.","input":"Variables: str","output":"UrlEncode(str)"}
{"instruction":"Calculate the total number of seconds in a given time span.","input":"Variables: days, hours, minutes, seconds","output":"TotalSeconds(ToTimeSpan(days, hours, minutes, seconds))"}
{"instruction":"Compute the absolute value of a given real number.","input":"Variables: number","output":"Abs(number)"}
{"instruction":"Get the file extension from a given file path.","input":"Variables: filePath","output":"GetFileExtension(filePath)"}
{"instruction":"Round a given decimal number to a specified number of decimal places.","input":"Variables: number, decimals","output":"Round(number, decimals)"}
{"instruction":"Compute the SHA256 hash of a given string using a provided key.","input":"Variables: str, key","output":"ComputeSHA256(str, key)"}
{"instruction":"Move a file from one location to another.","input":"Variables: filePath, newFilePath","output":"MoveFile(filePath, newFilePath)"}
{"instruction":"Copy a file from one location to another, potentially overwriting an existing file.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Compute the number of hours in a given time span.","input":"Variables: days, hours, minutes, seconds","output":"TotalHours(ToTimeSpan(days, hours, minutes, seconds))"}
{"instruction":"Compute the soundex code for a given string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Compute the MD5 hash of a given string using a provided key in hex format.","input":"Variables: str, key","output":"ComputeHash(str, key, true)"}
{"instruction":"Compute the number of ticks in a given time span.","input":"Variables: days, hours, minutes, seconds","output":"Ticks(ToTimeSpan(days, hours, minutes, seconds))"}
{"instruction":"Check if a specified process is currently running.","input":"Variables: processName","output":"IsProcessRunning(processName)"}
{"instruction":"Calculate the future value of an investment given a certain interest rate, number of periods, payments, and present value.","input":"Variables: rate, nper, pmt, pv","output":"FV(rate, nper, pmt, pv)"}
{"instruction":"Calculate the number of periods needed for an investment to reach a specified future value given a certain interest rate, payments, and present value.","input":"Variables: rate, pmt, pv, fv","output":"NumPeriods(rate, pmt, pv, fv)"}
{"instruction":"Calculate the depreciation expense of an asset for a given period using the double-declining balance method.","input":"Variables: cost, salvage, life, period","output":"DDB(cost, salvage, life, period)"}
{"instruction":"Parse and correct a US address.","input":"Variables: address","output":"ParseAndCorrectAddressUS(address)"}
{"instruction":"Get the length of a specified file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Compute the number of minutes in a given time span.","input":"Variables: days, hours, minutes, seconds","output":"TotalMinutes(ToTimeSpan(days, hours, minutes, seconds))"}
{"instruction":"Compute the refined soundex code for a given string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Remove a specified file.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Compute the total number of milliseconds in a given time span.","input":"Variables: days, hours, minutes, seconds","output":"TotalMilliSeconds(ToTimeSpan(days, hours, minutes, seconds))"}
{"instruction":"Append a specified text to the end of a specified file.","input":"Variables: filePath, text","output":"AppendTextToFile(filePath, text)"}
{"instruction":"Convert the string \"Hello World\" to uppercase.","input":"","output":"Uppercase(\"Hello World\")"}
{"instruction":"Compute the SHA256 hash of the string \"Secret Password\".","input":"","output":"ComputeSHA256(\"Secret Password\")"}
{"instruction":"Round the decimal number 3.14159 to 2 decimal places.","input":"","output":"Round(3.14159, 2)"}
{"instruction":"Get the file length of a file located at \"C:\\example\\file.txt\".","input":"","output":"FileLength(\"C:\\example\\file.txt\")"}
{"instruction":"Get the directory path for a file located at \"C:\\example\\file.txt\".","input":"","output":"GetDirectory(\"C:\\example\\file.txt\")"}
{"instruction":"Get the first 5 characters of a string \"Hello World\".","input":"","output":"Left(\"Hello World\", 5)"}
{"instruction":"Append the text \"Hello World\" to a file located at \"C:\\example\\file.txt\".","input":"","output":"AppendTextToFile(\"C:\\example\\file.txt\", \"Hello World\")"}
{"instruction":"Convert the string \"Hello World\" to a byte array.","input":"","output":"ToBytes(\"Hello World\", \"UTF-8\")"}
{"instruction":"Compute the Refined Soundex code for the string \"Hello World\".","input":"","output":"RefinedSoundex(\"Hello World\")"}
{"instruction":"Check if a process named \"notepad\" is running.","input":"","output":"IsProcessRunning(\"notepad.exe\")"}
{"instruction":"Create a DateTime object representing January 1, 2000.","input":"","output":"CreateDateTime(\"2000-01-01\")"}
{"instruction":"Delete a file located at \"C:\\example\\file.txt\".","input":"","output":"DeleteFile(\"C:\\example\\file.txt\")"}
{"instruction":"Get the file extension for a file located at \"C:\\example\\file.txt\".","input":"","output":"GetFileExtension(\"C:\\example\\file.txt\")"}
{"instruction":"Get the length of the first line of text in a file located at \"C:\\example\\file.txt\".","input":"","output":"Length(ReadFileFirstLine(\"C:\\example\\file.txt\"))"}
{"instruction":"Copy a file located at \"C:\\example\\file.txt\" to \"C:\\example\\file2.txt\".","input":"","output":"CopyFile(\"C:\\example\\file.txt\", \"C:\\example\\file2.txt\", true)"}
{"instruction":"Calculate the payment amount for a loan with a principal of 5000, interest rate of 5%, and 12 monthly payments.","input":"","output":"Pmt(0.05/12, 12, 5000)"}
{"instruction":"Calculate the number of periods required to pay off a loan with a principal of 5000, interest rate of 5%, and a payment of 100 per month.","input":"","output":"NumPeriods(0.05/12, -100, 5000)"}
{"instruction":"Generate a random real number between 1 and 10.","input":"","output":"RandomReal(1, 10)"}
{"instruction":"Compute the Double Metaphone code for the string \"Hello World\".","input":"","output":"DoubleMetaphone(\"Hello World\")"}
{"instruction":"Compute the hash of the string \"Secret Password\" using a key of \"1234\".","input":"","output":"ComputeHash(\"Secret Password\", \"1234\")"}
{"instruction":"Move a file located at \"C:\\example\\file.txt\" to \"C:\\example\\newfile.txt\".","input":"","output":"MoveFile(\"C:\\example\\file.txt\", \"C:\\example\\newfile.txt\")"}
{"instruction":"Convert the string \"Hello World\" to a TimeSpan object.","input":"","output":"ToTimeSpan(\"00:00:00Hello World\")"}
{"instruction":"Round the real number 3.14159 to 2 decimal places.","input":"","output":"Round(3.14159, 2)"}
{"instruction":"Convert a string to its Double Metaphone representation.","input":"Variables: name","output":"DoubleMetaphone(name)"}
{"instruction":"Compute the SHA256 hash of a string with a given key.","input":"Variables: str, key","output":"ComputeHash(str, key, False)"}
{"instruction":"Round a decimal number to the nearest integer.","input":"Variables: num","output":"Round(num)"}
{"instruction":"Calculate the total number of days in a TimeSpan.","input":"Variables: time_span","output":"TotalDays(time_span)"}
{"instruction":"Add a new line of text to an existing text file.","input":"Variables: file_path, new_line","output":"AppendTextToFile(file_path, new_line)"}
{"instruction":"Find out if a file exists at a given file path.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Calculate the monthly payment required to pay off a loan.","input":"Variables: interest_rate, num_periods, loan_amount","output":"Pmt(interest_rate/12, num_periods, loan_amount)"}
{"instruction":"Compute the MD5 checksum of a string.","input":"Variables: str","output":"ComputeMD5(str)"}
{"instruction":"Convert a string to its Soundex representation.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Calculate the total number of seconds in a TimeSpan.","input":"Variables: time_span","output":"TotalSeconds(time_span)"}
{"instruction":"Copy a file from one location to another.","input":"Variables: source_file_path, destination_file_path","output":"CopyFile(source_file_path, destination_file_path, False)"}
{"instruction":"Compute the Refined Soundex representation of a string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Delete a file at a given file path.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Calculate the number of periods required to pay off a loan.","input":"Variables: interest_rate, loan_amount, monthly_payment","output":"NumPeriods(interest_rate/12, monthly_payment, loan_amount)"}
{"instruction":"Generate a random real number between two integers.","input":"Variables: min_num, max_num","output":"RandomReal(min_num, max_num)"}
{"instruction":"Compute the total length of a file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Calculate the present value of a loan.","input":"Variables: interest_rate, num_periods, monthly_payment","output":"PV(interest_rate/12, num_periods, monthly_payment)"}
{"instruction":"Calculate the interest payment for a given period of a loan.","input":"Variables: interest_rate, period, num_periods, loan_amount","output":"IPmt(interest_rate/12, period, num_periods, loan_amount)"}
{"instruction":"Determine if a specific process is currently running on the system.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Calculate the number of days between two dates.","input":"Variables: date1, date2","output":"Days(Max(date1, date2) - Min(date1, date2))"}
{"instruction":"Convert a string to its URL-encoded representation.","input":"Variables: str","output":"UrlEncode(str)"}
{"instruction":"Determine the number of lines in a given file.","input":"Variables: file_path","output":"FileLineCount(file_path)"}
{"instruction":"Calculate the total number of minutes in a TimeSpan.","input":"Variables: time_span","output":"TotalMinutes(time_span)"}
{"instruction":"Parse and extract the address components from the input.","input":"Variables: full_address","output":"ParseAddressUS(full_address, \"mixedCase\")"}
{"instruction":"Compute SHA256 hash for the given input string.","input":"Variables: input_string, hash_key","output":"ComputeSHA256(input_string, hash_key)"}
{"instruction":"Calculate the total payback period for a loan.","input":"Variables: interest_rate, loan_amount, monthly_payment","output":"NumPeriods(interest_rate/12, monthly_payment, -1*loan_amount)"}
{"instruction":"Convert a given string to its URL encoded form.","input":"Variables: string_to_encode","output":"UrlEncode(string_to_encode)"}
{"instruction":"Get the number of lines in a specified file.","input":"Variables: file_path","output":"FileLineCount(file_path)"}
{"instruction":"Remove duplicate entries from a given array.","input":"Variables: input_array","output":"Unique(input_array)"}
{"instruction":"Compute the soundex code for a given string.","input":"Variables: input_string","output":"Soundex(input_string)"}
{"instruction":"Convert a time duration string to TimeSpan format.","input":"Variables: duration_string, format","output":"ToTimeSpan(duration_string, format)"}
{"instruction":"Read the first line of a specified file.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Copy a file from source location to destination location.","input":"Variables: source_file_path, dest_file_path, overwrite","output":"CopyFile(source_file_path, dest_file_path, overwrite)"}
{"instruction":"Get the name of the file from a specified file path.","input":"Variables: file_path","output":"GetFileName(file_path)"}
{"instruction":"Calculate the future value of a loan.","input":"Variables: interest_rate, number_of_periods, monthly_payment, present_value","output":"FV(interest_rate/12, number_of_periods, monthly_payment, -1*present_value)"}
{"instruction":"Generate the double metaphone code for a given string.","input":"Variables: input_string","output":"DoubleMetaphone(input_string)"}
{"instruction":"Compute the MD5 hash for a given input string.","input":"Variables: input_string","output":"ComputeMD5(input_string)"}
{"instruction":"Delete a specified file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the refined soundex code for a given string.","input":"Variables: input_string","output":"RefinedSoundex(input_string)"}
{"instruction":"Get the Excel worksheets in a specified workbook.","input":"Variables: excel_file_path","output":"GetExcelWorksheets(excel_file_path)"}
{"instruction":"Compute the floor of a given decimal number.","input":"Variables: decimal_number","output":"Floor(decimal_number)"}
{"instruction":"Append text to a specified file.","input":"Variables: file_path, text_to_append","output":"AppendTextToFile(file_path, text_to_append)"}
{"instruction":"Verify if a specified process is running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Convert a given string to a specified encoding type.","input":"Variables: input_string, encoding_type","output":"ConvertEncoding(input_string, encoding_type)"}
{"instruction":"Compute the SLN depreciation for a given asset.","input":"Variables: cost, salvage_value, years_of_life","output":"SLN(cost, salvage_value, years_of_life)"}
{"instruction":"Compute the IPMT interest payment for a given loan.","input":"Variables: interest_rate, period_number, number_of_periods, present_value","output":"IPmt(interest_rate/12, period_number, number_of_periods, -1*present_value)"}
{"instruction":"Convert a string to RefinedSoundex format.","input":"Variables: name","output":"RefinedSoundex(name)"}
{"instruction":"Round a given decimal number to 2 decimal places.","input":"Variables: cost","output":"Round(cost,2)"}
{"instruction":"Compute the hash of a given string using MD5 algorithm.","input":"Variables: message","output":"ComputeMD5(message)"}
{"instruction":"Get the directory of a given file path.","input":"Variables: filePath","output":"GetDirectory(filePath)"}
{"instruction":"Check if a given file exists.","input":"Variables: filePath","output":"FileExists(filePath)"}
{"instruction":"Get the length of a given file in bytes.","input":"Variables: filePath","output":"FileLength(filePath)"}
{"instruction":"Compute SHA256 hash of a given string using a key.","input":"Variables: message, key","output":"ComputeSHA256(message, key)"}
{"instruction":"Get the maximum of two given dates.","input":"Variables: date1, date2","output":"Max(date1, date2)"}
{"instruction":"Copy a file from source path to destination path.","input":"Variables: sourceFilePath, destFilePath, overWrite","output":"CopyFile(sourceFilePath, destFilePath, overWrite)"}
{"instruction":"Compute the days between two dates.","input":"Variables: start_date, end_date","output":"Days(end_date-start_date)"}
{"instruction":"Compute the difference between two given TimeSpan objects in total hours.","input":"Variables: timeSpan1, timeSpan2","output":"TotalHours(timeSpan2-timeSpan1)"}
{"instruction":"Convert a given string to byte array using a specific code page.","input":"Variables: str, codePage","output":"ToBytes(str, codePage)"}
{"instruction":"Get the last update date and time of a given file.","input":"Variables: filePath","output":"LastUpdateDateTime(filePath)"}
{"instruction":"Round up a given decimal number to the nearest integer.","input":"Variables: decimalNumber","output":"Ceiling(decimalNumber)"}
{"instruction":"Check if a given directory exists.","input":"Variables: directoryPath","output":"DirectoryExists(directoryPath)"}
{"instruction":"Delete a file at a given file path.","input":"Variables: filePath","output":"DeleteFile(filePath)"}
{"instruction":"Compute the Power of a given Real number with a specified exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Encode a given string into URL format.","input":"Variables: str","output":"UrlEncode(str)"}
{"instruction":"Convert a given string to its Byte Metaphone representation.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Calculate the sum of two given decimal numbers.","input":"Variables: num1, num2","output":"num1 + num2"}
{"instruction":"Get the count of lines in a given file.","input":"Variables: filePath","output":"FileLineCount(filePath)"}
{"instruction":"Read the first line of a given file.","input":"Variables: filePath","output":"ReadFileFirstLine(filePath)"}
{"instruction":"Compute the difference between two given TimeSpan objects in total minutes.","input":"Variables: timeSpan1, timeSpan2","output":"TotalMinutes(timeSpan2-timeSpan1)"}
{"instruction":"Get the file extension from a given file path.","input":"Variables: file_path","output":"GetFileExtension(file_path)"}
{"instruction":"Compute the SHA256 hash of a given string.","input":"Variables: input_string","output":"ComputeSHA256(input_string)"}
{"instruction":"Round a given real number to the nearest whole number.","input":"Variables: number","output":"Round(number)"}
{"instruction":"Convert a given string to URL encoded format.","input":"Variables: string_to_encode","output":"UrlEncode(string_to_encode)"}
{"instruction":"Compute the total number of minutes in a given time span.","input":"Variables: time_span","output":"TotalMinutes(time_span)"}
{"instruction":"Get the last update date and time of a given file.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Compute the power of a given base and exponent.","input":"Variables: base, exponent","output":"Pow(base, exponent)"}
{"instruction":"Round a given decimal number to the nearest whole number.","input":"Variables: decimal_number","output":"Round(decimal_number)"}
{"instruction":"Convert a given string to bytes array.","input":"Variables: string_to_convert, code_page","output":"ToBytes(string_to_convert, code_page)"}
{"instruction":"Compute the refined soundex of a given string.","input":"Variables: input_string","output":"RefinedSoundex(input_string)"}
{"instruction":"Compute the double metaphone of a given string.","input":"Variables: input_string","output":"DoubleMetaphone(input_string)"}
{"instruction":"Copy a given file to a given destination path while overwriting if necessary.","input":"Variables: source_file_path, destination_file_path","output":"CopyFile(source_file_path, destination_file_path, true)"}
{"instruction":"Compute the length in bytes of a given file.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Get the name of the file without its extension from a given file path.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Delete a given file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the number of periods for a given rate, payment, and present value.","input":"Variables: rate, payment, present_value","output":"NumPeriods(rate, payment, present_value)"}
{"instruction":"Compute the present value for a given rate, payment, and present value.","input":"Variables: rate, payment, present_value","output":"PV(rate, payment, present_value)"}
{"instruction":"Write a given text to a given file.","input":"Variables: file_path, text_to_write","output":"WriteTextToFile(file_path, text_to_write)"}
{"instruction":"Append a given text to a given file.","input":"Variables: file_path, text_to_append","output":"AppendTextToFile(file_path, text_to_append)"}
{"instruction":"Get the directory of a given file.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Compute the total length of a given time span in seconds.","input":"Variables: time_span","output":"TotalSeconds(time_span)"}
{"instruction":"Compute the number of days in a given time span.","input":"Variables: time_span","output":"TotalDays(time_span)"}
{"instruction":"Compute the integer part of a given real number.","input":"Variables: real_number","output":"Floor(real_number)"}
{"instruction":"Get the file extension of \"document.pdf\"","input":"\"document.pdf\"","output":"GetFileExtension(\"document.pdf\")"}
{"instruction":"Compute the SHA256 hash of \"password123\" using \"secretkey\"","input":"\"password123\", \"secretkey\"","output":"ComputeSHA256(\"password123\", \"secretkey\")"}
{"instruction":"Round up the decimal number 3.14 to the nearest integer.","input":"3.14","output":"Ceiling(3.14)"}
{"instruction":"Get the first worksheet of Excel file \"file.xlsx\"","input":"\"file.xlsx\"","output":"GetExcelWorksheets(\"file.xlsx\")[0]"}
{"instruction":"Get the length of the file \"data.txt\"","input":"\"data.txt\"","output":"FileLength(\"data.txt\")"}
{"instruction":"Compute the total number of days in a timespan of 3 hours and 15 minutes.","input":"3 hours, 15 minutes","output":"TotalDays(ToTimeSpan(0, 3, 15))"}
{"instruction":"Get the refined Soundex code for the name \"John Smith\"","input":"\"John Smith\"","output":"RefinedSoundex(\"John Smith\")"}
{"instruction":"Find the maximum value between two dates: December 31, 2021 and January 1, 2022.","input":"December 31, 2021, January 1, 2022","output":"Max(\"December 31, 2021\", \"January 1, 2022\")"}
{"instruction":"Compute the result of compounding $10,000 at an interest rate of 5% per year for 10 years, with yearly compounding.","input":"10,000, 5%, 10 years","output":"FV(0.05, 10, 0, 10000)"}
{"instruction":"Delete the file \"oldfile.txt\"","input":"\"oldfile.txt\"","output":"DeleteFile(\"oldfile.txt\")"}
{"instruction":"Compute the number of periods required to pay off a loan of $50,000 with monthly payments of $1,000 at an interest rate of 3% per year.","input":"3%, $1000, $50,000","output":"NumPeriods(0.03/12, -1000, 50000)"}
{"instruction":"Convert the string \"Hello World\" to bytes using UTF-8 encoding","input":"\"Hello World\", \"UTF-8\"","output":"ToBytes(\"Hello World\", \"UTF-8\")"}
{"instruction":"Compute the SLN (straight-line depreciation) for an asset with a cost of $10,000, a salvage value of $2,000, and a 5-year life.","input":"$10,000, $2,000, 5 years","output":"SLN(10000, 2000, 5)"}
{"instruction":"Append the text \"New line of text\" to the file \"log.txt\"","input":"\"log.txt\", \"New line of text\"","output":"AppendTextToFile(\"log.txt\", \"New line of text\")"}
{"instruction":"Compute the soundex code for the name \"Robert\"","input":"\"Robert\"","output":"Soundex(\"Robert\")"}
{"instruction":"Get the directory name from the file path \"C:\\folder1\\folder2\\file.txt\"","input":"\"C:\\folder1\\folder2\\file.txt\"","output":"GetDirectory(\"C:\\folder1\\folder2\\file.txt\")"}
{"instruction":"Get the parsed address (output in proper case) from the string \"123 Main St., APT 5, San Francisco, CA 94101\"","input":"\"123 Main St., APT 5, San Francisco, CA 94101\", \"proper case\"","output":"ParseAddressUS(\"123 Main St.\", \"APT 5\", \"San Francisco, CA 94101\", \"proper case\")"}
{"instruction":"Get the number of lines in the file \"document.txt\"","input":"\"document.txt\"","output":"FileLineCount(\"document.txt\")"}
{"instruction":"Round the decimal number 5.678 to 2 decimal places.","input":"5.678","output":"Round(5.678, 2)"}
{"instruction":"Move the file \"oldfile.txt\" to \"newfolder/newfile.txt\"","input":"\"oldfile.txt\", \"newfolder/newfile.txt\"","output":"MoveFile(\"oldfile.txt\", \"newfolder/newfile.txt\")"}
{"instruction":"Get the last update date and time of the file \"data.txt\"","input":"\"data.txt\"","output":"LastUpdateDateTime(\"data.txt\")"}
{"instruction":"Convert the byte array { 72, 101, 108, 108, 111 } to a string using ASCII encoding.","input":"{ 72, 101, 108, 108, 111 }, \"ASCII\"","output":"FromBytes({ 72, 101, 108, 108, 111 }, \"ASCII\")"}
{"instruction":"Compute the SHA256 hash of the string \"password123\" using \"secretkey\" in HEX format.","input":"\"password123\", \"secretkey\", true","output":"ComputeSHA256(\"password123\", \"secretkey\", true)"}
{"instruction":"Calculate the total number of days between two dates.","input":"Variables: start_date, end_date","output":"TotalDays(Max(start_date, end_date)-Min(start_date, end_date))"}
{"instruction":"Create a new folder at specified directory.","input":"Variables: directory_path, folder_name","output":"CreateDirectory(directory_path+\"/\"+folder_name)"}
{"instruction":"Remove a specified file from directory.","input":"Variables: directory_path, file_name","output":"DeleteFile(directory_path+\"/\"+file_name)"}
{"instruction":"Read the first line of a specified file.","input":"Variables: file_path","output":"ReadFileFirstLine(file_path)"}
{"instruction":"Convert a string to bytes.","input":"Variables: input_str","output":"ToBytes(input_str, \"UTF-8\")"}
{"instruction":"Convert bytes to string.","input":"Variables: bytes","output":"FromBytes(bytes, \"UTF-8\")"}
{"instruction":"Compute the hash value of a string.","input":"Variables: input_str, key","output":"ComputeHash(input_str, key)"}
{"instruction":"Compute the SHA256 value of a string.","input":"Variables: input_str","output":"ComputeSHA256(input_str)"}
{"instruction":"Encode a string into URL format.","input":"Variables: input_str","output":"UrlEncode(input_str)"}
{"instruction":"Decode a string from URL format.","input":"Variables: encoded_str","output":"UrlDecode(encoded_str)"}
{"instruction":"Compute the number of characters in a string.","input":"Variables: input_str","output":"Len(input_str)"}
{"instruction":"Get the file extension of a specified file.","input":"Variables: file_path","output":"GetFileExtension(file_path)"}
{"instruction":"Get the name of a specified file without extension.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Get the length of a specified file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Get the number of lines in a specified file.","input":"Variables: file_path","output":"FileLineCount(file_path)"}
{"instruction":"Check if the specified directory exists.","input":"Variables: directory_path","output":"DirectoryExists(directory_path)"}
{"instruction":"Check if the specified file exists.","input":"Variables: file_path","output":"FileExists(file_path)"}
{"instruction":"Get the directory path of a specified file.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Get the name of a specified file.","input":"Variables: file_path","output":"GetFileName(file_path)"}
{"instruction":"Get the last update date/time of a specified file.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Read the text of a specified file.","input":"Variables: file_path","output":"ReadFileText(file_path)"}
{"instruction":"Write text to a specified file.","input":"Variables: file_path, text","output":"WriteTextToFile(file_path, text)"}
{"instruction":"Rename a specified file.","input":"Variables: file_path, new_name","output":"MoveFile(file_path, GetDirectory(file_path)+\"/\"+new_name+\".\"+GetFileExtension(file_path))"}
{"instruction":"Convert a date string to DateTime format.","input":"Variables: date","output":"CreateDateTime(date)"}
{"instruction":"Get the length of a file in bytes.","input":"Variables: file_path","output":"FileLength(file_path)"}
{"instruction":"Compute the SHA256 hash of a string with a specific key.","input":"Variables: str, key","output":"ComputeHash(str, key)"}
{"instruction":"Round a decimal number with a specified number of decimal places.","input":"Variables: num, decimal_places","output":"Round(num, decimal_places)"}
{"instruction":"Parse a US address and output the address in a specific output case.","input":"Variables: full_address, output_case","output":"ParseAddressUS(full_address, output_case)"}
{"instruction":"Write text to a file.","input":"Variables: file_path, text","output":"WriteTextToFile(file_path, text)"}
{"instruction":"Get the file extension of a file.","input":"Variables: file_path","output":"GetFileExtension(file_path)"}
{"instruction":"Compute the soundex of a string.","input":"Variables: str","output":"Soundex(str)"}
{"instruction":"Compute the double metaphone of a string.","input":"Variables: str","output":"DoubleMetaphone(str)"}
{"instruction":"Convert a string to a specific encoding.","input":"Variables: str, from_code_page","output":"ConvertEncoding(str, from_code_page)"}
{"instruction":"Get the last update date and time of a file.","input":"Variables: file_path","output":"LastUpdateDateTime(file_path)"}
{"instruction":"Convert a string to bytes.","input":"Variables: str, code_page","output":"ToBytes(str, code_page)"}
{"instruction":"Compute the refined soundex of a string.","input":"Variables: str","output":"RefinedSoundex(str)"}
{"instruction":"Get the directory of a file.","input":"Variables: file_path","output":"GetDirectory(file_path)"}
{"instruction":"Get the name of a file without extension.","input":"Variables: file_path","output":"GetFileNameWithoutExtension(file_path)"}
{"instruction":"Copy a file from source to destination.","input":"Variables: source_file_path, dest_file_path, overwrite","output":"CopyFile(source_file_path, dest_file_path, overwrite)"}
{"instruction":"Compute the MD5 hash of a string.","input":"Variables: str","output":"ComputeMD5(str)"}
{"instruction":"Delete a file.","input":"Variables: file_path","output":"DeleteFile(file_path)"}
{"instruction":"Compute the hash of a string with a specific key in hexadecimal format.","input":"Variables: str, key","output":"ComputeHash(str, key, true)"}
{"instruction":"Determine if a specified process is running.","input":"Variables: process_name","output":"IsProcessRunning(process_name)"}
{"instruction":"Terminate a specified process.","input":"Variables: process_name","output":"TerminateProcess(process_name)"}
{"instruction":"Compute the difference between two dates in days.","input":"Variables: date_first, date_second","output":"Days(Max(date_first, date_second) - Min(date_first, date_second))"}
{"instruction":"Parse a US address with separate street, city, and state/zip inputs.","input":"Variables: street, city_state_zip, output_case","output":"ParseAddressUS(street, city_state_zip, output_case)"}
{"instruction":"Generate an svg avatar for a given string.","input":"Variables: name","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert time to SHA256","input":"Variables: order_id, order_date","output":"This cannot be accomplished using astera expression."}
{"instruction":"Generate a random phone number","input":"Variables: name, email, address, city, state, zip","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a given file path is a directory","input":"Variables: file_path","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the most common word in a text file","input":"Variables: file_path","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a decimal number to a Roman numeral","input":"Variables: price, quantity, total","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a string to Morse code","input":"Variables: message","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the largest prime factor of a given number","input":"Variables: number","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a string to binary","input":"Variables: message","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the nth Fibonacci number","input":"Variables: n","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a given string is a valid palindrome","input":"Variables: text","output":"This cannot be accomplished using astera expression."}
{"instruction":"Sort a list of strings in reverse alphabetical order","input":"Variables: list_of_strings","output":"This cannot be accomplished using astera expression."}
{"instruction":"Shuffle a deck of cards","input":"Variables: card_deck","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a word is an anagram of another word","input":"Variables: word1, word2","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a string to Pig Latin","input":"Variables: message","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the sum of all prime numbers less than a given number","input":"Variables: number","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a string to a URL slug","input":"Variables: message","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a given string is a valid IPv4 address","input":"Variables: ip_address","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the least common multiple of 2 numbers","input":"Variables: num1, num2","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a string to a Braille representation","input":"Variables: message","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the roots of the quadratic equation.","input":"Variables: a, b, c","output":"This cannot be accomplished using astera expression."}
{"instruction":"Count the number of vowels in a given string.","input":"Variables: product_name, product_description, product_price","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert the name to title case.","input":"Variables: customer_name, customer_email, customer_address","output":"ToProper(customer_name)"}
{"instruction":"Check if a given number is prime.","input":"Variables: order_id, order_date, order_total","output":"This cannot be accomplished using astera expression."}
{"instruction":"Sum the digits of a given integer.","input":"Variables: customer_id, customer_phone, customer_city","output":"This cannot be accomplished using astera expression."}
{"instruction":"Calculate the factorial of a given number.","input":"Variables: quantity, price, discount","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a given string is a palindrome.","input":"Variables: product_id, product_name, product_quantity","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a string to binary.","input":"Variables: employee_id, employee_name, employee_salary","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the longest word in a given sentence.","input":"Variables: message_id, message_date, message_text","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a string to ASCII.","input":"Variables: supplier_id, supplier_name, supplier_phone","output":"This cannot be accomplished using astera expression."}
{"instruction":"Calculate the area of a circle given the diameter.","input":"Variables: product_id, product_category, product_weight","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert customer_name to Morse code.","input":"Variables: customer_id, customer_name, customer_address","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if order_date variable is a leap year.","input":"Variables: order_id, order_date, order_total","output":"This cannot be accomplished using astera expression."}
{"instruction":"Calculate the Fibonacci sequence up to a given number.","input":"Variables: quantity, price, discount","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a given string is a valid email address.","input":"Variables: supplier_id, supplier_name, supplier_phone","output":"The given input is not valid."}
{"instruction":"Calculate the GCD of two given numbers.","input":"Variables: a, b, c","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a given number is a Armstrong number.","input":"Variables: customer_id, customer_phone, customer_city","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a string to hexadecimal.","input":"Variables: product_id, product_name, product_quantity","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the square root of a given number.","input":"Variables: order_name, order_date, amount","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a given string is a valid URL.","input":"Variables: employee_id, employee_name, employee_salary","output":"The given input is not valid."}
{"instruction":"Calculate the value of Pi using the Monte Carlo method.","input":"Variables: message_id, message_date, message_text","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the number of vowels in name","input":"Variables: name, address, phone","output":"This cannot be accomplished using astera expression."}
{"instruction":"Extract the first word from message","input":"Variables: message, feedback, comment","output":"GetToken(message, ' ', 0)"}
{"instruction":"Calculate the area of a circle","input":"Variables: length, width, height, radius","output":"This cannot be accomplished using astera expression."}
{"instruction":"Check if a given string is a palindrome","input":"Variables: word, phrase, sentence","output":"This cannot be accomplished using astera expression."}
{"instruction":"Find the longest word in a sentence","input":"Variables: message, feedback, comment","output":"This cannot be accomplished using astera expression."}
{"instruction":"Add two matrices","input":"Variables: matrix1, matrix2","output":"This cannot be accomplished using astera expression."}
{"instruction":"Extract the keyframes of a given video.","input":"Variables: video","output":"This cannot be accomplished using astera expression."}
{"instruction":"Convert a given CSV file to an XML file.","input":"Variables: file_path","output":"This cannot be accomplished using astera expression."}